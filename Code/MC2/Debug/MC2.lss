
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002324  000023b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800076  00800076  000023ce  2**0
                  ALLOC
  3 .stab         000026dc  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000148c  00000000  00000000  00004aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_3>
      10:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_8>
      24:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 0b 	call	0x1700	; 0x1700 <main>
      8a:	0c 94 90 11 	jmp	0x2320	; 0x2320 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 11 	jmp	0x230a	; 0x230a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
/*
 * Description :
 * Function responsible for initiate the DC Motor
 */
void DcMotor_Init(void )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
/*
 * Set the 2-pins of motor as output pins
 */
	GPIO_setupPinDirection(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	/*Stop the motor at the beginning */
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_LOW);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_LOW);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>


}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DcMotor_Rotate>:
/*
 * Description :
 * Function responsible for rotate the Dc Motor CW, ACW , Stop
 */
void DcMotor_Rotate(DcMotor_state state)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	89 83       	std	Y+1, r24	; 0x01

 if (state==Clock_Wise)
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	59 f4       	brne	.+22     	; 0xba4 <DcMotor_Rotate+0x28>
{
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_HIGH);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_LOW);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
     ba2:	18 c0       	rjmp	.+48     	; 0xbd4 <DcMotor_Rotate+0x58>
}
else if (state==Anti_Clock_Wise)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	59 f4       	brne	.+22     	; 0xbc0 <DcMotor_Rotate+0x44>
{
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_LOW);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_HIGH);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
     bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <DcMotor_Rotate+0x58>
}else{
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_LOW);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_LOW);
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
}
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <timer_count>:
/*
 * Description:
 * Function that using timer to count
 * it is call back function of timer
 */
void timer_count(void) {
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62

	/*increases the global tick each time the timer interrupt*/
	g_tick++;
     be4:	80 91 77 00 	lds	r24, 0x0077
     be8:	90 91 78 00 	lds	r25, 0x0078
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	90 93 78 00 	sts	0x0078, r25
     bf2:	80 93 77 00 	sts	0x0077, r24
	/*
	 * check if the timer count second
	 */

}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <timer>:

void timer(uint8 volatile g_seconds_required) {
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
	Timer_Init(&configure);
     c08:	88 e6       	ldi	r24, 0x68	; 104
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Timer_Init>
	while (g_tick != ((NUMBER_OF_OVERFLOWS_PER_SECOND) * g_seconds_required))
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	82 95       	swap	r24
     c1c:	92 95       	swap	r25
     c1e:	90 7f       	andi	r25, 0xF0	; 240
     c20:	98 27       	eor	r25, r24
     c22:	80 7f       	andi	r24, 0xF0	; 240
     c24:	98 27       	eor	r25, r24
     c26:	9c 01       	movw	r18, r24
     c28:	80 91 77 00 	lds	r24, 0x0077
     c2c:	90 91 78 00 	lds	r25, 0x0078
     c30:	28 17       	cp	r18, r24
     c32:	39 07       	cpc	r19, r25
     c34:	69 f7       	brne	.-38     	; 0xc10 <timer+0x14>
		;
	Timer_DeInit(&configure);
     c36:	88 e6       	ldi	r24, 0x68	; 104
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Timer_DeInit>
	g_tick = 0;
     c3e:	10 92 78 00 	sts	0x0078, r1
     c42:	10 92 77 00 	sts	0x0077, r1

}
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <recieve_Pass>:
/*
 * Description :
 * Function that  receive the passwords from the MCU1
 */
void recieve_Pass(void) {
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62

	/*Receiving the first password from the MCU1*/
	for (i = 0; i < 5; i++) {
     c5a:	10 92 86 00 	sts	0x0086, r1
     c5e:	0f c0       	rjmp	.+30     	; 0xc7e <recieve_Pass+0x30>
		password_recieved[i] = UART_recieveByte();
     c60:	80 91 86 00 	lds	r24, 0x0086
     c64:	08 2f       	mov	r16, r24
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	0e 94 bc 10 	call	0x2178	; 0x2178 <UART_recieveByte>
     c6c:	f8 01       	movw	r30, r16
     c6e:	ef 57       	subi	r30, 0x7F	; 127
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	80 83       	st	Z, r24
 * Function that  receive the passwords from the MCU1
 */
void recieve_Pass(void) {

	/*Receiving the first password from the MCU1*/
	for (i = 0; i < 5; i++) {
     c74:	80 91 86 00 	lds	r24, 0x0086
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 86 00 	sts	0x0086, r24
     c7e:	80 91 86 00 	lds	r24, 0x0086
     c82:	85 30       	cpi	r24, 0x05	; 5
     c84:	68 f3       	brcs	.-38     	; 0xc60 <recieve_Pass+0x12>
		password_recieved[i] = UART_recieveByte();
	}
}
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <pass_with_eeprom>:

/*
 * Description :Function checks if the password is matching with the saved in eeprom or not
 */
void pass_with_eeprom() {
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62

	for (i = 0; i < 5; i++) {
     c98:	10 92 86 00 	sts	0x0086, r1
     c9c:	2b c0       	rjmp	.+86     	; 0xcf4 <pass_with_eeprom+0x64>
		/*read the password from eeprom*/
		EEPROM_readByte(ADDRESS + i, &password_saved[i]);
     c9e:	80 91 86 00 	lds	r24, 0x0086
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	ac 01       	movw	r20, r24
     caa:	80 91 86 00 	lds	r24, 0x0086
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	9c 01       	movw	r18, r24
     cb4:	29 57       	subi	r18, 0x79	; 121
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	ca 01       	movw	r24, r20
     cba:	b9 01       	movw	r22, r18
     cbc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <EEPROM_readByte>
		if (password_saved[i] != password_recieved[i]) {
     cc0:	80 91 86 00 	lds	r24, 0x0086
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	fc 01       	movw	r30, r24
     cca:	e9 57       	subi	r30, 0x79	; 121
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	20 81       	ld	r18, Z
     cd0:	80 91 86 00 	lds	r24, 0x0086
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	fc 01       	movw	r30, r24
     cda:	ef 57       	subi	r30, 0x7F	; 127
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	80 81       	ld	r24, Z
     ce0:	28 17       	cp	r18, r24
     ce2:	19 f0       	breq	.+6      	; 0xcea <pass_with_eeprom+0x5a>
			checkPass = 0;
     ce4:	10 92 80 00 	sts	0x0080, r1
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <pass_with_eeprom+0x6c>
/*
 * Description :Function checks if the password is matching with the saved in eeprom or not
 */
void pass_with_eeprom() {

	for (i = 0; i < 5; i++) {
     cea:	80 91 86 00 	lds	r24, 0x0086
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	80 93 86 00 	sts	0x0086, r24
     cf4:	80 91 86 00 	lds	r24, 0x0086
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	88 f2       	brcs	.-94     	; 0xc9e <pass_with_eeprom+0xe>
		if (password_saved[i] != password_recieved[i]) {
			checkPass = 0;
			break;
		}
	}
	if (i == 5) {
     cfc:	80 91 86 00 	lds	r24, 0x0086
     d00:	85 30       	cpi	r24, 0x05	; 5
     d02:	19 f4       	brne	.+6      	; 0xd0a <pass_with_eeprom+0x7a>
		checkPass = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 80 00 	sts	0x0080, r24
	}

}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <save_at_eeprom>:

/*
 * Description:
 * Function to save the password at EEPROM
 */
void save_at_eeprom() {
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	2e 97       	sbiw	r28, 0x0e	; 14
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61

	for (i = 0; i < 5; i++) {
     d24:	10 92 86 00 	sts	0x0086, r1
     d28:	89 c0       	rjmp	.+274    	; 0xe3c <save_at_eeprom+0x12c>
		EEPROM_writeByte((ADDRESS + i), password_recieved[i]);
     d2a:	80 91 86 00 	lds	r24, 0x0086
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	ac 01       	movw	r20, r24
     d36:	80 91 86 00 	lds	r24, 0x0086
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	fc 01       	movw	r30, r24
     d40:	ef 57       	subi	r30, 0x7F	; 127
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	20 81       	ld	r18, Z
     d46:	ca 01       	movw	r24, r20
     d48:	62 2f       	mov	r22, r18
     d4a:	0e 94 a1 07 	call	0xf42	; 0xf42 <EEPROM_writeByte>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e2       	ldi	r26, 0x20	; 32
     d54:	b1 e4       	ldi	r27, 0x41	; 65
     d56:	8b 87       	std	Y+11, r24	; 0x0b
     d58:	9c 87       	std	Y+12, r25	; 0x0c
     d5a:	ad 87       	std	Y+13, r26	; 0x0d
     d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a ef       	ldi	r20, 0xFA	; 250
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8f 83       	std	Y+7, r24	; 0x07
     d78:	98 87       	std	Y+8, r25	; 0x08
     d7a:	a9 87       	std	Y+9, r26	; 0x09
     d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <save_at_eeprom+0x90>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <save_at_eeprom+0x10e>
	else if (__tmp > 65535)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <save_at_eeprom+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <save_at_eeprom+0xf0>
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <save_at_eeprom+0xde>
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <save_at_eeprom+0xd2>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <save_at_eeprom+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <save_at_eeprom+0x11a>
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
 * Description:
 * Function to save the password at EEPROM
 */
void save_at_eeprom() {

	for (i = 0; i < 5; i++) {
     e32:	80 91 86 00 	lds	r24, 0x0086
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	80 93 86 00 	sts	0x0086, r24
     e3c:	80 91 86 00 	lds	r24, 0x0086
     e40:	85 30       	cpi	r24, 0x05	; 5
     e42:	08 f4       	brcc	.+2      	; 0xe46 <save_at_eeprom+0x136>
     e44:	72 cf       	rjmp	.-284    	; 0xd2a <save_at_eeprom+0x1a>
		EEPROM_writeByte((ADDRESS + i), password_recieved[i]);
		_delay_ms(10);
	}
}
     e46:	2e 96       	adiw	r28, 0x0e	; 14
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <recieve_Main_List>:
 * Description:
 * Function to receive from MCU1 the main list
 * *.open
 * -.change password
 */
void recieve_Main_List(void) {
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	symbol = UART_recieveByte();
     e60:	0e 94 bc 10 	call	0x2178	; 0x2178 <UART_recieveByte>
     e64:	80 93 79 00 	sts	0x0079, r24
	if (symbol == '*') {
     e68:	80 91 79 00 	lds	r24, 0x0079
     e6c:	8a 32       	cpi	r24, 0x2A	; 42
     e6e:	31 f4       	brne	.+12     	; 0xe7c <recieve_Main_List+0x24>
		g_step = 3;
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	80 93 76 00 	sts	0x0076, r24
		symbol=0;
     e76:	10 92 79 00 	sts	0x0079, r1
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <recieve_Main_List+0x36>
	} else if (symbol == '-') {
     e7c:	80 91 79 00 	lds	r24, 0x0079
     e80:	8d 32       	cpi	r24, 0x2D	; 45
     e82:	29 f4       	brne	.+10     	; 0xe8e <recieve_Main_List+0x36>
		g_step = 4;
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	80 93 76 00 	sts	0x0076, r24
		symbol=0;
     e8a:	10 92 79 00 	sts	0x0079, r1
	}
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <matched_State>:
/*
 * Description:
 * Function that turn on the dc motor
 */
void matched_State(void) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(Clock_Wise);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	timer(15);
     ea2:	8f e0       	ldi	r24, 0x0F	; 15
     ea4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <timer>
	DcMotor_Rotate(Stop);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	timer(3);
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <timer>
	DcMotor_Rotate(Anti_Clock_Wise);
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	timer(15);
     eba:	8f e0       	ldi	r24, 0x0F	; 15
     ebc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <timer>
	DcMotor_Rotate(Stop);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <wrong_Passwords>:

/*
 * Description :
 * Function that when we enter the password 3 times wrong turn on the buzzer for 60 seconds
 */
void wrong_Passwords(void) {
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the buzzer for 60 seconds */
	Buzzer_ON();
     ed4:	0e 94 89 07 	call	0xf12	; 0xf12 <Buzzer_ON>
	timer(60);
     ed8:	8c e3       	ldi	r24, 0x3C	; 60
     eda:	0e 94 fe 05 	call	0xbfc	; 0xbfc <timer>
	/*Stop the buzzer and timer  after 60 seconds  */
	Timer_DeInit(&configure);
     ede:	88 e6       	ldi	r24, 0x68	; 104
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Timer_DeInit>
	Buzzer_OFF();
     ee6:	0e 94 95 07 	call	0xf2a	; 0xf2a <Buzzer_OFF>
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <Buzzer_Init>:
/*
 * Description:
 * Function to initialize the buzzer driver
 */
void Buzzer_Init(void)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setup the buzzer pin as output pin using GPIO driver
	 * Stop the buzzer at the beginning using GPIO driver
	 */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	65 e0       	ldi	r22, 0x05	; 5
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	65 e0       	ldi	r22, 0x05	; 5
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Buzzer_ON>:
/*
 * Description:
 * Function to turn on the buzzer
 */
void Buzzer_ON(void)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	/*Write 1 on the buzzer pin to turn off it */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	65 e0       	ldi	r22, 0x05	; 5
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <Buzzer_OFF>:
/*
 * Description :
 * Function to turn off the buzzer
 */
void Buzzer_OFF(void)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	/*Write 0 on the buzzer pin to turn off it */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	65 e0       	ldi	r22, 0x05	; 5
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <EEPROM_writeByte+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <EEPROM_writeByte+0x8>
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	9a 83       	std	Y+2, r25	; 0x02
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f54:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f58:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	11 f0       	breq	.+4      	; 0xf64 <EEPROM_writeByte+0x22>
        return ERROR;
     f60:	1c 82       	std	Y+4, r1	; 0x04
     f62:	28 c0       	rjmp	.+80     	; 0xfb4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	80 70       	andi	r24, 0x00	; 0
     f6a:	97 70       	andi	r25, 0x07	; 7
     f6c:	88 0f       	add	r24, r24
     f6e:	89 2f       	mov	r24, r25
     f70:	88 1f       	adc	r24, r24
     f72:	99 0b       	sbc	r25, r25
     f74:	91 95       	neg	r25
     f76:	80 6a       	ori	r24, 0xA0	; 160
     f78:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f7c:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
     f80:	88 31       	cpi	r24, 0x18	; 24
     f82:	11 f0       	breq	.+4      	; 0xf88 <EEPROM_writeByte+0x46>
        return ERROR; 
     f84:	1c 82       	std	Y+4, r1	; 0x04
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f8e:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
     f92:	88 32       	cpi	r24, 0x28	; 40
     f94:	11 f0       	breq	.+4      	; 0xf9a <EEPROM_writeByte+0x58>
        return ERROR;
     f96:	1c 82       	std	Y+4, r1	; 0x04
     f98:	0d c0       	rjmp	.+26     	; 0xfb4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fa0:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
     fa4:	88 32       	cpi	r24, 0x28	; 40
     fa6:	11 f0       	breq	.+4      	; 0xfac <EEPROM_writeByte+0x6a>
        return ERROR;
     fa8:	1c 82       	std	Y+4, r1	; 0x04
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     fac:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <TWI_stop>
	
    return SUCCESS;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8c 83       	std	Y+4, r24	; 0x04
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <EEPROM_readByte+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <EEPROM_readByte+0x8>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	7c 83       	std	Y+4, r23	; 0x04
     fd8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     fda:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <TWI_start>
    if (TWI_getStatus() != TWI_START)
     fde:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	11 f0       	breq	.+4      	; 0xfea <EEPROM_readByte+0x26>
        return ERROR;
     fe6:	1d 82       	std	Y+5, r1	; 0x05
     fe8:	44 c0       	rjmp	.+136    	; 0x1072 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	80 70       	andi	r24, 0x00	; 0
     ff0:	97 70       	andi	r25, 0x07	; 7
     ff2:	88 0f       	add	r24, r24
     ff4:	89 2f       	mov	r24, r25
     ff6:	88 1f       	adc	r24, r24
     ff8:	99 0b       	sbc	r25, r25
     ffa:	91 95       	neg	r25
     ffc:	80 6a       	ori	r24, 0xA0	; 160
     ffe:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1002:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
    1006:	88 31       	cpi	r24, 0x18	; 24
    1008:	11 f0       	breq	.+4      	; 0x100e <EEPROM_readByte+0x4a>
        return ERROR;
    100a:	1d 82       	std	Y+5, r1	; 0x05
    100c:	32 c0       	rjmp	.+100    	; 0x1072 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1014:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
    1018:	88 32       	cpi	r24, 0x28	; 40
    101a:	11 f0       	breq	.+4      	; 0x1020 <EEPROM_readByte+0x5c>
        return ERROR;
    101c:	1d 82       	std	Y+5, r1	; 0x05
    101e:	29 c0       	rjmp	.+82     	; 0x1072 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1020:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1024:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
    1028:	80 31       	cpi	r24, 0x10	; 16
    102a:	11 f0       	breq	.+4      	; 0x1030 <EEPROM_readByte+0x6c>
        return ERROR;
    102c:	1d 82       	std	Y+5, r1	; 0x05
    102e:	21 c0       	rjmp	.+66     	; 0x1072 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	80 70       	andi	r24, 0x00	; 0
    1036:	97 70       	andi	r25, 0x07	; 7
    1038:	88 0f       	add	r24, r24
    103a:	89 2f       	mov	r24, r25
    103c:	88 1f       	adc	r24, r24
    103e:	99 0b       	sbc	r25, r25
    1040:	91 95       	neg	r25
    1042:	81 6a       	ori	r24, 0xA1	; 161
    1044:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1048:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
    104c:	80 34       	cpi	r24, 0x40	; 64
    104e:	11 f0       	breq	.+4      	; 0x1054 <EEPROM_readByte+0x90>
        return ERROR;
    1050:	1d 82       	std	Y+5, r1	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1054:	0e 94 1a 10 	call	0x2034	; 0x2034 <TWI_readByteWithNACK>
    1058:	eb 81       	ldd	r30, Y+3	; 0x03
    105a:	fc 81       	ldd	r31, Y+4	; 0x04
    105c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    105e:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_getStatus>
    1062:	88 35       	cpi	r24, 0x58	; 88
    1064:	11 f0       	breq	.+4      	; 0x106a <EEPROM_readByte+0xa6>
        return ERROR;
    1066:	1d 82       	std	Y+5, r1	; 0x05
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    106a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <TWI_stop>

    return SUCCESS;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	8d 83       	std	Y+5, r24	; 0x05
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <GPIO_setupPinDirection+0x6>
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_setupPinDirection+0x8>
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6a 83       	std	Y+2, r22	; 0x02
    1096:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <GPIO_setupPinDirection+0x1c>
    109e:	d5 c0       	rjmp	.+426    	; 0x124a <GPIO_setupPinDirection+0x1c6>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <GPIO_setupPinDirection+0x24>
    10a6:	d1 c0       	rjmp	.+418    	; 0x124a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <GPIO_setupPinDirection+0x3a>
    10bc:	43 c0       	rjmp	.+134    	; 0x1144 <GPIO_setupPinDirection+0xc0>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <GPIO_setupPinDirection+0x4e>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	71 f0       	breq	.+28     	; 0x10ec <GPIO_setupPinDirection+0x68>
    10d0:	bc c0       	rjmp	.+376    	; 0x124a <GPIO_setupPinDirection+0x1c6>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <GPIO_setupPinDirection+0x5a>
    10dc:	5f c0       	rjmp	.+190    	; 0x119c <GPIO_setupPinDirection+0x118>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <GPIO_setupPinDirection+0x66>
    10e8:	85 c0       	rjmp	.+266    	; 0x11f4 <GPIO_setupPinDirection+0x170>
    10ea:	af c0       	rjmp	.+350    	; 0x124a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	a1 f4       	brne	.+40     	; 0x111a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10f2:	aa e3       	ldi	r26, 0x3A	; 58
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ea e3       	ldi	r30, 0x3A	; 58
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_setupPinDirection+0x8c>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_setupPinDirection+0x88>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	98 c0       	rjmp	.+304    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    111a:	aa e3       	ldi	r26, 0x3A	; 58
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ea e3       	ldi	r30, 0x3A	; 58
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_setupPinDirection+0xb4>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_setupPinDirection+0xb0>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	83 c0       	rjmp	.+262    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	a1 f4       	brne	.+40     	; 0x1172 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    114a:	a7 e3       	ldi	r26, 0x37	; 55
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e7 e3       	ldi	r30, 0x37	; 55
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setupPinDirection+0xe4>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setupPinDirection+0xe0>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	6c c0       	rjmp	.+216    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1172:	a7 e3       	ldi	r26, 0x37	; 55
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e7 e3       	ldi	r30, 0x37	; 55
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_setupPinDirection+0x10c>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_setupPinDirection+0x108>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	57 c0       	rjmp	.+174    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	a1 f4       	brne	.+40     	; 0x11ca <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11a2:	a4 e3       	ldi	r26, 0x34	; 52
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_setupPinDirection+0x13c>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_setupPinDirection+0x138>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	40 c0       	rjmp	.+128    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11ca:	a4 e3       	ldi	r26, 0x34	; 52
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e4 e3       	ldi	r30, 0x34	; 52
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_setupPinDirection+0x164>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_setupPinDirection+0x160>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	2b c0       	rjmp	.+86     	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	a1 f4       	brne	.+40     	; 0x1222 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11fa:	a1 e3       	ldi	r26, 0x31	; 49
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_setupPinDirection+0x194>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_setupPinDirection+0x190>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	14 c0       	rjmp	.+40     	; 0x124a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1222:	a1 e3       	ldi	r26, 0x31	; 49
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_setupPinDirection+0x1bc>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_setupPinDirection+0x1b8>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <GPIO_writePin+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <GPIO_writePin+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	6a 83       	std	Y+2, r22	; 0x02
    126c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	08 f0       	brcs	.+2      	; 0x1276 <GPIO_writePin+0x1c>
    1274:	d5 c0       	rjmp	.+426    	; 0x1420 <GPIO_writePin+0x1c6>
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	08 f0       	brcs	.+2      	; 0x127e <GPIO_writePin+0x24>
    127c:	d1 c0       	rjmp	.+418    	; 0x1420 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3d 83       	std	Y+5, r19	; 0x05
    1286:	2c 83       	std	Y+4, r18	; 0x04
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <GPIO_writePin+0x3a>
    1292:	43 c0       	rjmp	.+134    	; 0x131a <GPIO_writePin+0xc0>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <GPIO_writePin+0x4e>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <GPIO_writePin+0x68>
    12a6:	bc c0       	rjmp	.+376    	; 0x1420 <GPIO_writePin+0x1c6>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <GPIO_writePin+0x5a>
    12b2:	5f c0       	rjmp	.+190    	; 0x1372 <GPIO_writePin+0x118>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <GPIO_writePin+0x66>
    12be:	85 c0       	rjmp	.+266    	; 0x13ca <GPIO_writePin+0x170>
    12c0:	af c0       	rjmp	.+350    	; 0x1420 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	a1 f4       	brne	.+40     	; 0x12f0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_writePin+0x8c>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_writePin+0x88>
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	98 c0       	rjmp	.+304    	; 0x1420 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12f0:	ab e3       	ldi	r26, 0x3B	; 59
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <GPIO_writePin+0xb4>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <GPIO_writePin+0xb0>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	83 c0       	rjmp	.+262    	; 0x1420 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	a1 f4       	brne	.+40     	; 0x1348 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1320:	a8 e3       	ldi	r26, 0x38	; 56
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_writePin+0xe4>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_writePin+0xe0>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	6c c0       	rjmp	.+216    	; 0x1420 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1348:	a8 e3       	ldi	r26, 0x38	; 56
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e8 e3       	ldi	r30, 0x38	; 56
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <GPIO_writePin+0x10c>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <GPIO_writePin+0x108>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	57 c0       	rjmp	.+174    	; 0x1420 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	a1 f4       	brne	.+40     	; 0x13a0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1378:	a5 e3       	ldi	r26, 0x35	; 53
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e3       	ldi	r30, 0x35	; 53
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_writePin+0x13c>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_writePin+0x138>
    139a:	84 2b       	or	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	40 c0       	rjmp	.+128    	; 0x1420 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13a0:	a5 e3       	ldi	r26, 0x35	; 53
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e3       	ldi	r30, 0x35	; 53
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <GPIO_writePin+0x164>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <GPIO_writePin+0x160>
    13c2:	80 95       	com	r24
    13c4:	84 23       	and	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	2b c0       	rjmp	.+86     	; 0x1420 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	a1 f4       	brne	.+40     	; 0x13f8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_writePin+0x194>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_writePin+0x190>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	14 c0       	rjmp	.+40     	; 0x1420 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13f8:	a2 e3       	ldi	r26, 0x32	; 50
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e3       	ldi	r30, 0x32	; 50
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <GPIO_writePin+0x1bc>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <GPIO_writePin+0x1b8>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <GPIO_readPin+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <GPIO_readPin+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1442:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	88 30       	cpi	r24, 0x08	; 8
    1448:	08 f0       	brcs	.+2      	; 0x144c <GPIO_readPin+0x1c>
    144a:	84 c0       	rjmp	.+264    	; 0x1554 <GPIO_readPin+0x124>
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	08 f0       	brcs	.+2      	; 0x1454 <GPIO_readPin+0x24>
    1452:	80 c0       	rjmp	.+256    	; 0x1554 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3d 83       	std	Y+5, r19	; 0x05
    145c:	2c 83       	std	Y+4, r18	; 0x04
    145e:	4c 81       	ldd	r20, Y+4	; 0x04
    1460:	5d 81       	ldd	r21, Y+5	; 0x05
    1462:	41 30       	cpi	r20, 0x01	; 1
    1464:	51 05       	cpc	r21, r1
    1466:	79 f1       	breq	.+94     	; 0x14c6 <GPIO_readPin+0x96>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	91 05       	cpc	r25, r1
    1470:	34 f4       	brge	.+12     	; 0x147e <GPIO_readPin+0x4e>
    1472:	2c 81       	ldd	r18, Y+4	; 0x04
    1474:	3d 81       	ldd	r19, Y+5	; 0x05
    1476:	21 15       	cp	r18, r1
    1478:	31 05       	cpc	r19, r1
    147a:	69 f0       	breq	.+26     	; 0x1496 <GPIO_readPin+0x66>
    147c:	6b c0       	rjmp	.+214    	; 0x1554 <GPIO_readPin+0x124>
    147e:	4c 81       	ldd	r20, Y+4	; 0x04
    1480:	5d 81       	ldd	r21, Y+5	; 0x05
    1482:	42 30       	cpi	r20, 0x02	; 2
    1484:	51 05       	cpc	r21, r1
    1486:	b9 f1       	breq	.+110    	; 0x14f6 <GPIO_readPin+0xc6>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	09 f4       	brne	.+2      	; 0x1494 <GPIO_readPin+0x64>
    1492:	49 c0       	rjmp	.+146    	; 0x1526 <GPIO_readPin+0xf6>
    1494:	5f c0       	rjmp	.+190    	; 0x1554 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1496:	e9 e3       	ldi	r30, 0x39	; 57
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_readPin+0x7e>
    14aa:	55 95       	asr	r21
    14ac:	47 95       	ror	r20
    14ae:	8a 95       	dec	r24
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_readPin+0x7a>
    14b2:	ca 01       	movw	r24, r20
    14b4:	81 70       	andi	r24, 0x01	; 1
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	88 23       	and	r24, r24
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	49 c0       	rjmp	.+146    	; 0x1554 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01
    14c4:	47 c0       	rjmp	.+142    	; 0x1554 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14c6:	e6 e3       	ldi	r30, 0x36	; 54
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a9 01       	movw	r20, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_readPin+0xae>
    14da:	55 95       	asr	r21
    14dc:	47 95       	ror	r20
    14de:	8a 95       	dec	r24
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_readPin+0xaa>
    14e2:	ca 01       	movw	r24, r20
    14e4:	81 70       	andi	r24, 0x01	; 1
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	88 23       	and	r24, r24
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	31 c0       	rjmp	.+98     	; 0x1554 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	2f c0       	rjmp	.+94     	; 0x1554 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14f6:	e3 e3       	ldi	r30, 0x33	; 51
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a9 01       	movw	r20, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_readPin+0xde>
    150a:	55 95       	asr	r21
    150c:	47 95       	ror	r20
    150e:	8a 95       	dec	r24
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_readPin+0xda>
    1512:	ca 01       	movw	r24, r20
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	90 70       	andi	r25, 0x00	; 0
    1518:	88 23       	and	r24, r24
    151a:	19 f0       	breq	.+6      	; 0x1522 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	19 c0       	rjmp	.+50     	; 0x1554 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1522:	19 82       	std	Y+1, r1	; 0x01
    1524:	17 c0       	rjmp	.+46     	; 0x1554 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1526:	e0 e3       	ldi	r30, 0x30	; 48
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_readPin+0x10e>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_readPin+0x10a>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	88 23       	and	r24, r24
    154a:	19 f0       	breq	.+6      	; 0x1552 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1552:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1554:	89 81       	ldd	r24, Y+1	; 0x01
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <GPIO_setupPortDirection+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <GPIO_setupPortDirection+0x8>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	90 f5       	brcc	.+100    	; 0x15e0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3c 83       	std	Y+4, r19	; 0x04
    1584:	2b 83       	std	Y+3, r18	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	d1 f0       	breq	.+52     	; 0x15c4 <GPIO_setupPortDirection+0x5e>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	2c f4       	brge	.+10     	; 0x15a4 <GPIO_setupPortDirection+0x3e>
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	61 f0       	breq	.+24     	; 0x15ba <GPIO_setupPortDirection+0x54>
    15a2:	1e c0       	rjmp	.+60     	; 0x15e0 <GPIO_setupPortDirection+0x7a>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <GPIO_setupPortDirection+0x68>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	81 f0       	breq	.+32     	; 0x15d8 <GPIO_setupPortDirection+0x72>
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15ba:	ea e3       	ldi	r30, 0x3A	; 58
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15c4:	e7 e3       	ldi	r30, 0x37	; 55
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15ce:	e4 e3       	ldi	r30, 0x34	; 52
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15d8:	e1 e3       	ldi	r30, 0x31	; 49
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <GPIO_writePort+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <GPIO_writePort+0x8>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	90 f5       	brcc	.+100    	; 0x1668 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3c 83       	std	Y+4, r19	; 0x04
    160c:	2b 83       	std	Y+3, r18	; 0x03
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	d1 f0       	breq	.+52     	; 0x164c <GPIO_writePort+0x5e>
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	2c f4       	brge	.+10     	; 0x162c <GPIO_writePort+0x3e>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	61 f0       	breq	.+24     	; 0x1642 <GPIO_writePort+0x54>
    162a:	1e c0       	rjmp	.+60     	; 0x1668 <GPIO_writePort+0x7a>
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <GPIO_writePort+0x68>
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	81 f0       	breq	.+32     	; 0x1660 <GPIO_writePort+0x72>
    1640:	13 c0       	rjmp	.+38     	; 0x1668 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1642:	eb e3       	ldi	r30, 0x3B	; 59
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24
    164a:	0e c0       	rjmp	.+28     	; 0x1668 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    164c:	e8 e3       	ldi	r30, 0x38	; 56
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	80 83       	st	Z, r24
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 83       	st	Z, r24
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 83       	st	Z, r24
			break;
		}
	}
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <GPIO_readPort+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <GPIO_readPort+0x8>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1684:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	90 f5       	brcc	.+100    	; 0x16f0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	3c 83       	std	Y+4, r19	; 0x04
    1694:	2b 83       	std	Y+3, r18	; 0x03
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	d1 f0       	breq	.+52     	; 0x16d4 <GPIO_readPort+0x5e>
    16a0:	2b 81       	ldd	r18, Y+3	; 0x03
    16a2:	3c 81       	ldd	r19, Y+4	; 0x04
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <GPIO_readPort+0x3e>
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	61 f0       	breq	.+24     	; 0x16ca <GPIO_readPort+0x54>
    16b2:	1e c0       	rjmp	.+60     	; 0x16f0 <GPIO_readPort+0x7a>
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	3c 81       	ldd	r19, Y+4	; 0x04
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	81 f0       	breq	.+32     	; 0x16de <GPIO_readPort+0x68>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	81 f0       	breq	.+32     	; 0x16e8 <GPIO_readPort+0x72>
    16c8:	13 c0       	rjmp	.+38     	; 0x16f0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16ca:	e9 e3       	ldi	r30, 0x39	; 57
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16d4:	e6 e3       	ldi	r30, 0x36	; 54
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	09 c0       	rjmp	.+18     	; 0x16f0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16de:	e3 e3       	ldi	r30, 0x33	; 51
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16e8:	e0 e3       	ldi	r30, 0x30	; 48
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <main>:
 *  Description: Main application that executes
 *    4  Author: Doha Eid
 **********************************************************************************************************/
#include"app2.h"

int main(void) {
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	60 97       	sbiw	r28, 0x10	; 16
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
	/*Initialize the buzzer*/
	Buzzer_Init();
    1714:	0e 94 78 07 	call	0xef0	; 0xef0 <Buzzer_Init>
	/*Initialize the DC_Motor*/
	DcMotor_Init();
    1718:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_Config uart_ptr = { 9600, bit_8, disable, bit_1 };
    171c:	9e 01       	movw	r18, r28
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	3d 87       	std	Y+13, r19	; 0x0d
    1724:	2c 87       	std	Y+12, r18	; 0x0c
    1726:	8e e6       	ldi	r24, 0x6E	; 110
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9f 87       	std	Y+15, r25	; 0x0f
    172c:	8e 87       	std	Y+14, r24	; 0x0e
    172e:	97 e0       	ldi	r25, 0x07	; 7
    1730:	98 8b       	std	Y+16, r25	; 0x10
    1732:	ee 85       	ldd	r30, Y+14	; 0x0e
    1734:	ff 85       	ldd	r31, Y+15	; 0x0f
    1736:	00 80       	ld	r0, Z
    1738:	2e 85       	ldd	r18, Y+14	; 0x0e
    173a:	3f 85       	ldd	r19, Y+15	; 0x0f
    173c:	2f 5f       	subi	r18, 0xFF	; 255
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	3f 87       	std	Y+15, r19	; 0x0f
    1742:	2e 87       	std	Y+14, r18	; 0x0e
    1744:	ec 85       	ldd	r30, Y+12	; 0x0c
    1746:	fd 85       	ldd	r31, Y+13	; 0x0d
    1748:	00 82       	st	Z, r0
    174a:	2c 85       	ldd	r18, Y+12	; 0x0c
    174c:	3d 85       	ldd	r19, Y+13	; 0x0d
    174e:	2f 5f       	subi	r18, 0xFF	; 255
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	3d 87       	std	Y+13, r19	; 0x0d
    1754:	2c 87       	std	Y+12, r18	; 0x0c
    1756:	38 89       	ldd	r19, Y+16	; 0x10
    1758:	31 50       	subi	r19, 0x01	; 1
    175a:	38 8b       	std	Y+16, r19	; 0x10
    175c:	88 89       	ldd	r24, Y+16	; 0x10
    175e:	88 23       	and	r24, r24
    1760:	41 f7       	brne	.-48     	; 0x1732 <main+0x32>
	UART_init(&uart_ptr);
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_init>
	/*Initialize the I2C driver */
	I2C_Configure I2C_config = { value_1, ADDRESS };
    176a:	18 86       	std	Y+8, r1	; 0x08
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 87       	std	Y+9, r24	; 0x09
	TWI_init(&I2C_config);
    1770:	ce 01       	movw	r24, r28
    1772:	08 96       	adiw	r24, 0x08	; 8
    1774:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TWI_init>
	/*Initialize the timer */
	Timer0_setCallBack(timer_count);
    1778:	8e ee       	ldi	r24, 0xEE	; 238
    177a:	95 e0       	ldi	r25, 0x05	; 5
    177c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Timer0_setCallBack>
	/*Enable global interrupt I-Bit*/
	SREG |= (1 << 7);
    1780:	af e5       	ldi	r26, 0x5F	; 95
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ef e5       	ldi	r30, 0x5F	; 95
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	8c 93       	st	X, r24
	/*Start the code from step = 0*/
	g_step = 0;
    178e:	10 92 76 00 	sts	0x0076, r1


	while (1) {

		switch (g_step) {
    1792:	80 91 76 00 	lds	r24, 0x0076
    1796:	e8 2f       	mov	r30, r24
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	fb 87       	std	Y+11, r31	; 0x0b
    179c:	ea 87       	std	Y+10, r30	; 0x0a
    179e:	2a 85       	ldd	r18, Y+10	; 0x0a
    17a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	69 f1       	breq	.+90     	; 0x1802 <main+0x102>
    17a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	54 f4       	brge	.+20     	; 0x17c6 <main+0xc6>
    17b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    17b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	c1 f0       	breq	.+48     	; 0x17ea <main+0xea>
    17ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    17bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    17be:	21 30       	cpi	r18, 0x01	; 1
    17c0:	31 05       	cpc	r19, r1
    17c2:	c9 f0       	breq	.+50     	; 0x17f6 <main+0xf6>
    17c4:	e6 cf       	rjmp	.-52     	; 0x1792 <main+0x92>
    17c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <main+0xd2>
    17d0:	4f c0       	rjmp	.+158    	; 0x1870 <main+0x170>
    17d2:	ea 85       	ldd	r30, Y+10	; 0x0a
    17d4:	fb 85       	ldd	r31, Y+11	; 0x0b
    17d6:	e4 30       	cpi	r30, 0x04	; 4
    17d8:	f1 05       	cpc	r31, r1
    17da:	b4 f0       	brlt	.+44     	; 0x1808 <main+0x108>
    17dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    17de:	3b 85       	ldd	r19, Y+11	; 0x0b
    17e0:	25 30       	cpi	r18, 0x05	; 5
    17e2:	31 05       	cpc	r19, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <main+0xe8>
    17e6:	78 c0       	rjmp	.+240    	; 0x18d8 <main+0x1d8>
    17e8:	d4 cf       	rjmp	.-88     	; 0x1792 <main+0x92>
		case 0:
			/*Receive the first try password
			 *And wait 1msec to receive the next password
			 */
			//	UART_sendByte(M2_READY);
			recieve_Pass();
    17ea:	0e 94 27 06 	call	0xc4e	; 0xc4e <recieve_Pass>
			g_step = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 76 00 	sts	0x0076, r24
    17f4:	ce cf       	rjmp	.-100    	; 0x1792 <main+0x92>
			/*
			 *At this case we save the new password at eeprom after check if the two passwords matching or not
			 */
		case 1:
			/*Its time to write the password at eeprom */
			save_at_eeprom();
    17f6:	0e 94 88 06 	call	0xd10	; 0xd10 <save_at_eeprom>
			g_step = 2;
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	80 93 76 00 	sts	0x0076, r24
    1800:	c8 cf       	rjmp	.-112    	; 0x1792 <main+0x92>
			 * *.open door
			 * -.change password
			 */

		case 2:
			recieve_Main_List();
    1802:	0e 94 2c 07 	call	0xe58	; 0xe58 <recieve_Main_List>
    1806:	c5 cf       	rjmp	.-118    	; 0x1792 <main+0x92>
			 * At this case there is 3 attempts to enter the pass correct
			 * If the pass not correct the buzzer will turn on
			 */
		case 3:
			/*Receive the pass from MCU1*/
			recieve_Pass();
    1808:	0e 94 27 06 	call	0xc4e	; 0xc4e <recieve_Pass>
			/*check if the receive pass matching with the saved one or not */
			pass_with_eeprom();
    180c:	0e 94 48 06 	call	0xc90	; 0xc90 <pass_with_eeprom>
			/*send the check of passwords */
			UART_sendByte(checkPass);
    1810:	80 91 80 00 	lds	r24, 0x0080
    1814:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
			/*check if the user try the 3 attempts or not */
			if (checkPass == 0) {
    1818:	80 91 80 00 	lds	r24, 0x0080
    181c:	88 23       	and	r24, r24
    181e:	d9 f4       	brne	.+54     	; 0x1856 <main+0x156>
				counter++;
    1820:	80 91 7b 00 	lds	r24, 0x007B
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	80 93 7b 00 	sts	0x007B, r24
				g_step=3;
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	80 93 76 00 	sts	0x0076, r24
				/*the user run out the range (3attempts) so turn on the buzzer  */
				if (counter == 3) {
    1830:	80 91 7b 00 	lds	r24, 0x007B
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	51 f4       	brne	.+20     	; 0x184c <main+0x14c>
					counter = 0;
    1838:	10 92 7b 00 	sts	0x007B, r1
					g_step = 5;
    183c:	85 e0       	ldi	r24, 0x05	; 5
    183e:	80 93 76 00 	sts	0x0076, r24
					/*send the step where the code are */
					UART_sendByte(g_step);
    1842:	80 91 76 00 	lds	r24, 0x0076
    1846:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
    184a:	a3 cf       	rjmp	.-186    	; 0x1792 <main+0x92>
					break;
				}
				UART_sendByte(g_step);
    184c:	80 91 76 00 	lds	r24, 0x0076
    1850:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
    1854:	9e cf       	rjmp	.-196    	; 0x1792 <main+0x92>
				break;
			} else if (checkPass == 1) {
    1856:	80 91 80 00 	lds	r24, 0x0080
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	09 f0       	breq	.+2      	; 0x1860 <main+0x160>
    185e:	99 cf       	rjmp	.-206    	; 0x1792 <main+0x92>
				/*
				 *If the pass is correct then make the counter=0
				 * And turn on the dc_motor to rotate clock wise 15 seconds counted by timer
				 * And wait this step to finish to go to the main list
				 */
				counter = 0;
    1860:	10 92 7b 00 	sts	0x007B, r1
				matched_State();
    1864:	0e 94 4a 07 	call	0xe94	; 0xe94 <matched_State>
				g_step=2;
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	80 93 76 00 	sts	0x0076, r24
    186e:	91 cf       	rjmp	.-222    	; 0x1792 <main+0x92>
			 * if the user do not enter the password correct in 3 attempts so it will stop and
			 * the buzzer will turn on 60 seconds counted by timer
			 */
		case 4:
				/*Receive the pass from MCU1*/
				recieve_Pass();
    1870:	0e 94 27 06 	call	0xc4e	; 0xc4e <recieve_Pass>
				/*check if the receive pass matching with the saved one or not */
				pass_with_eeprom();
    1874:	0e 94 48 06 	call	0xc90	; 0xc90 <pass_with_eeprom>
				/*send the check password */
				UART_sendByte(checkPass);
    1878:	80 91 80 00 	lds	r24, 0x0080
    187c:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
				/*check if the user try the 3 attempts or not */
				if (checkPass == 0) {
    1880:	80 91 80 00 	lds	r24, 0x0080
    1884:	88 23       	and	r24, r24
    1886:	d9 f4       	brne	.+54     	; 0x18be <main+0x1be>
					counter++;
    1888:	80 91 7b 00 	lds	r24, 0x007B
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	80 93 7b 00 	sts	0x007B, r24
					g_step=4;
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	80 93 76 00 	sts	0x0076, r24
					/*the user run out the range (3attempts) so turn the buzzer  */
					if (counter == 3) {
    1898:	80 91 7b 00 	lds	r24, 0x007B
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	51 f4       	brne	.+20     	; 0x18b4 <main+0x1b4>
						counter = 0;
    18a0:	10 92 7b 00 	sts	0x007B, r1
						g_step = 5;
    18a4:	85 e0       	ldi	r24, 0x05	; 5
    18a6:	80 93 76 00 	sts	0x0076, r24
						UART_sendByte(g_step);
    18aa:	80 91 76 00 	lds	r24, 0x0076
    18ae:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
    18b2:	6f cf       	rjmp	.-290    	; 0x1792 <main+0x92>
						break;
					}
					/*send the step where the code are */
					UART_sendByte(g_step);
    18b4:	80 91 76 00 	lds	r24, 0x0076
    18b8:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
    18bc:	0a c0       	rjmp	.+20     	; 0x18d2 <main+0x1d2>
				} else if (checkPass == 1) {
    18be:	80 91 80 00 	lds	r24, 0x0080
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	31 f4       	brne	.+12     	; 0x18d2 <main+0x1d2>
					 *If the pass is correct then make the counter=0
					 * and then receive the new password from MCU1
					 * and save the new password at eeprom
					 * then return to the main list
					 */
					counter = 0;
    18c6:	10 92 7b 00 	sts	0x007B, r1
					recieve_Pass();
    18ca:	0e 94 27 06 	call	0xc4e	; 0xc4e <recieve_Pass>
					save_at_eeprom();
    18ce:	0e 94 88 06 	call	0xd10	; 0xd10 <save_at_eeprom>

				}
			recieve_Main_List();
    18d2:	0e 94 2c 07 	call	0xe58	; 0xe58 <recieve_Main_List>
    18d6:	5d cf       	rjmp	.-326    	; 0x1792 <main+0x92>
			/*
			 * The code will run this case in case the user entered wrong password for 3 times
			 * Turn on the buzzer for 60 seconds counted by timer
			 */
		case 5:
			wrong_Passwords();
    18d8:	0e 94 66 07 	call	0xecc	; 0xecc <wrong_Passwords>
			g_step=2;
    18dc:	82 e0       	ldi	r24, 0x02	; 2
    18de:	80 93 76 00 	sts	0x0076, r24
    18e2:	57 cf       	rjmp	.-338    	; 0x1792 <main+0x92>

000018e4 <__vector_9>:

/************************************************************************************************************
 *                                     Interrupt Service Routines                                          *
 ************************************************************************************************************/
ISR(TIMER0_OVF_vect)
{
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    190e:	80 91 7c 00 	lds	r24, 0x007C
    1912:	90 91 7d 00 	lds	r25, 0x007D
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	29 f0       	breq	.+10     	; 0x1924 <__vector_9+0x40>
	{
		/* Call the Call Back function in the app4lication after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    191a:	e0 91 7c 00 	lds	r30, 0x007C
    191e:	f0 91 7d 00 	lds	r31, 0x007D
    1922:	09 95       	icall
	}
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1974:	80 91 7c 00 	lds	r24, 0x007C
    1978:	90 91 7d 00 	lds	r25, 0x007D
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1980:	e0 91 7c 00 	lds	r30, 0x007C
    1984:	f0 91 7d 00 	lds	r31, 0x007D
    1988:	09 95       	icall
	}
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    19da:	80 91 7c 00 	lds	r24, 0x007C
    19de:	90 91 7d 00 	lds	r25, 0x007D
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__vector_8+0x40>
	{
		/* Call the Call Back function in the app4lication after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19e6:	e0 91 7c 00 	lds	r30, 0x007C
    19ea:	f0 91 7d 00 	lds	r31, 0x007D
    19ee:	09 95       	icall
	}
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1a40:	80 91 7c 00 	lds	r24, 0x007C
    1a44:	90 91 7d 00 	lds	r25, 0x007D
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	29 f0       	breq	.+10     	; 0x1a56 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a4c:	e0 91 7c 00 	lds	r30, 0x007C
    1a50:	f0 91 7d 00 	lds	r31, 0x007D
    1a54:	09 95       	icall
	}
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	bf 91       	pop	r27
    1a60:	af 91       	pop	r26
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	7f 91       	pop	r23
    1a68:	6f 91       	pop	r22
    1a6a:	5f 91       	pop	r21
    1a6c:	4f 91       	pop	r20
    1a6e:	3f 91       	pop	r19
    1a70:	2f 91       	pop	r18
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	2f 93       	push	r18
    1a88:	3f 93       	push	r19
    1a8a:	4f 93       	push	r20
    1a8c:	5f 93       	push	r21
    1a8e:	6f 93       	push	r22
    1a90:	7f 93       	push	r23
    1a92:	8f 93       	push	r24
    1a94:	9f 93       	push	r25
    1a96:	af 93       	push	r26
    1a98:	bf 93       	push	r27
    1a9a:	ef 93       	push	r30
    1a9c:	ff 93       	push	r31
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1aa6:	80 91 7e 00 	lds	r24, 0x007E
    1aaa:	90 91 7f 00 	lds	r25, 0x007F
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	29 f0       	breq	.+10     	; 0x1abc <__vector_4+0x40>
	{
		/* Call the Call Back function in the app4lication after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ab2:	e0 91 7e 00 	lds	r30, 0x007E
    1ab6:	f0 91 7f 00 	lds	r31, 0x007F
    1aba:	09 95       	icall
	}
}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	0f 92       	push	r0
    1aea:	11 24       	eor	r1, r1
    1aec:	2f 93       	push	r18
    1aee:	3f 93       	push	r19
    1af0:	4f 93       	push	r20
    1af2:	5f 93       	push	r21
    1af4:	6f 93       	push	r22
    1af6:	7f 93       	push	r23
    1af8:	8f 93       	push	r24
    1afa:	9f 93       	push	r25
    1afc:	af 93       	push	r26
    1afe:	bf 93       	push	r27
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1b0c:	80 91 7e 00 	lds	r24, 0x007E
    1b10:	90 91 7f 00 	lds	r25, 0x007F
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b18:	e0 91 7e 00 	lds	r30, 0x007E
    1b1c:	f0 91 7f 00 	lds	r31, 0x007F
    1b20:	09 95       	icall
	}
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <Timer0_setCallBack>:
 ************************************************************************************************************/
/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <Timer0_setCallBack+0x6>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 =a_ptr;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	90 93 7d 00 	sts	0x007D, r25
    1b5e:	80 93 7c 00 	sts	0x007C, r24
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <Timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*b_ptr)(void))
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <Timer1_setCallBack+0x6>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 =b_ptr;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	90 93 7f 00 	sts	0x007F, r25
    1b82:	80 93 7e 00 	sts	0x007E, r24
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <Timer2_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer2_setCallBack(void(*c_ptr)(void))
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <Timer2_setCallBack+0x6>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 =c_ptr;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	90 93 7f 00 	sts	0x007F, r25
    1ba6:	80 93 7e 00 	sts	0x007E, r24
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <Timer_Init>:
 * Function to Enable Timer0 registers to initialize timer0 driver
 * Choose between overflow mode and compare mode
 * setup the clock select
 */
void Timer_Init(const Timer_ConfigType *config_ptr)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <Timer_Init+0x6>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <Timer_Init+0x8>
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01

switch ((config_ptr->Timer_ID))
    1bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc8:	80 81       	ld	r24, Z
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	3c 83       	std	Y+4, r19	; 0x04
    1bd0:	2b 83       	std	Y+3, r18	; 0x03
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	91 05       	cpc	r25, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <Timer_Init+0x2a>
    1bdc:	73 c0       	rjmp	.+230    	; 0x1cc4 <Timer_Init+0x110>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <Timer_Init+0x36>
    1be8:	e8 c0       	rjmp	.+464    	; 0x1dba <Timer_Init+0x206>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <Timer_Init+0x40>
    1bf2:	4a c1       	rjmp	.+660    	; 0x1e88 <Timer_Init+0x2d4>
{
case Timer0:
if((config_ptr->Mode)==Normal)
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	81 81       	ldd	r24, Z+1	; 0x01
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f5       	brne	.+66     	; 0x1c40 <Timer_Init+0x8c>
	{
	 /*Initialize the Timer */
		TCNT0=config_ptr->TCNT;
    1bfe:	a2 e5       	ldi	r26, 0x52	; 82
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	84 81       	ldd	r24, Z+4	; 0x04
    1c08:	8c 93       	st	X, r24
	/*
	 * Non-PWM mode FOC0=15
	 * Enable Timer0 Overflow Interrupt
	 */
	SET_BIT(TCCR0,FOC0);
    1c0a:	a3 e5       	ldi	r26, 0x53	; 83
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e3 e5       	ldi	r30, 0x53	; 83
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    1c18:	a9 e5       	ldi	r26, 0x59	; 89
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e9 e5       	ldi	r30, 0x59	; 89
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	81 60       	ori	r24, 0x01	; 1
    1c24:	8c 93       	st	X, r24
	/*Configure clock select */
	TCCR0=(TCCR0&0XF8)|(config_ptr->Clock_select);
    1c26:	a3 e5       	ldi	r26, 0x53	; 83
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	98 2f       	mov	r25, r24
    1c32:	98 7f       	andi	r25, 0xF8	; 248
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	89 2b       	or	r24, r25
    1c3c:	8c 93       	st	X, r24
    1c3e:	24 c1       	rjmp	.+584    	; 0x1e88 <Timer_Init+0x2d4>

	}
     else if ((config_ptr->Mode)==CTC)
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	81 81       	ldd	r24, Z+1	; 0x01
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	71 f5       	brne	.+92     	; 0x1ca6 <Timer_Init+0xf2>
       {
    	 /*Initialize the Timer */
    	  TCNT0=config_ptr->TCNT;
    1c4a:	a2 e5       	ldi	r26, 0x52	; 82
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	84 81       	ldd	r24, Z+4	; 0x04
    1c54:	8c 93       	st	X, r24
	/*
	 * Non-PWM mode FOC0=1
	 * Enable Timer0 Compare Interrupt
	 * CTC Mode WGM01=1 & WGM00=0
	 */
	SET_BIT(TCCR0,FOC0);
    1c56:	a3 e5       	ldi	r26, 0x53	; 83
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e3 e5       	ldi	r30, 0x53	; 83
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	8c 93       	st	X, r24
	SET_BIT(TIMSK,OCIE0);
    1c64:	a9 e5       	ldi	r26, 0x59	; 89
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e9 e5       	ldi	r30, 0x59	; 89
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 60       	ori	r24, 0x02	; 2
    1c70:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    1c72:	a3 e5       	ldi	r26, 0x53	; 83
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e3 e5       	ldi	r30, 0x53	; 83
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	8c 93       	st	X, r24
	/*Configure clock select */
	TCCR0=(TCCR0 & 0XF8)|(config_ptr->Clock_select);
    1c80:	a3 e5       	ldi	r26, 0x53	; 83
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e3 e5       	ldi	r30, 0x53	; 83
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	98 7f       	andi	r25, 0xF8	; 248
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	89 2b       	or	r24, r25
    1c96:	8c 93       	st	X, r24
    /*Setup the Output compare register OCR */
	OCR0=config_ptr->OCR;
    1c98:	ac e5       	ldi	r26, 0x5C	; 92
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	85 81       	ldd	r24, Z+5	; 0x05
    1ca2:	8c 93       	st	X, r24
    1ca4:	f1 c0       	rjmp	.+482    	; 0x1e88 <Timer_Init+0x2d4>
    }
     else
    {
	/* Disable Timer0 Overflow Interrupt*/
	CLEAR_BIT(TIMSK,TOIE0);
    1ca6:	a9 e5       	ldi	r26, 0x59	; 89
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 e5       	ldi	r30, 0x59	; 89
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8e 7f       	andi	r24, 0xFE	; 254
    1cb2:	8c 93       	st	X, r24
	/*Disable Timer0 Compare Interrupt*/
	CLEAR_BIT(TIMSK,OCIE0);
    1cb4:	a9 e5       	ldi	r26, 0x59	; 89
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 e5       	ldi	r30, 0x59	; 89
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8d 7f       	andi	r24, 0xFD	; 253
    1cc0:	8c 93       	st	X, r24
    1cc2:	e2 c0       	rjmp	.+452    	; 0x1e88 <Timer_Init+0x2d4>
       }
   break;
      case Timer1:
   if ((config_ptr->Mode)==Normal)
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	81 81       	ldd	r24, Z+1	; 0x01
    1cca:	88 23       	and	r24, r24
    1ccc:	61 f5       	brne	.+88     	; 0x1d26 <Timer_Init+0x172>
{
	   /*Initialize the timer1*/
	    		TCNT1=config_ptr->TCNT;
    1cce:	ac e4       	ldi	r26, 0x4C	; 76
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	84 81       	ldd	r24, Z+4	; 0x04
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	11 96       	adiw	r26, 0x01	; 1
    1cde:	9c 93       	st	X, r25
    1ce0:	8e 93       	st	-X, r24
	    		/*Non PWM mode */
	    		SET_BIT(TCCR1A,FOC1A);
    1ce2:	af e4       	ldi	r26, 0x4F	; 79
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	ef e4       	ldi	r30, 0x4F	; 79
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	88 60       	ori	r24, 0x08	; 8
    1cee:	8c 93       	st	X, r24
	    		SET_BIT(TCCR1A,FOC1B);
    1cf0:	af e4       	ldi	r26, 0x4F	; 79
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	ef e4       	ldi	r30, 0x4F	; 79
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	84 60       	ori	r24, 0x04	; 4
    1cfc:	8c 93       	st	X, r24
	    		/*Enable overflow interrupt*/
	    		SET_BIT(TIMSK,TOIE1);
    1cfe:	a9 e5       	ldi	r26, 0x59	; 89
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e9 e5       	ldi	r30, 0x59	; 89
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	84 60       	ori	r24, 0x04	; 4
    1d0a:	8c 93       	st	X, r24
	    		/*Select the clock*/
	    		TCCR1B=(TCCR1B & 0xF8)|(config_ptr->Clock_select);
    1d0c:	ae e4       	ldi	r26, 0x4E	; 78
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	ee e4       	ldi	r30, 0x4E	; 78
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	98 2f       	mov	r25, r24
    1d18:	98 7f       	andi	r25, 0xF8	; 248
    1d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	89 2b       	or	r24, r25
    1d22:	8c 93       	st	X, r24
    1d24:	b1 c0       	rjmp	.+354    	; 0x1e88 <Timer_Init+0x2d4>


}
   else if ((config_ptr->Mode)==CTC)
    1d26:	e9 81       	ldd	r30, Y+1	; 0x01
    1d28:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2a:	81 81       	ldd	r24, Z+1	; 0x01
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	b1 f5       	brne	.+108    	; 0x1d9c <Timer_Init+0x1e8>
{
 	  /*Initialize the timer1*/
 		TCNT1=config_ptr->TCNT;
    1d30:	ac e4       	ldi	r26, 0x4C	; 76
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e9 81       	ldd	r30, Y+1	; 0x01
    1d36:	fa 81       	ldd	r31, Y+2	; 0x02
    1d38:	84 81       	ldd	r24, Z+4	; 0x04
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	11 96       	adiw	r26, 0x01	; 1
    1d40:	9c 93       	st	X, r25
    1d42:	8e 93       	st	-X, r24
	/*Set the compare value */
 		OCR1A=config_ptr->OCR;
    1d44:	aa e4       	ldi	r26, 0x4A	; 74
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4c:	85 81       	ldd	r24, Z+5	; 0x05
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	11 96       	adiw	r26, 0x01	; 1
    1d54:	9c 93       	st	X, r25
    1d56:	8e 93       	st	-X, r24
 		/* Enable Timer1 Compare A Interrupt */
 		SET_BIT(TIMSK,OCIE1A);
    1d58:	a9 e5       	ldi	r26, 0x59	; 89
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e9 e5       	ldi	r30, 0x59	; 89
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	80 61       	ori	r24, 0x10	; 16
    1d64:	8c 93       	st	X, r24
 		/* Configure timer control register TCCR1A
 			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
 			 * 2. FOC1A=1 FOC1B=0
 			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
 			 */
 		SET_BIT(TCCR1A,FOC1A);
    1d66:	af e4       	ldi	r26, 0x4F	; 79
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ef e4       	ldi	r30, 0x4F	; 79
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 60       	ori	r24, 0x08	; 8
    1d72:	8c 93       	st	X, r24
 		/* Configure timer control register TCCR1B
 			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
 			 */
 		SET_BIT(TCCR1B,WGM12);
    1d74:	ae e4       	ldi	r26, 0x4E	; 78
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ee e4       	ldi	r30, 0x4E	; 78
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 60       	ori	r24, 0x08	; 8
    1d80:	8c 93       	st	X, r24
 		/*configure the prescaler  */
 		TCCR1B=(TCCR1B & 0xF8)|(config_ptr->Clock_select);
    1d82:	ae e4       	ldi	r26, 0x4E	; 78
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ee e4       	ldi	r30, 0x4E	; 78
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	98 7f       	andi	r25, 0xF8	; 248
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	89 2b       	or	r24, r25
    1d98:	8c 93       	st	X, r24
    1d9a:	76 c0       	rjmp	.+236    	; 0x1e88 <Timer_Init+0x2d4>
}
   else
   {
	   /* Disable Timer1 Overflow Interrupt*/
	   	CLEAR_BIT(TIMSK,TOIE1);
    1d9c:	a9 e5       	ldi	r26, 0x59	; 89
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e9 e5       	ldi	r30, 0x59	; 89
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8b 7f       	andi	r24, 0xFB	; 251
    1da8:	8c 93       	st	X, r24
	   	/*Disable Timer1 Compare Interrupt*/
	   	CLEAR_BIT(TIMSK,OCIE1A);
    1daa:	a9 e5       	ldi	r26, 0x59	; 89
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e9 e5       	ldi	r30, 0x59	; 89
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 7e       	andi	r24, 0xEF	; 239
    1db6:	8c 93       	st	X, r24
    1db8:	67 c0       	rjmp	.+206    	; 0x1e88 <Timer_Init+0x2d4>
   }

	break;
      case Timer2:
      if ((config_ptr->Mode)==Normal)
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	81 81       	ldd	r24, Z+1	; 0x01
    1dc0:	88 23       	and	r24, r24
    1dc2:	09 f5       	brne	.+66     	; 0x1e06 <Timer_Init+0x252>
     {
    	  /*Initialize the timer2*/
    		TCNT2=config_ptr->TCNT;
    1dc4:	a4 e4       	ldi	r26, 0x44	; 68
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	84 81       	ldd	r24, Z+4	; 0x04
    1dce:	8c 93       	st	X, r24
      	/*
      	 * Non-PWM mode FOC2=1
      	 * Enable Timer0 Overflow Interrupt
      	 */
      	SET_BIT(TCCR2,FOC2);
    1dd0:	a5 e4       	ldi	r26, 0x45	; 69
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e4       	ldi	r30, 0x45	; 69
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	8c 93       	st	X, r24
      	SET_BIT(TIMSK,TOIE2);
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 64       	ori	r24, 0x40	; 64
    1dea:	8c 93       	st	X, r24
      	/*Configure clock select */
      	TCCR2=(TCCR2 & 0XF8)|(config_ptr->Clock2_select);
    1dec:	a5 e4       	ldi	r26, 0x45	; 69
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e4       	ldi	r30, 0x45	; 69
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	98 2f       	mov	r25, r24
    1df8:	98 7f       	andi	r25, 0xF8	; 248
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	83 81       	ldd	r24, Z+3	; 0x03
    1e00:	89 2b       	or	r24, r25
    1e02:	8c 93       	st	X, r24
    1e04:	41 c0       	rjmp	.+130    	; 0x1e88 <Timer_Init+0x2d4>
     }
      else if ((config_ptr->Mode)==CTC)
    1e06:	e9 81       	ldd	r30, Y+1	; 0x01
    1e08:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
    1e0c:	82 30       	cpi	r24, 0x02	; 2
    1e0e:	71 f5       	brne	.+92     	; 0x1e6c <Timer_Init+0x2b8>
      {
    	  /*Initialize the timer2*/
    	     TCNT2=config_ptr->TCNT;
    1e10:	a4 e4       	ldi	r26, 0x44	; 68
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	84 81       	ldd	r24, Z+4	; 0x04
    1e1a:	8c 93       	st	X, r24
      	/*
      	 * Non-PWM mode FOC2=1
      	 * Enable Timer2 Compare Interrupt
      	 * CTC Mode WGM21=1 & WGM20=0
      	 */
      	SET_BIT(TCCR2,FOC2);
    1e1c:	a5 e4       	ldi	r26, 0x45	; 69
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e4       	ldi	r30, 0x45	; 69
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 68       	ori	r24, 0x80	; 128
    1e28:	8c 93       	st	X, r24
      	SET_BIT(TIMSK,OCIE2);
    1e2a:	a9 e5       	ldi	r26, 0x59	; 89
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e9 e5       	ldi	r30, 0x59	; 89
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 68       	ori	r24, 0x80	; 128
    1e36:	8c 93       	st	X, r24
      	SET_BIT(TCCR2,WGM21);
    1e38:	a5 e4       	ldi	r26, 0x45	; 69
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e5 e4       	ldi	r30, 0x45	; 69
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	88 60       	ori	r24, 0x08	; 8
    1e44:	8c 93       	st	X, r24
      	/*Configure clock select */
      	TCCR2=(TCCR2&0XF8)|(config_ptr->Clock2_select);
    1e46:	a5 e4       	ldi	r26, 0x45	; 69
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e4       	ldi	r30, 0x45	; 69
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	98 2f       	mov	r25, r24
    1e52:	98 7f       	andi	r25, 0xF8	; 248
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	83 81       	ldd	r24, Z+3	; 0x03
    1e5a:	89 2b       	or	r24, r25
    1e5c:	8c 93       	st	X, r24
          /*Setup the Output compare register OCR */
      	OCR2=config_ptr->OCR;
    1e5e:	a3 e4       	ldi	r26, 0x43	; 67
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e9 81       	ldd	r30, Y+1	; 0x01
    1e64:	fa 81       	ldd	r31, Y+2	; 0x02
    1e66:	85 81       	ldd	r24, Z+5	; 0x05
    1e68:	8c 93       	st	X, r24
    1e6a:	0e c0       	rjmp	.+28     	; 0x1e88 <Timer_Init+0x2d4>
      }
      else
      {
      	/* Disable Timer2 Overflow Interrupt*/
      	 CLEAR_BIT(TIMSK,TOIE2);
    1e6c:	a9 e5       	ldi	r26, 0x59	; 89
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e9 e5       	ldi	r30, 0x59	; 89
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8f 7b       	andi	r24, 0xBF	; 191
    1e78:	8c 93       	st	X, r24
      	/*Disable Timer2 Compare Interrupt*/
      	 CLEAR_BIT(TIMSK,OCIE2);
    1e7a:	a9 e5       	ldi	r26, 0x59	; 89
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e9 e5       	ldi	r30, 0x59	; 89
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 77       	andi	r24, 0x7F	; 127
    1e86:	8c 93       	st	X, r24
      }
	}
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <Timer_DeInit>:
/*
 * Description:
 * Function to Disable Timer0
 */
void Timer_DeInit(const Timer_ConfigType *config_ptr)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <Timer_DeInit+0x6>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <Timer_DeInit+0x8>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	/*configure the number of timers*/
		switch((config_ptr->Timer_ID))
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	80 81       	ld	r24, Z
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	3c 83       	std	Y+4, r19	; 0x04
    1eb2:	2b 83       	std	Y+3, r18	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	91 05       	cpc	r25, r1
    1ebc:	f9 f0       	breq	.+62     	; 0x1efc <Timer_DeInit+0x66>
    1ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	81 f1       	breq	.+96     	; 0x1f28 <Timer_DeInit+0x92>
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <Timer_DeInit+0x3c>
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <Timer_DeInit+0xba>
		{
		case Timer0:

	/*Clear all timer register*/
	TCCR0=0;
    1ed2:	e3 e5       	ldi	r30, 0x53	; 83
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	10 82       	st	Z, r1
	TCNT0=0;
    1ed8:	e2 e5       	ldi	r30, 0x52	; 82
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	10 82       	st	Z, r1
	/*Disable the interrupt MISK register*/
	CLEAR_BIT(TIMSK,TOIE0);
    1ede:	a9 e5       	ldi	r26, 0x59	; 89
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e9 e5       	ldi	r30, 0x59	; 89
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8e 7f       	andi	r24, 0xFE	; 254
    1eea:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE0);
    1eec:	a9 e5       	ldi	r26, 0x59	; 89
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e9 e5       	ldi	r30, 0x59	; 89
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8d 7f       	andi	r24, 0xFD	; 253
    1ef8:	8c 93       	st	X, r24
    1efa:	2a c0       	rjmp	.+84     	; 0x1f50 <Timer_DeInit+0xba>
		break;
       case Timer1 :
	/*Clear all timer register*/
			TCCR1A=0;
    1efc:	ef e4       	ldi	r30, 0x4F	; 79
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	10 82       	st	Z, r1
			TCNT1=0;
    1f02:	ec e4       	ldi	r30, 0x4C	; 76
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	11 82       	std	Z+1, r1	; 0x01
    1f08:	10 82       	st	Z, r1
			/*Disable the interrupt MISK register*/
			CLEAR_BIT(TIMSK,TOIE1);
    1f0a:	a9 e5       	ldi	r26, 0x59	; 89
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e9 e5       	ldi	r30, 0x59	; 89
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8b 7f       	andi	r24, 0xFB	; 251
    1f16:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK,OCIE1A);
    1f18:	a9 e5       	ldi	r26, 0x59	; 89
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e9 e5       	ldi	r30, 0x59	; 89
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8f 7e       	andi	r24, 0xEF	; 239
    1f24:	8c 93       	st	X, r24
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <Timer_DeInit+0xba>
			break;
        case Timer2 :
		/*Clear all timer register*/
		TCCR2=0;
    1f28:	e5 e4       	ldi	r30, 0x45	; 69
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	10 82       	st	Z, r1
		TCNT2=0;
    1f2e:	e4 e4       	ldi	r30, 0x44	; 68
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	10 82       	st	Z, r1
		/*Disable the interrupt MISK register*/
		CLEAR_BIT(TIMSK,TOIE2);
    1f34:	a9 e5       	ldi	r26, 0x59	; 89
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e9 e5       	ldi	r30, 0x59	; 89
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 7b       	andi	r24, 0xBF	; 191
    1f40:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    1f42:	a9 e5       	ldi	r26, 0x59	; 89
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e9 e5       	ldi	r30, 0x59	; 89
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 77       	andi	r24, 0x7F	; 127
    1f4e:	8c 93       	st	X, r24
		break;

}
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_Configure *config_ptr)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <TWI_init+0x6>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1f6c:	e0 e2       	ldi	r30, 0x20	; 32
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	80 83       	st	Z, r24
	TWSR = (TWSR & 0XF8)|(config_ptr->prescaler);
    1f74:	a1 e2       	ldi	r26, 0x21	; 33
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e1 e2       	ldi	r30, 0x21	; 33
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	98 2f       	mov	r25, r24
    1f80:	98 7f       	andi	r25, 0xF8	; 248
    1f82:	e9 81       	ldd	r30, Y+1	; 0x01
    1f84:	fa 81       	ldd	r31, Y+2	; 0x02
    1f86:	80 81       	ld	r24, Z
    1f88:	89 2b       	or	r24, r25
    1f8a:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (config_ptr->Address);// my address = 0x01 :)
    1f8c:	a2 e2       	ldi	r26, 0x22	; 34
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e9 81       	ldd	r30, Y+1	; 0x01
    1f92:	fa 81       	ldd	r31, Y+2	; 0x02
    1f94:	81 81       	ldd	r24, Z+1	; 0x01
    1f96:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	84 e0       	ldi	r24, 0x04	; 4
    1f9e:	80 83       	st	Z, r24
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <TWI_start>:

void TWI_start(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1fb2:	e6 e5       	ldi	r30, 0x56	; 86
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	84 ea       	ldi	r24, 0xA4	; 164
    1fb8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fba:	e6 e5       	ldi	r30, 0x56	; 86
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	dc f7       	brge	.-10     	; 0x1fba <TWI_start+0x10>
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <TWI_stop>:

void TWI_stop(void)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1fd2:	e6 e5       	ldi	r30, 0x56	; 86
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	84 e9       	ldi	r24, 0x94	; 148
    1fd8:	80 83       	st	Z, r24
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	0f 92       	push	r0
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1fec:	e3 e2       	ldi	r30, 0x23	; 35
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ff4:	e6 e5       	ldi	r30, 0x56	; 86
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	84 e8       	ldi	r24, 0x84	; 132
    1ffa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ffc:	e6 e5       	ldi	r30, 0x56	; 86
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	88 23       	and	r24, r24
    2004:	dc f7       	brge	.-10     	; 0x1ffc <TWI_writeByte+0x1c>
}
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2016:	e6 e5       	ldi	r30, 0x56	; 86
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	84 ec       	ldi	r24, 0xC4	; 196
    201c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    201e:	e6 e5       	ldi	r30, 0x56	; 86
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	88 23       	and	r24, r24
    2026:	dc f7       	brge	.-10     	; 0x201e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2028:	e3 e2       	ldi	r30, 0x23	; 35
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    203c:	e6 e5       	ldi	r30, 0x56	; 86
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	84 e8       	ldi	r24, 0x84	; 132
    2042:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2044:	e6 e5       	ldi	r30, 0x56	; 86
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 23       	and	r24, r24
    204c:	dc f7       	brge	.-10     	; 0x2044 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    204e:	e3 e2       	ldi	r30, 0x23	; 35
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2064:	e1 e2       	ldi	r30, 0x21	; 33
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 7f       	andi	r24, 0xF8	; 248
    206c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    206e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <UART_init>:
 * set up the frame format like the parity bit type , number of data bits and number of stop bits
 * Enable the UART
 * set up the UART baud rate
 */
void UART_init(const UART_Config *uart_ptr)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <UART_init+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <UART_init+0x8>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    2088:	1a 82       	std	Y+2, r1	; 0x02
    208a:	19 82       	std	Y+1, r1	; 0x01
	/*U2X=1 for double transmission speed */
	UCSRA=(1<<U2X);
    208c:	eb e2       	ldi	r30, 0x2B	; 43
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
    UCSRB=(1<<RXEN)|(1<<TXEN);
    2094:	ea e2       	ldi	r30, 0x2A	; 42
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	88 e1       	ldi	r24, 0x18	; 24
    209a:	80 83       	st	Z, r24
    	 * UPM1:0  = 00 Disable parity bit
    	 * USBS    = 0 One stop bit
    	 * UCSZ1:0 = 11 For 8-bit data mode
    	 * UCPOL   = 0 Used with the Synchronous operation only
    	 ***********************************************************************/
    UCSRC=(UCSRC&0xF9)|(uart_ptr->bit_data);
    209c:	a0 e4       	ldi	r26, 0x40	; 64
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e0 e4       	ldi	r30, 0x40	; 64
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	98 2f       	mov	r25, r24
    20a8:	99 7f       	andi	r25, 0xF9	; 249
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	84 81       	ldd	r24, Z+4	; 0x04
    20b0:	89 2b       	or	r24, r25
    20b2:	8c 93       	st	X, r24
    UCSRC=(UCSRC&0XCF)|(uart_ptr->parity);
    20b4:	a0 e4       	ldi	r26, 0x40	; 64
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e0 e4       	ldi	r30, 0x40	; 64
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	98 2f       	mov	r25, r24
    20c0:	9f 7c       	andi	r25, 0xCF	; 207
    20c2:	eb 81       	ldd	r30, Y+3	; 0x03
    20c4:	fc 81       	ldd	r31, Y+4	; 0x04
    20c6:	85 81       	ldd	r24, Z+5	; 0x05
    20c8:	89 2b       	or	r24, r25
    20ca:	8c 93       	st	X, r24
    UCSRC=(UCSRC&0XF7)|(uart_ptr->stop_bit);
    20cc:	a0 e4       	ldi	r26, 0x40	; 64
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e0 e4       	ldi	r30, 0x40	; 64
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	98 2f       	mov	r25, r24
    20d8:	97 7f       	andi	r25, 0xF7	; 247
    20da:	eb 81       	ldd	r30, Y+3	; 0x03
    20dc:	fc 81       	ldd	r31, Y+4	; 0x04
    20de:	86 81       	ldd	r24, Z+6	; 0x06
    20e0:	89 2b       	or	r24, r25
    20e2:	8c 93       	st	X, r24
    /*Calculate UBRR register value */
    ubrr_value = (uint16)(((F_CPU / (uart_ptr->baud_rate * 8UL))) - 1);
    20e4:	eb 81       	ldd	r30, Y+3	; 0x03
    20e6:	fc 81       	ldd	r31, Y+4	; 0x04
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	a2 81       	ldd	r26, Z+2	; 0x02
    20ee:	b3 81       	ldd	r27, Z+3	; 0x03
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	aa 1f       	adc	r26, r26
    20f6:	bb 1f       	adc	r27, r27
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	aa 1f       	adc	r26, r26
    20fe:	bb 1f       	adc	r27, r27
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	aa 1f       	adc	r26, r26
    2106:	bb 1f       	adc	r27, r27
    2108:	9c 01       	movw	r18, r24
    210a:	ad 01       	movw	r20, r26
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	92 e1       	ldi	r25, 0x12	; 18
    2110:	aa e7       	ldi	r26, 0x7A	; 122
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    211c:	da 01       	movw	r26, r20
    211e:	c9 01       	movw	r24, r18
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
    /*First 8-bits from Baud Prescale inside UBRRL and last 4-bits in UBRRH*/
    UBRRH=(ubrr_value>>8);
    2126:	e0 e4       	ldi	r30, 0x40	; 64
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	89 2f       	mov	r24, r25
    2130:	99 27       	eor	r25, r25
    2132:	80 83       	st	Z, r24
    UBRRL=ubrr_value;
    2134:	e9 e2       	ldi	r30, 0x29	; 41
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	80 83       	st	Z, r24
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <UART_sendByte>:
/*
 * Description:
 * Function responsible for send byte to another UART device
 */
void UART_sendByte(const uint8 data )
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	0f 92       	push	r0
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one
		 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
    2156:	eb e2       	ldi	r30, 0x2B	; 43
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 2f       	mov	r24, r24
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	80 72       	andi	r24, 0x20	; 32
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	b9 f3       	breq	.-18     	; 0x2156 <UART_sendByte+0xc>
	/*
		 * Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now
		 */
	UDR=data;
    2168:	ec e2       	ldi	r30, 0x2C	; 44
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	80 83       	st	Z, r24
}
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <UART_recieveByte>:
/*
 * Description:
 * Function responsible for receive byte from the another UART device
 */
uint8 UART_recieveByte(void)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2180:	eb e2       	ldi	r30, 0x2B	; 43
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	88 23       	and	r24, r24
    2188:	dc f7       	brge	.-10     	; 0x2180 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    218a:	ec e2       	ldi	r30, 0x2C	; 44
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
}
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <UART_sendString+0x6>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	9b 83       	std	Y+3, r25	; 0x03
    21a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    21a6:	19 82       	std	Y+1, r1	; 0x01
    21a8:	0e c0       	rjmp	.+28     	; 0x21c6 <UART_sendString+0x30>
	/*Send the whole string */
	while (Str[i] !='\0')
	{
		UART_sendByte(Str[i]);
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	9b 81       	ldd	r25, Y+3	; 0x03
    21b4:	fc 01       	movw	r30, r24
    21b6:	e2 0f       	add	r30, r18
    21b8:	f3 1f       	adc	r31, r19
    21ba:	80 81       	ld	r24, Z
    21bc:	0e 94 a5 10 	call	0x214a	; 0x214a <UART_sendByte>
		i++;
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	8f 5f       	subi	r24, 0xFF	; 255
    21c4:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;
	/*Send the whole string */
	while (Str[i] !='\0')
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	fc 01       	movw	r30, r24
    21d2:	e2 0f       	add	r30, r18
    21d4:	f3 1f       	adc	r31, r19
    21d6:	80 81       	ld	r24, Z
    21d8:	88 23       	and	r24, r24
    21da:	39 f7       	brne	.-50     	; 0x21aa <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <UART_receiveString+0xa>
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21fc:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	8c 01       	movw	r16, r24
    220a:	02 0f       	add	r16, r18
    220c:	13 1f       	adc	r17, r19
    220e:	0e 94 bc 10 	call	0x2178	; 0x2178 <UART_recieveByte>
    2212:	f8 01       	movw	r30, r16
    2214:	80 83       	st	Z, r24
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	9b 81       	ldd	r25, Y+3	; 0x03
    2228:	8c 01       	movw	r16, r24
    222a:	02 0f       	add	r16, r18
    222c:	13 1f       	adc	r17, r19
    222e:	0e 94 bc 10 	call	0x2178	; 0x2178 <UART_recieveByte>
    2232:	f8 01       	movw	r30, r16
    2234:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	fc 01       	movw	r30, r24
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	80 81       	ld	r24, Z
    2248:	83 32       	cpi	r24, 0x23	; 35
    224a:	31 f7       	brne	.-52     	; 0x2218 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	9b 81       	ldd	r25, Y+3	; 0x03
    2256:	fc 01       	movw	r30, r24
    2258:	e2 0f       	add	r30, r18
    225a:	f3 1f       	adc	r31, r19
    225c:	10 82       	st	Z, r1
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	08 95       	ret

0000226e <__udivmodsi4>:
    226e:	a1 e2       	ldi	r26, 0x21	; 33
    2270:	1a 2e       	mov	r1, r26
    2272:	aa 1b       	sub	r26, r26
    2274:	bb 1b       	sub	r27, r27
    2276:	fd 01       	movw	r30, r26
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <__udivmodsi4_ep>

0000227a <__udivmodsi4_loop>:
    227a:	aa 1f       	adc	r26, r26
    227c:	bb 1f       	adc	r27, r27
    227e:	ee 1f       	adc	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	a2 17       	cp	r26, r18
    2284:	b3 07       	cpc	r27, r19
    2286:	e4 07       	cpc	r30, r20
    2288:	f5 07       	cpc	r31, r21
    228a:	20 f0       	brcs	.+8      	; 0x2294 <__udivmodsi4_ep>
    228c:	a2 1b       	sub	r26, r18
    228e:	b3 0b       	sbc	r27, r19
    2290:	e4 0b       	sbc	r30, r20
    2292:	f5 0b       	sbc	r31, r21

00002294 <__udivmodsi4_ep>:
    2294:	66 1f       	adc	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	88 1f       	adc	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	1a 94       	dec	r1
    229e:	69 f7       	brne	.-38     	; 0x227a <__udivmodsi4_loop>
    22a0:	60 95       	com	r22
    22a2:	70 95       	com	r23
    22a4:	80 95       	com	r24
    22a6:	90 95       	com	r25
    22a8:	9b 01       	movw	r18, r22
    22aa:	ac 01       	movw	r20, r24
    22ac:	bd 01       	movw	r22, r26
    22ae:	cf 01       	movw	r24, r30
    22b0:	08 95       	ret

000022b2 <__prologue_saves__>:
    22b2:	2f 92       	push	r2
    22b4:	3f 92       	push	r3
    22b6:	4f 92       	push	r4
    22b8:	5f 92       	push	r5
    22ba:	6f 92       	push	r6
    22bc:	7f 92       	push	r7
    22be:	8f 92       	push	r8
    22c0:	9f 92       	push	r9
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	ca 1b       	sub	r28, r26
    22dc:	db 0b       	sbc	r29, r27
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	09 94       	ijmp

000022ea <__epilogue_restores__>:
    22ea:	2a 88       	ldd	r2, Y+18	; 0x12
    22ec:	39 88       	ldd	r3, Y+17	; 0x11
    22ee:	48 88       	ldd	r4, Y+16	; 0x10
    22f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    22fc:	b9 84       	ldd	r11, Y+9	; 0x09
    22fe:	c8 84       	ldd	r12, Y+8	; 0x08
    2300:	df 80       	ldd	r13, Y+7	; 0x07
    2302:	ee 80       	ldd	r14, Y+6	; 0x06
    2304:	fd 80       	ldd	r15, Y+5	; 0x05
    2306:	0c 81       	ldd	r16, Y+4	; 0x04
    2308:	1b 81       	ldd	r17, Y+3	; 0x03
    230a:	aa 81       	ldd	r26, Y+2	; 0x02
    230c:	b9 81       	ldd	r27, Y+1	; 0x01
    230e:	ce 0f       	add	r28, r30
    2310:	d1 1d       	adc	r29, r1
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	ed 01       	movw	r28, r26
    231e:	08 95       	ret

00002320 <_exit>:
    2320:	f8 94       	cli

00002322 <__stop_program>:
    2322:	ff cf       	rjmp	.-2      	; 0x2322 <__stop_program>
