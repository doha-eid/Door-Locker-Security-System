
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00003762  000037f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800192  00800192  00003928  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  00003928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d7  00000000  00000000  00006d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000080e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008223  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c82f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_3>
      10:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__vector_8>
      24:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <main>
      8a:	0c 94 af 1b 	jmp	0x375e	; 0x375e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer_count>:
 **********************************************************************************************************/
/*
 * Description :
 * call back function of timer to count the seconds that we need
 */
void timer_count(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*increases the global tick each time the timer interrupt*/
	g_tick++;
     b4e:	80 91 92 01 	lds	r24, 0x0192
     b52:	90 91 93 01 	lds	r25, 0x0193
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 93 01 	sts	0x0193, r25
     b5c:	80 93 92 01 	sts	0x0192, r24
	/*
	 * check if the timer count second
	 */

}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <timer>:

void timer(uint8 volatile g_seconds_required) {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	0f 92       	push	r0
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	89 83       	std	Y+1, r24	; 0x01
	Timer_Init(&configure);
     b72:	85 e8       	ldi	r24, 0x85	; 133
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 41 18 	call	0x3082	; 0x3082 <Timer_Init>
	while (g_tick != ((NUMBER_OF_OVERFLOWS_PER_SECOND) * g_seconds_required))
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	82 95       	swap	r24
     b86:	92 95       	swap	r25
     b88:	90 7f       	andi	r25, 0xF0	; 240
     b8a:	98 27       	eor	r25, r24
     b8c:	80 7f       	andi	r24, 0xF0	; 240
     b8e:	98 27       	eor	r25, r24
     b90:	9c 01       	movw	r18, r24
     b92:	80 91 92 01 	lds	r24, 0x0192
     b96:	90 91 93 01 	lds	r25, 0x0193
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	69 f7       	brne	.-38     	; 0xb7a <timer+0x14>
		;
	Timer_DeInit(&configure);
     ba0:	85 e8       	ldi	r24, 0x85	; 133
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 b2 19 	call	0x3364	; 0x3364 <Timer_DeInit>
	g_tick = 0;
     ba8:	10 92 93 01 	sts	0x0193, r1
     bac:	10 92 92 01 	sts	0x0192, r1

}
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Enter_Password>:
/*
 * Description:
 * Function that take the password twice from the keypad and display on LCD as *
 */
void Enter_Password(void) {
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	6c 97       	sbiw	r28, 0x1c	; 28
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
    /*receive the first password from the keypad and store at array*/
	LCD_displayString("Enter Password");
     bd0:	80 e6       	ldi	r24, 0x60	; 96
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	LCD_moveCursor(1, 0);
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	for (i = 0; i < 5; i++) {
     be0:	10 92 9b 01 	sts	0x019B, r1
     be4:	98 c0       	rjmp	.+304    	; 0xd16 <Enter_Password+0x15e>
		password_send[i] = KEYPAD_getPressedKey();
     be6:	80 91 9b 01 	lds	r24, 0x019B
     bea:	08 2f       	mov	r16, r24
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <KEYPAD_getPressedKey>
     bf2:	f8 01       	movw	r30, r16
     bf4:	ed 55       	subi	r30, 0x5D	; 93
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     bfa:	8a e2       	ldi	r24, 0x2A	; 42
     bfc:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_displayCharacter>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	aa ef       	ldi	r26, 0xFA	; 250
     c06:	b3 e4       	ldi	r27, 0x43	; 67
     c08:	89 8f       	std	Y+25, r24	; 0x19
     c0a:	9a 8f       	std	Y+26, r25	; 0x1a
     c0c:	ab 8f       	std	Y+27, r26	; 0x1b
     c0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c10:	69 8d       	ldd	r22, Y+25	; 0x19
     c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	4a ef       	ldi	r20, 0xFA	; 250
     c1e:	54 e4       	ldi	r21, 0x44	; 68
     c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	8d 8b       	std	Y+21, r24	; 0x15
     c2a:	9e 8b       	std	Y+22, r25	; 0x16
     c2c:	af 8b       	std	Y+23, r26	; 0x17
     c2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c30:	6d 89       	ldd	r22, Y+21	; 0x15
     c32:	7e 89       	ldd	r23, Y+22	; 0x16
     c34:	8f 89       	ldd	r24, Y+23	; 0x17
     c36:	98 8d       	ldd	r25, Y+24	; 0x18
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e8       	ldi	r20, 0x80	; 128
     c3e:	5f e3       	ldi	r21, 0x3F	; 63
     c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c44:	88 23       	and	r24, r24
     c46:	2c f4       	brge	.+10     	; 0xc52 <Enter_Password+0x9a>
		__ticks = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9c 8b       	std	Y+20, r25	; 0x14
     c4e:	8b 8b       	std	Y+19, r24	; 0x13
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <Enter_Password+0x118>
	else if (__tmp > 65535)
     c52:	6d 89       	ldd	r22, Y+21	; 0x15
     c54:	7e 89       	ldd	r23, Y+22	; 0x16
     c56:	8f 89       	ldd	r24, Y+23	; 0x17
     c58:	98 8d       	ldd	r25, Y+24	; 0x18
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	3f ef       	ldi	r19, 0xFF	; 255
     c5e:	4f e7       	ldi	r20, 0x7F	; 127
     c60:	57 e4       	ldi	r21, 0x47	; 71
     c62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c66:	18 16       	cp	r1, r24
     c68:	4c f5       	brge	.+82     	; 0xcbc <Enter_Password+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c6a:	69 8d       	ldd	r22, Y+25	; 0x19
     c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e2       	ldi	r20, 0x20	; 32
     c78:	51 e4       	ldi	r21, 0x41	; 65
     c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	bc 01       	movw	r22, r24
     c84:	cd 01       	movw	r24, r26
     c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	9c 8b       	std	Y+20, r25	; 0x14
     c90:	8b 8b       	std	Y+19, r24	; 0x13
     c92:	0f c0       	rjmp	.+30     	; 0xcb2 <Enter_Password+0xfa>
     c94:	88 ec       	ldi	r24, 0xC8	; 200
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	9a 8b       	std	Y+18, r25	; 0x12
     c9a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9c:	89 89       	ldd	r24, Y+17	; 0x11
     c9e:	9a 89       	ldd	r25, Y+18	; 0x12
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <Enter_Password+0xe8>
     ca4:	9a 8b       	std	Y+18, r25	; 0x12
     ca6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca8:	8b 89       	ldd	r24, Y+19	; 0x13
     caa:	9c 89       	ldd	r25, Y+20	; 0x14
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	9c 8b       	std	Y+20, r25	; 0x14
     cb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb2:	8b 89       	ldd	r24, Y+19	; 0x13
     cb4:	9c 89       	ldd	r25, Y+20	; 0x14
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	69 f7       	brne	.-38     	; 0xc94 <Enter_Password+0xdc>
     cba:	14 c0       	rjmp	.+40     	; 0xce4 <Enter_Password+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cbc:	6d 89       	ldd	r22, Y+21	; 0x15
     cbe:	7e 89       	ldd	r23, Y+22	; 0x16
     cc0:	8f 89       	ldd	r24, Y+23	; 0x17
     cc2:	98 8d       	ldd	r25, Y+24	; 0x18
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9c 8b       	std	Y+20, r25	; 0x14
     cce:	8b 8b       	std	Y+19, r24	; 0x13
     cd0:	8b 89       	ldd	r24, Y+19	; 0x13
     cd2:	9c 89       	ldd	r25, Y+20	; 0x14
     cd4:	98 8b       	std	Y+16, r25	; 0x10
     cd6:	8f 87       	std	Y+15, r24	; 0x0f
     cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cda:	98 89       	ldd	r25, Y+16	; 0x10
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <Enter_Password+0x124>
     ce0:	98 8b       	std	Y+16, r25	; 0x10
     ce2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		/*if we press on ON/C key it clear the pass that entered and would start again from 0*/
		if (password_send[i] == 13) {
     ce4:	80 91 9b 01 	lds	r24, 0x019B
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	ed 55       	subi	r30, 0x5D	; 93
     cf0:	fe 4f       	sbci	r31, 0xFE	; 254
     cf2:	80 81       	ld	r24, Z
     cf4:	8d 30       	cpi	r24, 0x0D	; 13
     cf6:	51 f4       	brne	.+20     	; 0xd0c <Enter_Password+0x154>
			/*clear the screen */
			LCD_clearScreen();
     cf8:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
			/*enter the new password */
			LCD_displayString("Enter new password");
     cfc:	8f e6       	ldi	r24, 0x6F	; 111
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
			LCD_moveCursor(2, 0);
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
 */
void Enter_Password(void) {
    /*receive the first password from the keypad and store at array*/
	LCD_displayString("Enter Password");
	LCD_moveCursor(1, 0);
	for (i = 0; i < 5; i++) {
     d0c:	80 91 9b 01 	lds	r24, 0x019B
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	80 93 9b 01 	sts	0x019B, r24
     d16:	80 91 9b 01 	lds	r24, 0x019B
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <Enter_Password+0x168>
     d1e:	63 cf       	rjmp	.-314    	; 0xbe6 <Enter_Password+0x2e>
			LCD_moveCursor(2, 0);

		}
	}
	/*Enter the second password from the keypad and store at array */
	LCD_clearScreen();
     d20:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
	LCD_displayString("Reenter Password");
     d24:	82 e8       	ldi	r24, 0x82	; 130
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	LCD_moveCursor(1, 0);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	for (i = 0; i < 5; i++) {
     d34:	10 92 9b 01 	sts	0x019B, r1
     d38:	98 c0       	rjmp	.+304    	; 0xe6a <Enter_Password+0x2b2>
		password_check[i] = KEYPAD_getPressedKey();
     d3a:	80 91 9b 01 	lds	r24, 0x019B
     d3e:	08 2f       	mov	r16, r24
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <KEYPAD_getPressedKey>
     d46:	f8 01       	movw	r30, r16
     d48:	e2 56       	subi	r30, 0x62	; 98
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     d4e:	8a e2       	ldi	r24, 0x2A	; 42
     d50:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_displayCharacter>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	aa ef       	ldi	r26, 0xFA	; 250
     d5a:	b3 e4       	ldi	r27, 0x43	; 67
     d5c:	8b 87       	std	Y+11, r24	; 0x0b
     d5e:	9c 87       	std	Y+12, r25	; 0x0c
     d60:	ad 87       	std	Y+13, r26	; 0x0d
     d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d64:	6b 85       	ldd	r22, Y+11	; 0x0b
     d66:	7c 85       	ldd	r23, Y+12	; 0x0c
     d68:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a ef       	ldi	r20, 0xFA	; 250
     d72:	54 e4       	ldi	r21, 0x44	; 68
     d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8f 83       	std	Y+7, r24	; 0x07
     d7e:	98 87       	std	Y+8, r25	; 0x08
     d80:	a9 87       	std	Y+9, r26	; 0x09
     d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	78 85       	ldd	r23, Y+8	; 0x08
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	2c f4       	brge	.+10     	; 0xda6 <Enter_Password+0x1ee>
		__ticks = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <Enter_Password+0x26c>
	else if (__tmp > 65535)
     da6:	6f 81       	ldd	r22, Y+7	; 0x07
     da8:	78 85       	ldd	r23, Y+8	; 0x08
     daa:	89 85       	ldd	r24, Y+9	; 0x09
     dac:	9a 85       	ldd	r25, Y+10	; 0x0a
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	3f ef       	ldi	r19, 0xFF	; 255
     db2:	4f e7       	ldi	r20, 0x7F	; 127
     db4:	57 e4       	ldi	r21, 0x47	; 71
     db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dba:	18 16       	cp	r1, r24
     dbc:	4c f5       	brge	.+82     	; 0xe10 <Enter_Password+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	0f c0       	rjmp	.+30     	; 0xe06 <Enter_Password+0x24e>
     de8:	88 ec       	ldi	r24, 0xC8	; 200
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <Enter_Password+0x23c>
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	9e 83       	std	Y+6, r25	; 0x06
     e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	69 f7       	brne	.-38     	; 0xde8 <Enter_Password+0x230>
     e0e:	14 c0       	rjmp	.+40     	; 0xe38 <Enter_Password+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e10:	6f 81       	ldd	r22, Y+7	; 0x07
     e12:	78 85       	ldd	r23, Y+8	; 0x08
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	9e 81       	ldd	r25, Y+6	; 0x06
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <Enter_Password+0x278>
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/*if we press on ON/C key it clear the pass that entered and would start again from 0*/
		if (password_check[i] == 13) {
     e38:	80 91 9b 01 	lds	r24, 0x019B
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	fc 01       	movw	r30, r24
     e42:	e2 56       	subi	r30, 0x62	; 98
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	8d 30       	cpi	r24, 0x0D	; 13
     e4a:	51 f4       	brne	.+20     	; 0xe60 <Enter_Password+0x2a8>
			/*clear the screen */
			LCD_clearScreen();
     e4c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
			/*enter the new password */
			LCD_displayString("Enter new password");
     e50:	8f e6       	ldi	r24, 0x6F	; 111
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
			LCD_moveCursor(2, 0);
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	}
	/*Enter the second password from the keypad and store at array */
	LCD_clearScreen();
	LCD_displayString("Reenter Password");
	LCD_moveCursor(1, 0);
	for (i = 0; i < 5; i++) {
     e60:	80 91 9b 01 	lds	r24, 0x019B
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	80 93 9b 01 	sts	0x019B, r24
     e6a:	80 91 9b 01 	lds	r24, 0x019B
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	08 f4       	brcc	.+2      	; 0xe74 <Enter_Password+0x2bc>
     e72:	63 cf       	rjmp	.-314    	; 0xd3a <Enter_Password+0x182>
			LCD_moveCursor(2, 0);

		}
	}
/*calling the function to compare between two passwords */
	check_Password();
     e74:	0e 94 47 07 	call	0xe8e	; 0xe8e <check_Password>
}
     e78:	6c 96       	adiw	r28, 0x1c	; 28
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	08 95       	ret

00000e8e <check_Password>:
/*
 * Description :
 * Function to compare if the two passwords are matching or not
 */
void check_Password() {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	for (i = 0; i < 5; i++) {
     e96:	10 92 9b 01 	sts	0x019B, r1
     e9a:	19 c0       	rjmp	.+50     	; 0xece <check_Password+0x40>
		if (password_send[i] != password_check[i]) {
     e9c:	80 91 9b 01 	lds	r24, 0x019B
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	fc 01       	movw	r30, r24
     ea6:	ed 55       	subi	r30, 0x5D	; 93
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	20 81       	ld	r18, Z
     eac:	80 91 9b 01 	lds	r24, 0x019B
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	e2 56       	subi	r30, 0x62	; 98
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	80 81       	ld	r24, Z
     ebc:	28 17       	cp	r18, r24
     ebe:	11 f0       	breq	.+4      	; 0xec4 <check_Password+0x36>
			checking_value = 0;
     ec0:	10 92 9a 01 	sts	0x019A, r1
/*
 * Description :
 * Function to compare if the two passwords are matching or not
 */
void check_Password() {
	for (i = 0; i < 5; i++) {
     ec4:	80 91 9b 01 	lds	r24, 0x019B
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	80 93 9b 01 	sts	0x019B, r24
     ece:	80 91 9b 01 	lds	r24, 0x019B
     ed2:	85 30       	cpi	r24, 0x05	; 5
     ed4:	18 f3       	brcs	.-58     	; 0xe9c <check_Password+0xe>
		if (password_send[i] != password_check[i]) {
			checking_value = 0;
		}
	}
		if(i==5){
     ed6:	80 91 9b 01 	lds	r24, 0x019B
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	19 f4       	brne	.+6      	; 0xee4 <check_Password+0x56>
		checking_value = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 9a 01 	sts	0x019A, r24
	}
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <send_Pass_ToMcu2>:

/*
 * Description:
 * Function to send the password to the MCU2 by uart
 */
void send_Pass_ToMcu2(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("Press=to send password");
     ef2:	83 e9       	ldi	r24, 0x93	; 147
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	if (KEYPAD_getPressedKey() == '=') {
     efa:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <KEYPAD_getPressedKey>
     efe:	8d 33       	cpi	r24, 0x3D	; 61
     f00:	b1 f4       	brne	.+44     	; 0xf2e <send_Pass_ToMcu2+0x44>
		for (i = 0; i < 5; i++) {
     f02:	10 92 9b 01 	sts	0x019B, r1
     f06:	0f c0       	rjmp	.+30     	; 0xf26 <send_Pass_ToMcu2+0x3c>
			UART_sendByte(password_send[i]);
     f08:	80 91 9b 01 	lds	r24, 0x019B
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	ed 55       	subi	r30, 0x5D	; 93
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	80 81       	ld	r24, Z
     f18:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <UART_sendByte>
 * Function to send the password to the MCU2 by uart
 */
void send_Pass_ToMcu2(void) {
	LCD_displayString("Press=to send password");
	if (KEYPAD_getPressedKey() == '=') {
		for (i = 0; i < 5; i++) {
     f1c:	80 91 9b 01 	lds	r24, 0x019B
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	80 93 9b 01 	sts	0x019B, r24
     f26:	80 91 9b 01 	lds	r24, 0x019B
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	68 f3       	brcs	.-38     	; 0xf08 <send_Pass_ToMcu2+0x1e>
			UART_sendByte(password_send[i]);
		}
	}

}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <options_list>:
 * Description:
 * Function to decide open the door or change the password
 * option list from *.open
 * -. change password
 */
void options_list(void) {
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	2e 97       	sbiw	r28, 0x0e	; 14
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
	option_key = KEYPAD_getPressedKey();
     f48:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <KEYPAD_getPressedKey>
     f4c:	80 93 98 01 	sts	0x0198, r24
	/*repeats until the user choose one of two options */
	do {
		option_key = KEYPAD_getPressedKey();
     f50:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <KEYPAD_getPressedKey>
     f54:	80 93 98 01 	sts	0x0198, r24
	} while ((option_key != '*') && (option_key != '-'));
     f58:	80 91 98 01 	lds	r24, 0x0198
     f5c:	8a 32       	cpi	r24, 0x2A	; 42
     f5e:	21 f0       	breq	.+8      	; 0xf68 <options_list+0x34>
     f60:	80 91 98 01 	lds	r24, 0x0198
     f64:	8d 32       	cpi	r24, 0x2D	; 45
     f66:	a1 f7       	brne	.-24     	; 0xf50 <options_list+0x1c>

	/*sends to MCU2 the option which the user chose*/
	UART_sendByte(option_key);
     f68:	80 91 98 01 	lds	r24, 0x0198
     f6c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <UART_sendByte>
	LCD_clearScreen();
     f70:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
	LCD_displayCharacter(option_key);
     f74:	80 91 98 01 	lds	r24, 0x0198
     f78:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_displayCharacter>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	aa ef       	ldi	r26, 0xFA	; 250
     f82:	b3 e4       	ldi	r27, 0x43	; 67
     f84:	8b 87       	std	Y+11, r24	; 0x0b
     f86:	9c 87       	std	Y+12, r25	; 0x0c
     f88:	ad 87       	std	Y+13, r26	; 0x0d
     f8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f90:	8d 85       	ldd	r24, Y+13	; 0x0d
     f92:	9e 85       	ldd	r25, Y+14	; 0x0e
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4a ef       	ldi	r20, 0xFA	; 250
     f9a:	54 e4       	ldi	r21, 0x44	; 68
     f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	8f 83       	std	Y+7, r24	; 0x07
     fa6:	98 87       	std	Y+8, r25	; 0x08
     fa8:	a9 87       	std	Y+9, r26	; 0x09
     faa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fac:	6f 81       	ldd	r22, Y+7	; 0x07
     fae:	78 85       	ldd	r23, Y+8	; 0x08
     fb0:	89 85       	ldd	r24, Y+9	; 0x09
     fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e8       	ldi	r20, 0x80	; 128
     fba:	5f e3       	ldi	r21, 0x3F	; 63
     fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc0:	88 23       	and	r24, r24
     fc2:	2c f4       	brge	.+10     	; 0xfce <options_list+0x9a>
		__ticks = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9e 83       	std	Y+6, r25	; 0x06
     fca:	8d 83       	std	Y+5, r24	; 0x05
     fcc:	3f c0       	rjmp	.+126    	; 0x104c <options_list+0x118>
	else if (__tmp > 65535)
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	3f ef       	ldi	r19, 0xFF	; 255
     fda:	4f e7       	ldi	r20, 0x7F	; 127
     fdc:	57 e4       	ldi	r21, 0x47	; 71
     fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	4c f5       	brge	.+82     	; 0x1038 <options_list+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e2       	ldi	r20, 0x20	; 32
     ff4:	51 e4       	ldi	r21, 0x41	; 65
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	0f c0       	rjmp	.+30     	; 0x102e <options_list+0xfa>
    1010:	88 ec       	ldi	r24, 0xC8	; 200
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9c 83       	std	Y+4, r25	; 0x04
    1016:	8b 83       	std	Y+3, r24	; 0x03
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <options_list+0xe8>
    1020:	9c 83       	std	Y+4, r25	; 0x04
    1022:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	69 f7       	brne	.-38     	; 0x1010 <options_list+0xdc>
    1036:	14 c0       	rjmp	.+40     	; 0x1060 <options_list+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1038:	6f 81       	ldd	r22, Y+7	; 0x07
    103a:	78 85       	ldd	r23, Y+8	; 0x08
    103c:	89 85       	ldd	r24, Y+9	; 0x09
    103e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	9a 83       	std	Y+2, r25	; 0x02
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <options_list+0x124>
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	/*decide where we need the code run */
	if (option_key == '*') {
    1060:	80 91 98 01 	lds	r24, 0x0198
    1064:	8a 32       	cpi	r24, 0x2A	; 42
    1066:	21 f4       	brne	.+8      	; 0x1070 <options_list+0x13c>
		g_step = 3;
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	80 93 99 01 	sts	0x0199, r24
    106e:	07 c0       	rjmp	.+14     	; 0x107e <options_list+0x14a>
	} else if (option_key == '-') {
    1070:	80 91 98 01 	lds	r24, 0x0198
    1074:	8d 32       	cpi	r24, 0x2D	; 45
    1076:	19 f4       	brne	.+6      	; 0x107e <options_list+0x14a>
		g_step = 4;
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	80 93 99 01 	sts	0x0199, r24
	}

}
    107e:	2e 96       	adiw	r28, 0x0e	; 14
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <enter_saved_pass>:
/*
 * Description :
 * Function that take the password once from the keypad and store at array
 */
void enter_saved_pass(void) {
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	2e 97       	sbiw	r28, 0x0e	; 14
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
	for (i = 0; i < 5; i++) {
    10a8:	10 92 9b 01 	sts	0x019B, r1
    10ac:	9a c0       	rjmp	.+308    	; 0x11e2 <enter_saved_pass+0x152>
		password_send[i] = KEYPAD_getPressedKey();
    10ae:	80 91 9b 01 	lds	r24, 0x019B
    10b2:	08 2f       	mov	r16, r24
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <KEYPAD_getPressedKey>
    10ba:	f8 01       	movw	r30, r16
    10bc:	ed 55       	subi	r30, 0x5D	; 93
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    10c2:	8a e2       	ldi	r24, 0x2A	; 42
    10c4:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_displayCharacter>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	aa ef       	ldi	r26, 0xFA	; 250
    10ce:	b3 e4       	ldi	r27, 0x43	; 67
    10d0:	8b 87       	std	Y+11, r24	; 0x0b
    10d2:	9c 87       	std	Y+12, r25	; 0x0c
    10d4:	ad 87       	std	Y+13, r26	; 0x0d
    10d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10da:	7c 85       	ldd	r23, Y+12	; 0x0c
    10dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10de:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8f 83       	std	Y+7, r24	; 0x07
    10f2:	98 87       	std	Y+8, r25	; 0x08
    10f4:	a9 87       	std	Y+9, r26	; 0x09
    10f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <enter_saved_pass+0x8a>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9e 83       	std	Y+6, r25	; 0x06
    1116:	8d 83       	std	Y+5, r24	; 0x05
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <enter_saved_pass+0x108>
	else if (__tmp > 65535)
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <enter_saved_pass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	6b 85       	ldd	r22, Y+11	; 0x0b
    1134:	7c 85       	ldd	r23, Y+12	; 0x0c
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	9e 85       	ldd	r25, Y+14	; 0x0e
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	0f c0       	rjmp	.+30     	; 0x117a <enter_saved_pass+0xea>
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <enter_saved_pass+0xd8>
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <enter_saved_pass+0xcc>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <enter_saved_pass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	6f 81       	ldd	r22, Y+7	; 0x07
    1186:	78 85       	ldd	r23, Y+8	; 0x08
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <enter_saved_pass+0x114>
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/*if we press on ON/C key it clear the pass that entered and would start again from 0*/
		if (password_send[i] == 13) {
    11ac:	80 91 9b 01 	lds	r24, 0x019B
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	fc 01       	movw	r30, r24
    11b6:	ed 55       	subi	r30, 0x5D	; 93
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	80 81       	ld	r24, Z
    11bc:	8d 30       	cpi	r24, 0x0D	; 13
    11be:	61 f4       	brne	.+24     	; 0x11d8 <enter_saved_pass+0x148>
			/*clear the screen */
			LCD_clearScreen();
    11c0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
			/*enter the new password */
			LCD_displayString("Enter new password");
    11c4:	8f e6       	ldi	r24, 0x6F	; 111
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
			LCD_moveCursor(2, 0);
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			i = 0;
    11d4:	10 92 9b 01 	sts	0x019B, r1
/*
 * Description :
 * Function that take the password once from the keypad and store at array
 */
void enter_saved_pass(void) {
	for (i = 0; i < 5; i++) {
    11d8:	80 91 9b 01 	lds	r24, 0x019B
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 9b 01 	sts	0x019B, r24
    11e2:	80 91 9b 01 	lds	r24, 0x019B
    11e6:	85 30       	cpi	r24, 0x05	; 5
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <enter_saved_pass+0x15c>
    11ea:	61 cf       	rjmp	.-318    	; 0x10ae <enter_saved_pass+0x1e>
			LCD_moveCursor(2, 0);
			i = 0;
		}
	}

}
    11ec:	2e 96       	adiw	r28, 0x0e	; 14
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <main_List>:
/*
 * Description:
 * Function that display the main list of the system
 */
void main_List(void) {
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    120a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	LCD_displayString("*:Open ");
    1216:	8a ea       	ldi	r24, 0xAA	; 170
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	LCD_moveCursor(1, 0);
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	LCD_displayString("-:");
    1226:	82 eb       	ldi	r24, 0xB2	; 178
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	LCD_moveCursor(1, 1);
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	LCD_displayString("Change Password");
    1236:	85 eb       	ldi	r24, 0xB5	; 181
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	options_list();
    123e:	0e 94 9a 07 	call	0xf34	; 0xf34 <options_list>
}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <check_Pass>:
/*
 * Description :
 * Function that receive if the pass was correct or not and if correct open the door
 */
void check_Pass(uint8 check_password) {
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	6d 97       	sbiw	r28, 0x1d	; 29
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*In this case if the password unmatched
	 *so display on the screen unmatched
	 *and receive from the MCU2  the step that will go to
	 */
	if (check_password == 0) {
    125e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1260:	88 23       	and	r24, r24
    1262:	09 f0       	breq	.+2      	; 0x1266 <check_Pass+0x1e>
    1264:	7f c0       	rjmp	.+254    	; 0x1364 <check_Pass+0x11c>
		LCD_displayString("Unmatched Password ");
    1266:	85 ec       	ldi	r24, 0xC5	; 197
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	aa e7       	ldi	r26, 0x7A	; 122
    1274:	b4 e4       	ldi	r27, 0x44	; 68
    1276:	89 8f       	std	Y+25, r24	; 0x19
    1278:	9a 8f       	std	Y+26, r25	; 0x1a
    127a:	ab 8f       	std	Y+27, r26	; 0x1b
    127c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127e:	69 8d       	ldd	r22, Y+25	; 0x19
    1280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	4a ef       	ldi	r20, 0xFA	; 250
    128c:	54 e4       	ldi	r21, 0x44	; 68
    128e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	8d 8b       	std	Y+21, r24	; 0x15
    1298:	9e 8b       	std	Y+22, r25	; 0x16
    129a:	af 8b       	std	Y+23, r26	; 0x17
    129c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    129e:	6d 89       	ldd	r22, Y+21	; 0x15
    12a0:	7e 89       	ldd	r23, Y+22	; 0x16
    12a2:	8f 89       	ldd	r24, Y+23	; 0x17
    12a4:	98 8d       	ldd	r25, Y+24	; 0x18
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e8       	ldi	r20, 0x80	; 128
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b2:	88 23       	and	r24, r24
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <check_Pass+0x78>
		__ticks = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c 8b       	std	Y+20, r25	; 0x14
    12bc:	8b 8b       	std	Y+19, r24	; 0x13
    12be:	3f c0       	rjmp	.+126    	; 0x133e <check_Pass+0xf6>
	else if (__tmp > 65535)
    12c0:	6d 89       	ldd	r22, Y+21	; 0x15
    12c2:	7e 89       	ldd	r23, Y+22	; 0x16
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	3f ef       	ldi	r19, 0xFF	; 255
    12cc:	4f e7       	ldi	r20, 0x7F	; 127
    12ce:	57 e4       	ldi	r21, 0x47	; 71
    12d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d4:	18 16       	cp	r1, r24
    12d6:	4c f5       	brge	.+82     	; 0x132a <check_Pass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d8:	69 8d       	ldd	r22, Y+25	; 0x19
    12da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e2       	ldi	r20, 0x20	; 32
    12e6:	51 e4       	ldi	r21, 0x41	; 65
    12e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	bc 01       	movw	r22, r24
    12f2:	cd 01       	movw	r24, r26
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	9c 8b       	std	Y+20, r25	; 0x14
    12fe:	8b 8b       	std	Y+19, r24	; 0x13
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <check_Pass+0xd8>
    1302:	88 ec       	ldi	r24, 0xC8	; 200
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9a 8b       	std	Y+18, r25	; 0x12
    1308:	89 8b       	std	Y+17, r24	; 0x11
    130a:	89 89       	ldd	r24, Y+17	; 0x11
    130c:	9a 89       	ldd	r25, Y+18	; 0x12
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <check_Pass+0xc6>
    1312:	9a 8b       	std	Y+18, r25	; 0x12
    1314:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1316:	8b 89       	ldd	r24, Y+19	; 0x13
    1318:	9c 89       	ldd	r25, Y+20	; 0x14
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	9c 8b       	std	Y+20, r25	; 0x14
    131e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1320:	8b 89       	ldd	r24, Y+19	; 0x13
    1322:	9c 89       	ldd	r25, Y+20	; 0x14
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	69 f7       	brne	.-38     	; 0x1302 <check_Pass+0xba>
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <check_Pass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9c 8b       	std	Y+20, r25	; 0x14
    133c:	8b 8b       	std	Y+19, r24	; 0x13
    133e:	8b 89       	ldd	r24, Y+19	; 0x13
    1340:	9c 89       	ldd	r25, Y+20	; 0x14
    1342:	98 8b       	std	Y+16, r25	; 0x10
    1344:	8f 87       	std	Y+15, r24	; 0x0f
    1346:	8f 85       	ldd	r24, Y+15	; 0x0f
    1348:	98 89       	ldd	r25, Y+16	; 0x10
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <check_Pass+0x102>
    134e:	98 8b       	std	Y+16, r25	; 0x10
    1350:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_clearScreen();
    1352:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
		g_step = UART_recieveByte();
    1356:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_recieveByte>
    135a:	80 93 99 01 	sts	0x0199, r24
		do_case=0;
    135e:	10 92 9d 01 	sts	0x019D, r1
    1362:	7f c0       	rjmp	.+254    	; 0x1462 <check_Pass+0x21a>
	 * So display on the screen Matched password
	 * and open the door and turn on the DC_motor and rotate clock wise for 15 seconds
	 * and display (The door is opening) while the DC_motor is rotating
	 *
	 */
	else if (check_password == 1) {
    1364:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	09 f0       	breq	.+2      	; 0x136c <check_Pass+0x124>
    136a:	7b c0       	rjmp	.+246    	; 0x1462 <check_Pass+0x21a>
		LCD_displayString("Matched Password ");
    136c:	89 ed       	ldi	r24, 0xD9	; 217
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	aa e7       	ldi	r26, 0x7A	; 122
    137a:	b4 e4       	ldi	r27, 0x44	; 68
    137c:	8b 87       	std	Y+11, r24	; 0x0b
    137e:	9c 87       	std	Y+12, r25	; 0x0c
    1380:	ad 87       	std	Y+13, r26	; 0x0d
    1382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1384:	6b 85       	ldd	r22, Y+11	; 0x0b
    1386:	7c 85       	ldd	r23, Y+12	; 0x0c
    1388:	8d 85       	ldd	r24, Y+13	; 0x0d
    138a:	9e 85       	ldd	r25, Y+14	; 0x0e
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4a ef       	ldi	r20, 0xFA	; 250
    1392:	54 e4       	ldi	r21, 0x44	; 68
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	8f 83       	std	Y+7, r24	; 0x07
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	a9 87       	std	Y+9, r26	; 0x09
    13a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <check_Pass+0x17e>
		__ticks = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	3f c0       	rjmp	.+126    	; 0x1444 <check_Pass+0x1fc>
	else if (__tmp > 65535)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3f ef       	ldi	r19, 0xFF	; 255
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	57 e4       	ldi	r21, 0x47	; 71
    13d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	4c f5       	brge	.+82     	; 0x1430 <check_Pass+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e2       	ldi	r20, 0x20	; 32
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	0f c0       	rjmp	.+30     	; 0x1426 <check_Pass+0x1de>
    1408:	88 ec       	ldi	r24, 0xC8	; 200
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <check_Pass+0x1cc>
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	69 f7       	brne	.-38     	; 0x1408 <check_Pass+0x1c0>
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <check_Pass+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <check_Pass+0x208>
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    1458:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
		do_case=1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 9d 01 	sts	0x019D, r24
	}
}
    1462:	6d 96       	adiw	r28, 0x1d	; 29
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <matched_State>:
/*
 * DEscription :
 * Function that display on the lcd when the door is opening and closing
 */
void matched_State(void) {
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	/*display on the lcd message for 15 seconds then clear the screen*/
	LCD_displayString("The door opening");
    147c:	8b ee       	ldi	r24, 0xEB	; 235
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	timer(15);
    1484:	8f e0       	ldi	r24, 0x0F	; 15
    1486:	0e 94 b3 05 	call	0xb66	; 0xb66 <timer>
	LCD_clearScreen();
    148a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
	/*display on the lcd message for 3 seconds then clear the screen*/
	LCD_displayString("Door close in 3 secs");
    148e:	8c ef       	ldi	r24, 0xFC	; 252
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	timer(3);
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	0e 94 b3 05 	call	0xb66	; 0xb66 <timer>
	LCD_clearScreen();
    149c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
	/*display on the lcd message for 15 seconds then clear the screen*/
	LCD_displayString("The door closing");
    14a0:	81 e1       	ldi	r24, 0x11	; 17
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	timer(15);
    14a8:	8f e0       	ldi	r24, 0x0F	; 15
    14aa:	0e 94 b3 05 	call	0xb66	; 0xb66 <timer>
	LCD_clearScreen();
    14ae:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <wrong_Passwords>:
 * Description :
 * Function that when we enter the password 3 times wrong display message on the lcd
 * for the 60 seconds
 * then return to main list
 */
void wrong_Passwords(void) {
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("There is a thief!");
    14c0:	82 e2       	ldi	r24, 0x22	; 34
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
	timer(60);
    14c8:	8c e3       	ldi	r24, 0x3C	; 60
    14ca:	0e 94 b3 05 	call	0xb66	; 0xb66 <timer>
	//main_List();
}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <GPIO_setupPinDirection+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_setupPinDirection+0x8>
    14dc:	0f 92       	push	r0
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02
    14e6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <GPIO_setupPinDirection+0x1c>
    14ee:	d5 c0       	rjmp	.+426    	; 0x169a <GPIO_setupPinDirection+0x1c6>
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	84 30       	cpi	r24, 0x04	; 4
    14f4:	08 f0       	brcs	.+2      	; 0x14f8 <GPIO_setupPinDirection+0x24>
    14f6:	d1 c0       	rjmp	.+418    	; 0x169a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3d 83       	std	Y+5, r19	; 0x05
    1500:	2c 83       	std	Y+4, r18	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <GPIO_setupPinDirection+0x3a>
    150c:	43 c0       	rjmp	.+134    	; 0x1594 <GPIO_setupPinDirection+0xc0>
    150e:	2c 81       	ldd	r18, Y+4	; 0x04
    1510:	3d 81       	ldd	r19, Y+5	; 0x05
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	2c f4       	brge	.+10     	; 0x1522 <GPIO_setupPinDirection+0x4e>
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	71 f0       	breq	.+28     	; 0x153c <GPIO_setupPinDirection+0x68>
    1520:	bc c0       	rjmp	.+376    	; 0x169a <GPIO_setupPinDirection+0x1c6>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <GPIO_setupPinDirection+0x5a>
    152c:	5f c0       	rjmp	.+190    	; 0x15ec <GPIO_setupPinDirection+0x118>
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_setupPinDirection+0x66>
    1538:	85 c0       	rjmp	.+266    	; 0x1644 <GPIO_setupPinDirection+0x170>
    153a:	af c0       	rjmp	.+350    	; 0x169a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	a1 f4       	brne	.+40     	; 0x156a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1542:	aa e3       	ldi	r26, 0x3A	; 58
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ea e3       	ldi	r30, 0x3A	; 58
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <GPIO_setupPinDirection+0x8c>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <GPIO_setupPinDirection+0x88>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	98 c0       	rjmp	.+304    	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    156a:	aa e3       	ldi	r26, 0x3A	; 58
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	ea e3       	ldi	r30, 0x3A	; 58
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <GPIO_setupPinDirection+0xb4>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <GPIO_setupPinDirection+0xb0>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	83 c0       	rjmp	.+262    	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    159a:	a7 e3       	ldi	r26, 0x37	; 55
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e7 e3       	ldi	r30, 0x37	; 55
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_setupPinDirection+0xe4>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_setupPinDirection+0xe0>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	6c c0       	rjmp	.+216    	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15c2:	a7 e3       	ldi	r26, 0x37	; 55
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e7 e3       	ldi	r30, 0x37	; 55
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_setupPinDirection+0x10c>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_setupPinDirection+0x108>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	57 c0       	rjmp	.+174    	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	a1 f4       	brne	.+40     	; 0x161a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15f2:	a4 e3       	ldi	r26, 0x34	; 52
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e4 e3       	ldi	r30, 0x34	; 52
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_setupPinDirection+0x13c>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_setupPinDirection+0x138>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	40 c0       	rjmp	.+128    	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    161a:	a4 e3       	ldi	r26, 0x34	; 52
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e4 e3       	ldi	r30, 0x34	; 52
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_setupPinDirection+0x164>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_setupPinDirection+0x160>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	2b c0       	rjmp	.+86     	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	a1 f4       	brne	.+40     	; 0x1672 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    164a:	a1 e3       	ldi	r26, 0x31	; 49
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e1 e3       	ldi	r30, 0x31	; 49
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_setupPinDirection+0x194>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_setupPinDirection+0x190>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	14 c0       	rjmp	.+40     	; 0x169a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1672:	a1 e3       	ldi	r26, 0x31	; 49
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e1 e3       	ldi	r30, 0x31	; 49
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_setupPinDirection+0x1bc>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_setupPinDirection+0x1b8>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <GPIO_writePin+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <GPIO_writePin+0x8>
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	6a 83       	std	Y+2, r22	; 0x02
    16bc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	88 30       	cpi	r24, 0x08	; 8
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <GPIO_writePin+0x1c>
    16c4:	d5 c0       	rjmp	.+426    	; 0x1870 <GPIO_writePin+0x1c6>
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <GPIO_writePin+0x24>
    16cc:	d1 c0       	rjmp	.+418    	; 0x1870 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3d 83       	std	Y+5, r19	; 0x05
    16d6:	2c 83       	std	Y+4, r18	; 0x04
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <GPIO_writePin+0x3a>
    16e2:	43 c0       	rjmp	.+134    	; 0x176a <GPIO_writePin+0xc0>
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <GPIO_writePin+0x4e>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	71 f0       	breq	.+28     	; 0x1712 <GPIO_writePin+0x68>
    16f6:	bc c0       	rjmp	.+376    	; 0x1870 <GPIO_writePin+0x1c6>
    16f8:	2c 81       	ldd	r18, Y+4	; 0x04
    16fa:	3d 81       	ldd	r19, Y+5	; 0x05
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <GPIO_writePin+0x5a>
    1702:	5f c0       	rjmp	.+190    	; 0x17c2 <GPIO_writePin+0x118>
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <GPIO_writePin+0x66>
    170e:	85 c0       	rjmp	.+266    	; 0x181a <GPIO_writePin+0x170>
    1710:	af c0       	rjmp	.+350    	; 0x1870 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	a1 f4       	brne	.+40     	; 0x1740 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1718:	ab e3       	ldi	r26, 0x3B	; 59
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	eb e3       	ldi	r30, 0x3B	; 59
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <GPIO_writePin+0x8c>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <GPIO_writePin+0x88>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	98 c0       	rjmp	.+304    	; 0x1870 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1740:	ab e3       	ldi	r26, 0x3B	; 59
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	eb e3       	ldi	r30, 0x3B	; 59
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_writePin+0xb4>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_writePin+0xb0>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	83 c0       	rjmp	.+262    	; 0x1870 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	a1 f4       	brne	.+40     	; 0x1798 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1770:	a8 e3       	ldi	r26, 0x38	; 56
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e8 e3       	ldi	r30, 0x38	; 56
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GPIO_writePin+0xe4>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GPIO_writePin+0xe0>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	6c c0       	rjmp	.+216    	; 0x1870 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1798:	a8 e3       	ldi	r26, 0x38	; 56
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_writePin+0x10c>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_writePin+0x108>
    17ba:	80 95       	com	r24
    17bc:	84 23       	and	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	57 c0       	rjmp	.+174    	; 0x1870 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	a1 f4       	brne	.+40     	; 0x17f0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17c8:	a5 e3       	ldi	r26, 0x35	; 53
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e3       	ldi	r30, 0x35	; 53
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_writePin+0x13c>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_writePin+0x138>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	40 c0       	rjmp	.+128    	; 0x1870 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17f0:	a5 e3       	ldi	r26, 0x35	; 53
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e3       	ldi	r30, 0x35	; 53
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_writePin+0x164>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_writePin+0x160>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	2b c0       	rjmp	.+86     	; 0x1870 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1820:	a2 e3       	ldi	r26, 0x32	; 50
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e2 e3       	ldi	r30, 0x32	; 50
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_writePin+0x194>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_writePin+0x190>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1848:	a2 e3       	ldi	r26, 0x32	; 50
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e2 e3       	ldi	r30, 0x32	; 50
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_writePin+0x1bc>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_writePin+0x1b8>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <GPIO_readPin+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <GPIO_readPin+0x8>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1892:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	08 f0       	brcs	.+2      	; 0x189c <GPIO_readPin+0x1c>
    189a:	84 c0       	rjmp	.+264    	; 0x19a4 <GPIO_readPin+0x124>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	84 30       	cpi	r24, 0x04	; 4
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <GPIO_readPin+0x24>
    18a2:	80 c0       	rjmp	.+256    	; 0x19a4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3d 83       	std	Y+5, r19	; 0x05
    18ac:	2c 83       	std	Y+4, r18	; 0x04
    18ae:	4c 81       	ldd	r20, Y+4	; 0x04
    18b0:	5d 81       	ldd	r21, Y+5	; 0x05
    18b2:	41 30       	cpi	r20, 0x01	; 1
    18b4:	51 05       	cpc	r21, r1
    18b6:	79 f1       	breq	.+94     	; 0x1916 <GPIO_readPin+0x96>
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	91 05       	cpc	r25, r1
    18c0:	34 f4       	brge	.+12     	; 0x18ce <GPIO_readPin+0x4e>
    18c2:	2c 81       	ldd	r18, Y+4	; 0x04
    18c4:	3d 81       	ldd	r19, Y+5	; 0x05
    18c6:	21 15       	cp	r18, r1
    18c8:	31 05       	cpc	r19, r1
    18ca:	69 f0       	breq	.+26     	; 0x18e6 <GPIO_readPin+0x66>
    18cc:	6b c0       	rjmp	.+214    	; 0x19a4 <GPIO_readPin+0x124>
    18ce:	4c 81       	ldd	r20, Y+4	; 0x04
    18d0:	5d 81       	ldd	r21, Y+5	; 0x05
    18d2:	42 30       	cpi	r20, 0x02	; 2
    18d4:	51 05       	cpc	r21, r1
    18d6:	b9 f1       	breq	.+110    	; 0x1946 <GPIO_readPin+0xc6>
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	83 30       	cpi	r24, 0x03	; 3
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <GPIO_readPin+0x64>
    18e2:	49 c0       	rjmp	.+146    	; 0x1976 <GPIO_readPin+0xf6>
    18e4:	5f c0       	rjmp	.+190    	; 0x19a4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18e6:	e9 e3       	ldi	r30, 0x39	; 57
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_readPin+0x7e>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_readPin+0x7a>
    1902:	ca 01       	movw	r24, r20
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	88 23       	and	r24, r24
    190a:	19 f0       	breq	.+6      	; 0x1912 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	49 c0       	rjmp	.+146    	; 0x19a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	47 c0       	rjmp	.+142    	; 0x19a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1916:	e6 e3       	ldi	r30, 0x36	; 54
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_readPin+0xae>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_readPin+0xaa>
    1932:	ca 01       	movw	r24, r20
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	88 23       	and	r24, r24
    193a:	19 f0       	breq	.+6      	; 0x1942 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	31 c0       	rjmp	.+98     	; 0x19a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1942:	19 82       	std	Y+1, r1	; 0x01
    1944:	2f c0       	rjmp	.+94     	; 0x19a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1946:	e3 e3       	ldi	r30, 0x33	; 51
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a9 01       	movw	r20, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_readPin+0xde>
    195a:	55 95       	asr	r21
    195c:	47 95       	ror	r20
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_readPin+0xda>
    1962:	ca 01       	movw	r24, r20
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	88 23       	and	r24, r24
    196a:	19 f0       	breq	.+6      	; 0x1972 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	19 c0       	rjmp	.+50     	; 0x19a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1972:	19 82       	std	Y+1, r1	; 0x01
    1974:	17 c0       	rjmp	.+46     	; 0x19a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1976:	e0 e3       	ldi	r30, 0x30	; 48
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a9 01       	movw	r20, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <GPIO_readPin+0x10e>
    198a:	55 95       	asr	r21
    198c:	47 95       	ror	r20
    198e:	8a 95       	dec	r24
    1990:	e2 f7       	brpl	.-8      	; 0x198a <GPIO_readPin+0x10a>
    1992:	ca 01       	movw	r24, r20
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	90 70       	andi	r25, 0x00	; 0
    1998:	88 23       	and	r24, r24
    199a:	19 f0       	breq	.+6      	; 0x19a2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19a2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <GPIO_setupPortDirection+0x6>
    19bc:	00 d0       	rcall	.+0      	; 0x19be <GPIO_setupPortDirection+0x8>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	90 f5       	brcc	.+100    	; 0x1a30 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3c 83       	std	Y+4, r19	; 0x04
    19d4:	2b 83       	std	Y+3, r18	; 0x03
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	91 05       	cpc	r25, r1
    19de:	d1 f0       	breq	.+52     	; 0x1a14 <GPIO_setupPortDirection+0x5e>
    19e0:	2b 81       	ldd	r18, Y+3	; 0x03
    19e2:	3c 81       	ldd	r19, Y+4	; 0x04
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <GPIO_setupPortDirection+0x3e>
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	61 f0       	breq	.+24     	; 0x1a0a <GPIO_setupPortDirection+0x54>
    19f2:	1e c0       	rjmp	.+60     	; 0x1a30 <GPIO_setupPortDirection+0x7a>
    19f4:	2b 81       	ldd	r18, Y+3	; 0x03
    19f6:	3c 81       	ldd	r19, Y+4	; 0x04
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	81 f0       	breq	.+32     	; 0x1a1e <GPIO_setupPortDirection+0x68>
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	83 30       	cpi	r24, 0x03	; 3
    1a04:	91 05       	cpc	r25, r1
    1a06:	81 f0       	breq	.+32     	; 0x1a28 <GPIO_setupPortDirection+0x72>
    1a08:	13 c0       	rjmp	.+38     	; 0x1a30 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a0a:	ea e3       	ldi	r30, 0x3A	; 58
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	80 83       	st	Z, r24
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a14:	e7 e3       	ldi	r30, 0x37	; 55
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	80 83       	st	Z, r24
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a1e:	e4 e3       	ldi	r30, 0x34	; 52
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	80 83       	st	Z, r24
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a28:	e1 e3       	ldi	r30, 0x31	; 49
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <GPIO_writePort+0x6>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_writePort+0x8>
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	90 f5       	brcc	.+100    	; 0x1ab8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3c 83       	std	Y+4, r19	; 0x04
    1a5c:	2b 83       	std	Y+3, r18	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	91 05       	cpc	r25, r1
    1a66:	d1 f0       	breq	.+52     	; 0x1a9c <GPIO_writePort+0x5e>
    1a68:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <GPIO_writePort+0x3e>
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <GPIO_writePort+0x54>
    1a7a:	1e c0       	rjmp	.+60     	; 0x1ab8 <GPIO_writePort+0x7a>
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	22 30       	cpi	r18, 0x02	; 2
    1a82:	31 05       	cpc	r19, r1
    1a84:	81 f0       	breq	.+32     	; 0x1aa6 <GPIO_writePort+0x68>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	81 f0       	breq	.+32     	; 0x1ab0 <GPIO_writePort+0x72>
    1a90:	13 c0       	rjmp	.+38     	; 0x1ab8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a92:	eb e3       	ldi	r30, 0x3B	; 59
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	80 83       	st	Z, r24
    1a9a:	0e c0       	rjmp	.+28     	; 0x1ab8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a9c:	e8 e3       	ldi	r30, 0x38	; 56
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	80 83       	st	Z, r24
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1aa6:	e5 e3       	ldi	r30, 0x35	; 53
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	80 83       	st	Z, r24
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ab0:	e2 e3       	ldi	r30, 0x32	; 50
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <GPIO_readPort+0x6>
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <GPIO_readPort+0x8>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ad4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	90 f5       	brcc	.+100    	; 0x1b40 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	d1 f0       	breq	.+52     	; 0x1b24 <GPIO_readPort+0x5e>
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <GPIO_readPort+0x3e>
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <GPIO_readPort+0x54>
    1b02:	1e c0       	rjmp	.+60     	; 0x1b40 <GPIO_readPort+0x7a>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <GPIO_readPort+0x68>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	81 f0       	breq	.+32     	; 0x1b38 <GPIO_readPort+0x72>
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b1a:	e9 e3       	ldi	r30, 0x39	; 57
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b24:	e6 e3       	ldi	r30, 0x36	; 54
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b2e:	e3 e3       	ldi	r30, 0x33	; 51
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	04 c0       	rjmp	.+8      	; 0x1b40 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b38:	e0 e3       	ldi	r30, 0x30	; 48
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <KEYPAD_getPressedKey+0x6>
    1b56:	0f 92       	push	r0
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b5c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b5e:	1b 82       	std	Y+3, r1	; 0x03
    1b60:	43 c0       	rjmp	.+134    	; 0x1be8 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	98 2f       	mov	r25, r24
    1b6e:	9c 5f       	subi	r25, 0xFC	; 252
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	69 2f       	mov	r22, r25
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 01       	movw	r18, r24
    1b82:	2c 5f       	subi	r18, 0xFC	; 252
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <KEYPAD_getPressedKey+0x40>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	2a 95       	dec	r18
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <KEYPAD_getPressedKey+0x3c>
    1b94:	80 95       	com	r24
    1b96:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	69 81       	ldd	r22, Y+1	; 0x01
    1b9c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ba0:	1a 82       	std	Y+2, r1	; 0x02
    1ba2:	1c c0       	rjmp	.+56     	; 0x1bdc <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba8:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_readPin>
    1bac:	88 23       	and	r24, r24
    1bae:	99 f4       	brne	.+38     	; 0x1bd6 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	89 0f       	add	r24, r25
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	84 30       	cpi	r24, 0x04	; 4
    1be0:	08 f3       	brcs	.-62     	; 0x1ba4 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	84 30       	cpi	r24, 0x04	; 4
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <KEYPAD_getPressedKey+0xa0>
    1bee:	b9 cf       	rjmp	.-142    	; 0x1b62 <KEYPAD_getPressedKey+0x12>
    1bf0:	b6 cf       	rjmp	.-148    	; 0x1b5e <KEYPAD_getPressedKey+0xe>

00001bf2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <KEYPAD_4x4_adjustKeyNumber+0x8>
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c00:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	3c 83       	std	Y+4, r19	; 0x04
    1c0a:	2b 83       	std	Y+3, r18	; 0x03
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	91 05       	cpc	r25, r1
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c16:	70 c0       	rjmp	.+224    	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	29 30       	cpi	r18, 0x09	; 9
    1c1e:	31 05       	cpc	r19, r1
    1c20:	5c f5       	brge	.+86     	; 0x1c78 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	91 05       	cpc	r25, r1
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c2c:	59 c0       	rjmp	.+178    	; 0x1ce0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	3c 81       	ldd	r19, Y+4	; 0x04
    1c32:	25 30       	cpi	r18, 0x05	; 5
    1c34:	31 05       	cpc	r19, r1
    1c36:	9c f4       	brge	.+38     	; 0x1c5e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	91 05       	cpc	r25, r1
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c42:	48 c0       	rjmp	.+144    	; 0x1cd4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c44:	2b 81       	ldd	r18, Y+3	; 0x03
    1c46:	3c 81       	ldd	r19, Y+4	; 0x04
    1c48:	23 30       	cpi	r18, 0x03	; 3
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	0c f0       	brlt	.+2      	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c4e:	45 c0       	rjmp	.+138    	; 0x1cda <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c5a:	39 c0       	rjmp	.+114    	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c5c:	67 c0       	rjmp	.+206    	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c60:	3c 81       	ldd	r19, Y+4	; 0x04
    1c62:	26 30       	cpi	r18, 0x06	; 6
    1c64:	31 05       	cpc	r19, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c68:	41 c0       	rjmp	.+130    	; 0x1cec <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	87 30       	cpi	r24, 0x07	; 7
    1c70:	91 05       	cpc	r25, r1
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c74:	3e c0       	rjmp	.+124    	; 0x1cf2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c76:	37 c0       	rjmp	.+110    	; 0x1ce6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	2c 30       	cpi	r18, 0x0C	; 12
    1c7e:	31 05       	cpc	r19, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c82:	46 c0       	rjmp	.+140    	; 0x1d10 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	8d 30       	cpi	r24, 0x0D	; 13
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	5c f4       	brge	.+22     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	2a 30       	cpi	r18, 0x0A	; 10
    1c94:	31 05       	cpc	r19, r1
    1c96:	b1 f1       	breq	.+108    	; 0x1d04 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	8b 30       	cpi	r24, 0x0B	; 11
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	a4 f5       	brge	.+104    	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1ca2:	2d c0       	rjmp	.+90     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	2e 30       	cpi	r18, 0x0E	; 14
    1caa:	31 05       	cpc	r19, r1
    1cac:	b9 f1       	breq	.+110    	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	8e 30       	cpi	r24, 0x0E	; 14
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	7c f1       	brlt	.+94     	; 0x1d16 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cba:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbc:	2f 30       	cpi	r18, 0x0F	; 15
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	79 f1       	breq	.+94     	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	80 31       	cpi	r24, 0x10	; 16
    1cc8:	91 05       	cpc	r25, r1
    1cca:	69 f1       	breq	.+90     	; 0x1d26 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ccc:	2f c0       	rjmp	.+94     	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1cce:	87 e0       	ldi	r24, 0x07	; 7
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	2e c0       	rjmp	.+92     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cd4:	88 e0       	ldi	r24, 0x08	; 8
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	2b c0       	rjmp	.+86     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1cda:	89 e0       	ldi	r24, 0x09	; 9
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	28 c0       	rjmp	.+80     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ce0:	85 e2       	ldi	r24, 0x25	; 37
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	25 c0       	rjmp	.+74     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	22 c0       	rjmp	.+68     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	1f c0       	rjmp	.+62     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cf2:	86 e0       	ldi	r24, 0x06	; 6
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	1c c0       	rjmp	.+56     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1cf8:	8a e2       	ldi	r24, 0x2A	; 42
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	19 c0       	rjmp	.+50     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	16 c0       	rjmp	.+44     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	13 c0       	rjmp	.+38     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	10 c0       	rjmp	.+32     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d10:	8d e2       	ldi	r24, 0x2D	; 45
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d16:	8d e0       	ldi	r24, 0x0D	; 13
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	0a c0       	rjmp	.+20     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	08 c0       	rjmp	.+16     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d20:	8d e3       	ldi	r24, 0x3D	; 61
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d26:	8b e2       	ldi	r24, 0x2B	; 43
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1d52:	83 e0       	ldi	r24, 0x03	; 3
    1d54:	65 e0       	ldi	r22, 0x05	; 5
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	66 e0       	ldi	r22, 0x06	; 6
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	6f ef       	ldi	r22, 0xFF	; 255
    1d6a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1d6e:	88 e3       	ldi	r24, 0x38	; 56
    1d70:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d74:	8c e0       	ldi	r24, 0x0C	; 12
    1d76:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_sendCommand>
}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	e9 97       	sbiw	r28, 0x39	; 57
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	64 e0       	ldi	r22, 0x04	; 4
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	65 e0       	ldi	r22, 0x05	; 5
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 e8       	ldi	r26, 0x80	; 128
    1db6:	bf e3       	ldi	r27, 0x3F	; 63
    1db8:	8d ab       	std	Y+53, r24	; 0x35
    1dba:	9e ab       	std	Y+54, r25	; 0x36
    1dbc:	af ab       	std	Y+55, r26	; 0x37
    1dbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a ef       	ldi	r20, 0xFA	; 250
    1dce:	54 e4       	ldi	r21, 0x44	; 68
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	89 ab       	std	Y+49, r24	; 0x31
    1dda:	9a ab       	std	Y+50, r25	; 0x32
    1ddc:	ab ab       	std	Y+51, r26	; 0x33
    1dde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1de0:	69 a9       	ldd	r22, Y+49	; 0x31
    1de2:	7a a9       	ldd	r23, Y+50	; 0x32
    1de4:	8b a9       	ldd	r24, Y+51	; 0x33
    1de6:	9c a9       	ldd	r25, Y+52	; 0x34
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	98 ab       	std	Y+48, r25	; 0x30
    1dfe:	8f a7       	std	Y+47, r24	; 0x2f
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1e02:	69 a9       	ldd	r22, Y+49	; 0x31
    1e04:	7a a9       	ldd	r23, Y+50	; 0x32
    1e06:	8b a9       	ldd	r24, Y+51	; 0x33
    1e08:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e20:	98 ad       	ldd	r25, Y+56	; 0x38
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	98 ab       	std	Y+48, r25	; 0x30
    1e40:	8f a7       	std	Y+47, r24	; 0x2f
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <LCD_sendCommand+0xdc>
    1e44:	88 ec       	ldi	r24, 0xC8	; 200
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9e a7       	std	Y+46, r25	; 0x2e
    1e4a:	8d a7       	std	Y+45, r24	; 0x2d
    1e4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_sendCommand+0xca>
    1e54:	9e a7       	std	Y+46, r25	; 0x2e
    1e56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	98 ab       	std	Y+48, r25	; 0x30
    1e60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e64:	98 a9       	ldd	r25, Y+48	; 0x30
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <LCD_sendCommand+0xbe>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e70:	8b a9       	ldd	r24, Y+51	; 0x33
    1e72:	9c a9       	ldd	r25, Y+52	; 0x34
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	98 ab       	std	Y+48, r25	; 0x30
    1e7e:	8f a7       	std	Y+47, r24	; 0x2f
    1e80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e82:	98 a9       	ldd	r25, Y+48	; 0x30
    1e84:	9c a7       	std	Y+44, r25	; 0x2c
    1e86:	8b a7       	std	Y+43, r24	; 0x2b
    1e88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_sendCommand+0x106>
    1e90:	9c a7       	std	Y+44, r25	; 0x2c
    1e92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	66 e0       	ldi	r22, 0x06	; 6
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e8       	ldi	r26, 0x80	; 128
    1ea4:	bf e3       	ldi	r27, 0x3F	; 63
    1ea6:	8f a3       	std	Y+39, r24	; 0x27
    1ea8:	98 a7       	std	Y+40, r25	; 0x28
    1eaa:	a9 a7       	std	Y+41, r26	; 0x29
    1eac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8b a3       	std	Y+35, r24	; 0x23
    1ec8:	9c a3       	std	Y+36, r25	; 0x24
    1eca:	ad a3       	std	Y+37, r26	; 0x25
    1ecc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ece:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9a a3       	std	Y+34, r25	; 0x22
    1eec:	89 a3       	std	Y+33, r24	; 0x21
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1ef0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <LCD_sendCommand+0x1ca>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	98 a3       	std	Y+32, r25	; 0x20
    1f38:	8f 8f       	std	Y+31, r24	; 0x1f
    1f3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_sendCommand+0x1b8>
    1f42:	98 a3       	std	Y+32, r25	; 0x20
    1f44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	89 a1       	ldd	r24, Y+33	; 0x21
    1f48:	9a a1       	ldd	r25, Y+34	; 0x22
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <LCD_sendCommand+0x1ac>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f60:	9e a1       	ldd	r25, Y+38	; 0x26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9a a3       	std	Y+34, r25	; 0x22
    1f6c:	89 a3       	std	Y+33, r24	; 0x21
    1f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f70:	9a a1       	ldd	r25, Y+34	; 0x22
    1f72:	9e 8f       	std	Y+30, r25	; 0x1e
    1f74:	8d 8f       	std	Y+29, r24	; 0x1d
    1f76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_sendCommand+0x1f4>
    1f7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	69 ad       	ldd	r22, Y+57	; 0x39
    1f86:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <GPIO_writePort>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e8       	ldi	r26, 0x80	; 128
    1f90:	bf e3       	ldi	r27, 0x3F	; 63
    1f92:	89 8f       	std	Y+25, r24	; 0x19
    1f94:	9a 8f       	std	Y+26, r25	; 0x1a
    1f96:	ab 8f       	std	Y+27, r26	; 0x1b
    1f98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	8d 8b       	std	Y+21, r24	; 0x15
    1fb4:	9e 8b       	std	Y+22, r25	; 0x16
    1fb6:	af 8b       	std	Y+23, r26	; 0x17
    1fb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fba:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <LCD_sendCommand+0x256>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 8b       	std	Y+20, r25	; 0x14
    1fd8:	8b 8b       	std	Y+19, r24	; 0x13
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fde:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	57 e4       	ldi	r21, 0x47	; 71
    1fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	4c f5       	brge	.+82     	; 0x2046 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_sendCommand+0x2b6>
    201e:	88 ec       	ldi	r24, 0xC8	; 200
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9a 8b       	std	Y+18, r25	; 0x12
    2024:	89 8b       	std	Y+17, r24	; 0x11
    2026:	89 89       	ldd	r24, Y+17	; 0x11
    2028:	9a 89       	ldd	r25, Y+18	; 0x12
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_sendCommand+0x2a4>
    202e:	9a 8b       	std	Y+18, r25	; 0x12
    2030:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	8b 89       	ldd	r24, Y+19	; 0x13
    2034:	9c 89       	ldd	r25, Y+20	; 0x14
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	69 f7       	brne	.-38     	; 0x201e <LCD_sendCommand+0x298>
    2044:	14 c0       	rjmp	.+40     	; 0x206e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	6d 89       	ldd	r22, Y+21	; 0x15
    2048:	7e 89       	ldd	r23, Y+22	; 0x16
    204a:	8f 89       	ldd	r24, Y+23	; 0x17
    204c:	98 8d       	ldd	r25, Y+24	; 0x18
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9c 8b       	std	Y+20, r25	; 0x14
    2058:	8b 8b       	std	Y+19, r24	; 0x13
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	98 8b       	std	Y+16, r25	; 0x10
    2060:	8f 87       	std	Y+15, r24	; 0x0f
    2062:	8f 85       	ldd	r24, Y+15	; 0x0f
    2064:	98 89       	ldd	r25, Y+16	; 0x10
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_sendCommand+0x2e0>
    206a:	98 8b       	std	Y+16, r25	; 0x10
    206c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	66 e0       	ldi	r22, 0x06	; 6
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e8       	ldi	r26, 0x80	; 128
    207e:	bf e3       	ldi	r27, 0x3F	; 63
    2080:	8b 87       	std	Y+11, r24	; 0x0b
    2082:	9c 87       	std	Y+12, r25	; 0x0c
    2084:	ad 87       	std	Y+13, r26	; 0x0d
    2086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6b 85       	ldd	r22, Y+11	; 0x0b
    208a:	7c 85       	ldd	r23, Y+12	; 0x0c
    208c:	8d 85       	ldd	r24, Y+13	; 0x0d
    208e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8f 83       	std	Y+7, r24	; 0x07
    20a2:	98 87       	std	Y+8, r25	; 0x08
    20a4:	a9 87       	std	Y+9, r26	; 0x09
    20a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <LCD_sendCommand+0x344>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_sendCommand+0x3a4>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_sendCommand+0x392>
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <LCD_sendCommand+0x386>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_sendCommand+0x3ce>
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    215c:	e9 96       	adiw	r28, 0x39	; 57
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	e9 97       	sbiw	r28, 0x39	; 57
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	64 e0       	ldi	r22, 0x04	; 4
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	65 e0       	ldi	r22, 0x05	; 5
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a0 e8       	ldi	r26, 0x80	; 128
    219e:	bf e3       	ldi	r27, 0x3F	; 63
    21a0:	8d ab       	std	Y+53, r24	; 0x35
    21a2:	9e ab       	std	Y+54, r25	; 0x36
    21a4:	af ab       	std	Y+55, r26	; 0x37
    21a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	6d a9       	ldd	r22, Y+53	; 0x35
    21aa:	7e a9       	ldd	r23, Y+54	; 0x36
    21ac:	8f a9       	ldd	r24, Y+55	; 0x37
    21ae:	98 ad       	ldd	r25, Y+56	; 0x38
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a ef       	ldi	r20, 0xFA	; 250
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	89 ab       	std	Y+49, r24	; 0x31
    21c2:	9a ab       	std	Y+50, r25	; 0x32
    21c4:	ab ab       	std	Y+51, r26	; 0x33
    21c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21c8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ca:	7a a9       	ldd	r23, Y+50	; 0x32
    21cc:	8b a9       	ldd	r24, Y+51	; 0x33
    21ce:	9c a9       	ldd	r25, Y+52	; 0x34
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <LCD_displayCharacter+0x7c>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	98 ab       	std	Y+48, r25	; 0x30
    21e6:	8f a7       	std	Y+47, r24	; 0x2f
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	4c f5       	brge	.+82     	; 0x2254 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2202:	6d a9       	ldd	r22, Y+53	; 0x35
    2204:	7e a9       	ldd	r23, Y+54	; 0x36
    2206:	8f a9       	ldd	r24, Y+55	; 0x37
    2208:	98 ad       	ldd	r25, Y+56	; 0x38
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	98 ab       	std	Y+48, r25	; 0x30
    2228:	8f a7       	std	Y+47, r24	; 0x2f
    222a:	0f c0       	rjmp	.+30     	; 0x224a <LCD_displayCharacter+0xdc>
    222c:	88 ec       	ldi	r24, 0xC8	; 200
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9e a7       	std	Y+46, r25	; 0x2e
    2232:	8d a7       	std	Y+45, r24	; 0x2d
    2234:	8d a5       	ldd	r24, Y+45	; 0x2d
    2236:	9e a5       	ldd	r25, Y+46	; 0x2e
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_displayCharacter+0xca>
    223c:	9e a7       	std	Y+46, r25	; 0x2e
    223e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	8f a5       	ldd	r24, Y+47	; 0x2f
    2242:	98 a9       	ldd	r25, Y+48	; 0x30
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	98 ab       	std	Y+48, r25	; 0x30
    2248:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	8f a5       	ldd	r24, Y+47	; 0x2f
    224c:	98 a9       	ldd	r25, Y+48	; 0x30
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	69 f7       	brne	.-38     	; 0x222c <LCD_displayCharacter+0xbe>
    2252:	14 c0       	rjmp	.+40     	; 0x227c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	69 a9       	ldd	r22, Y+49	; 0x31
    2256:	7a a9       	ldd	r23, Y+50	; 0x32
    2258:	8b a9       	ldd	r24, Y+51	; 0x33
    225a:	9c a9       	ldd	r25, Y+52	; 0x34
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	98 ab       	std	Y+48, r25	; 0x30
    2266:	8f a7       	std	Y+47, r24	; 0x2f
    2268:	8f a5       	ldd	r24, Y+47	; 0x2f
    226a:	98 a9       	ldd	r25, Y+48	; 0x30
    226c:	9c a7       	std	Y+44, r25	; 0x2c
    226e:	8b a7       	std	Y+43, r24	; 0x2b
    2270:	8b a5       	ldd	r24, Y+43	; 0x2b
    2272:	9c a5       	ldd	r25, Y+44	; 0x2c
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_displayCharacter+0x106>
    2278:	9c a7       	std	Y+44, r25	; 0x2c
    227a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	66 e0       	ldi	r22, 0x06	; 6
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e8       	ldi	r26, 0x80	; 128
    228c:	bf e3       	ldi	r27, 0x3F	; 63
    228e:	8f a3       	std	Y+39, r24	; 0x27
    2290:	98 a7       	std	Y+40, r25	; 0x28
    2292:	a9 a7       	std	Y+41, r26	; 0x29
    2294:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2296:	6f a1       	ldd	r22, Y+39	; 0x27
    2298:	78 a5       	ldd	r23, Y+40	; 0x28
    229a:	89 a5       	ldd	r24, Y+41	; 0x29
    229c:	9a a5       	ldd	r25, Y+42	; 0x2a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a ef       	ldi	r20, 0xFA	; 250
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8b a3       	std	Y+35, r24	; 0x23
    22b0:	9c a3       	std	Y+36, r25	; 0x24
    22b2:	ad a3       	std	Y+37, r26	; 0x25
    22b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22b6:	6b a1       	ldd	r22, Y+35	; 0x23
    22b8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ba:	8d a1       	ldd	r24, Y+37	; 0x25
    22bc:	9e a1       	ldd	r25, Y+38	; 0x26
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9a a3       	std	Y+34, r25	; 0x22
    22d4:	89 a3       	std	Y+33, r24	; 0x21
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    22d8:	6b a1       	ldd	r22, Y+35	; 0x23
    22da:	7c a1       	ldd	r23, Y+36	; 0x24
    22dc:	8d a1       	ldd	r24, Y+37	; 0x25
    22de:	9e a1       	ldd	r25, Y+38	; 0x26
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	4f e7       	ldi	r20, 0x7F	; 127
    22e6:	57 e4       	ldi	r21, 0x47	; 71
    22e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ec:	18 16       	cp	r1, r24
    22ee:	4c f5       	brge	.+82     	; 0x2342 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	6f a1       	ldd	r22, Y+39	; 0x27
    22f2:	78 a5       	ldd	r23, Y+40	; 0x28
    22f4:	89 a5       	ldd	r24, Y+41	; 0x29
    22f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9a a3       	std	Y+34, r25	; 0x22
    2316:	89 a3       	std	Y+33, r24	; 0x21
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <LCD_displayCharacter+0x1ca>
    231a:	88 ec       	ldi	r24, 0xC8	; 200
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	98 a3       	std	Y+32, r25	; 0x20
    2320:	8f 8f       	std	Y+31, r24	; 0x1f
    2322:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2324:	98 a1       	ldd	r25, Y+32	; 0x20
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_displayCharacter+0x1b8>
    232a:	98 a3       	std	Y+32, r25	; 0x20
    232c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232e:	89 a1       	ldd	r24, Y+33	; 0x21
    2330:	9a a1       	ldd	r25, Y+34	; 0x22
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	9a a3       	std	Y+34, r25	; 0x22
    2336:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	89 a1       	ldd	r24, Y+33	; 0x21
    233a:	9a a1       	ldd	r25, Y+34	; 0x22
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	69 f7       	brne	.-38     	; 0x231a <LCD_displayCharacter+0x1ac>
    2340:	14 c0       	rjmp	.+40     	; 0x236a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	6b a1       	ldd	r22, Y+35	; 0x23
    2344:	7c a1       	ldd	r23, Y+36	; 0x24
    2346:	8d a1       	ldd	r24, Y+37	; 0x25
    2348:	9e a1       	ldd	r25, Y+38	; 0x26
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	89 a1       	ldd	r24, Y+33	; 0x21
    2358:	9a a1       	ldd	r25, Y+34	; 0x22
    235a:	9e 8f       	std	Y+30, r25	; 0x1e
    235c:	8d 8f       	std	Y+29, r24	; 0x1d
    235e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2360:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_displayCharacter+0x1f4>
    2366:	9e 8f       	std	Y+30, r25	; 0x1e
    2368:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	69 ad       	ldd	r22, Y+57	; 0x39
    236e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <GPIO_writePort>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e8       	ldi	r26, 0x80	; 128
    2378:	bf e3       	ldi	r27, 0x3F	; 63
    237a:	89 8f       	std	Y+25, r24	; 0x19
    237c:	9a 8f       	std	Y+26, r25	; 0x1a
    237e:	ab 8f       	std	Y+27, r26	; 0x1b
    2380:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a ef       	ldi	r20, 0xFA	; 250
    2390:	54 e4       	ldi	r21, 0x44	; 68
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8d 8b       	std	Y+21, r24	; 0x15
    239c:	9e 8b       	std	Y+22, r25	; 0x16
    239e:	af 8b       	std	Y+23, r26	; 0x17
    23a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9c 8b       	std	Y+20, r25	; 0x14
    23c0:	8b 8b       	std	Y+19, r24	; 0x13
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    23c4:	6d 89       	ldd	r22, Y+21	; 0x15
    23c6:	7e 89       	ldd	r23, Y+22	; 0x16
    23c8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ca:	98 8d       	ldd	r25, Y+24	; 0x18
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	69 8d       	ldd	r22, Y+25	; 0x19
    23de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9c 8b       	std	Y+20, r25	; 0x14
    2402:	8b 8b       	std	Y+19, r24	; 0x13
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <LCD_displayCharacter+0x2b6>
    2406:	88 ec       	ldi	r24, 0xC8	; 200
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9a 8b       	std	Y+18, r25	; 0x12
    240c:	89 8b       	std	Y+17, r24	; 0x11
    240e:	89 89       	ldd	r24, Y+17	; 0x11
    2410:	9a 89       	ldd	r25, Y+18	; 0x12
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <LCD_displayCharacter+0x2a4>
    2416:	9a 8b       	std	Y+18, r25	; 0x12
    2418:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	8b 89       	ldd	r24, Y+19	; 0x13
    241c:	9c 89       	ldd	r25, Y+20	; 0x14
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	8b 89       	ldd	r24, Y+19	; 0x13
    2426:	9c 89       	ldd	r25, Y+20	; 0x14
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <LCD_displayCharacter+0x298>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	6d 89       	ldd	r22, Y+21	; 0x15
    2430:	7e 89       	ldd	r23, Y+22	; 0x16
    2432:	8f 89       	ldd	r24, Y+23	; 0x17
    2434:	98 8d       	ldd	r25, Y+24	; 0x18
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	98 8b       	std	Y+16, r25	; 0x10
    2448:	8f 87       	std	Y+15, r24	; 0x0f
    244a:	8f 85       	ldd	r24, Y+15	; 0x0f
    244c:	98 89       	ldd	r25, Y+16	; 0x10
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_displayCharacter+0x2e0>
    2452:	98 8b       	std	Y+16, r25	; 0x10
    2454:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	66 e0       	ldi	r22, 0x06	; 6
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_writePin>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e8       	ldi	r26, 0x80	; 128
    2466:	bf e3       	ldi	r27, 0x3F	; 63
    2468:	8b 87       	std	Y+11, r24	; 0x0b
    246a:	9c 87       	std	Y+12, r25	; 0x0c
    246c:	ad 87       	std	Y+13, r26	; 0x0d
    246e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a ef       	ldi	r20, 0xFA	; 250
    247e:	54 e4       	ldi	r21, 0x44	; 68
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	8f 83       	std	Y+7, r24	; 0x07
    248a:	98 87       	std	Y+8, r25	; 0x08
    248c:	a9 87       	std	Y+9, r26	; 0x09
    248e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	4c f5       	brge	.+82     	; 0x251c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    24cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <LCD_displayCharacter+0x3a4>
    24f4:	88 ec       	ldi	r24, 0xC8	; 200
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LCD_displayCharacter+0x392>
    2504:	9c 83       	std	Y+4, r25	; 0x04
    2506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f7       	brne	.-38     	; 0x24f4 <LCD_displayCharacter+0x386>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_displayCharacter+0x3ce>
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2544:	e9 96       	adiw	r28, 0x39	; 57
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <LCD_displayString+0x6>
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9b 83       	std	Y+3, r25	; 0x03
    2564:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2566:	19 82       	std	Y+1, r1	; 0x01
    2568:	0e c0       	rjmp	.+28     	; 0x2586 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	fc 01       	movw	r30, r24
    2576:	e2 0f       	add	r30, r18
    2578:	f3 1f       	adc	r31, r19
    257a:	80 81       	ld	r24, Z
    257c:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_displayCharacter>
		i++;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	8f 5f       	subi	r24, 0xFF	; 255
    2584:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	9b 81       	ldd	r25, Y+3	; 0x03
    2590:	fc 01       	movw	r30, r24
    2592:	e2 0f       	add	r30, r18
    2594:	f3 1f       	adc	r31, r19
    2596:	80 81       	ld	r24, Z
    2598:	88 23       	and	r24, r24
    259a:	39 f7       	brne	.-50     	; 0x256a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <LCD_moveCursor+0x6>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <LCD_moveCursor+0x8>
    25b0:	0f 92       	push	r0
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	8a 83       	std	Y+2, r24	; 0x02
    25b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	3d 83       	std	Y+5, r19	; 0x05
    25c2:	2c 83       	std	Y+4, r18	; 0x04
    25c4:	8c 81       	ldd	r24, Y+4	; 0x04
    25c6:	9d 81       	ldd	r25, Y+5	; 0x05
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	91 05       	cpc	r25, r1
    25cc:	c1 f0       	breq	.+48     	; 0x25fe <LCD_moveCursor+0x56>
    25ce:	2c 81       	ldd	r18, Y+4	; 0x04
    25d0:	3d 81       	ldd	r19, Y+5	; 0x05
    25d2:	22 30       	cpi	r18, 0x02	; 2
    25d4:	31 05       	cpc	r19, r1
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <LCD_moveCursor+0x3a>
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	9d 81       	ldd	r25, Y+5	; 0x05
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	61 f0       	breq	.+24     	; 0x25f8 <LCD_moveCursor+0x50>
    25e0:	19 c0       	rjmp	.+50     	; 0x2614 <LCD_moveCursor+0x6c>
    25e2:	2c 81       	ldd	r18, Y+4	; 0x04
    25e4:	3d 81       	ldd	r19, Y+5	; 0x05
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	31 05       	cpc	r19, r1
    25ea:	69 f0       	breq	.+26     	; 0x2606 <LCD_moveCursor+0x5e>
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	9d 81       	ldd	r25, Y+5	; 0x05
    25f0:	83 30       	cpi	r24, 0x03	; 3
    25f2:	91 05       	cpc	r25, r1
    25f4:	61 f0       	breq	.+24     	; 0x260e <LCD_moveCursor+0x66>
    25f6:	0e c0       	rjmp	.+28     	; 0x2614 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	0b c0       	rjmp	.+22     	; 0x2614 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	80 5c       	subi	r24, 0xC0	; 192
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	07 c0       	rjmp	.+14     	; 0x2614 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	80 5f       	subi	r24, 0xF0	; 240
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	03 c0       	rjmp	.+6      	; 0x2614 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	80 5b       	subi	r24, 0xB0	; 176
    2612:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	80 68       	ori	r24, 0x80	; 128
    2618:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_sendCommand>
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <LCD_displayStringRowColumn+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_displayStringRowColumn+0x8>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	6a 83       	std	Y+2, r22	; 0x02
    263c:	5c 83       	std	Y+4, r21	; 0x04
    263e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	6a 81       	ldd	r22, Y+2	; 0x02
    2644:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	62 97       	sbiw	r28, 0x12	; 18
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	9a 8b       	std	Y+18, r25	; 0x12
    2674:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2676:	89 89       	ldd	r24, Y+17	; 0x11
    2678:	9a 89       	ldd	r25, Y+18	; 0x12
    267a:	9e 01       	movw	r18, r28
    267c:	2f 5f       	subi	r18, 0xFF	; 255
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	b9 01       	movw	r22, r18
    2682:	4a e0       	ldi	r20, 0x0A	; 10
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <itoa>
   LCD_displayString(buff); /* Display the string */
    268a:	ce 01       	movw	r24, r28
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
}
    2692:	62 96       	adiw	r28, 0x12	; 18
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_sendCommand>
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <main>:
 *      Author: Doha Eid
 ***********************************************************************************************************/

#include "app.h"

int main(void) {
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	c4 55       	subi	r28, 0x54	; 84
    26c6:	d0 40       	sbci	r29, 0x00	; 0
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61

	/*Initialize the LCD */
	LCD_init();
    26d2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <LCD_init>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_Config uart_ptr = { 9600, bit_8, disable, bit_1 };
    26d6:	ce 01       	movw	r24, r28
    26d8:	89 5b       	subi	r24, 0xB9	; 185
    26da:	9f 4f       	sbci	r25, 0xFF	; 255
    26dc:	62 96       	adiw	r28, 0x12	; 18
    26de:	9f af       	std	Y+63, r25	; 0x3f
    26e0:	8e af       	std	Y+62, r24	; 0x3e
    26e2:	62 97       	sbiw	r28, 0x12	; 18
    26e4:	2b e8       	ldi	r18, 0x8B	; 139
    26e6:	31 e0       	ldi	r19, 0x01	; 1
    26e8:	64 96       	adiw	r28, 0x14	; 20
    26ea:	3f af       	std	Y+63, r19	; 0x3f
    26ec:	2e af       	std	Y+62, r18	; 0x3e
    26ee:	64 97       	sbiw	r28, 0x14	; 20
    26f0:	37 e0       	ldi	r19, 0x07	; 7
    26f2:	65 96       	adiw	r28, 0x15	; 21
    26f4:	3f af       	std	Y+63, r19	; 0x3f
    26f6:	65 97       	sbiw	r28, 0x15	; 21
    26f8:	64 96       	adiw	r28, 0x14	; 20
    26fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    26fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    26fe:	64 97       	sbiw	r28, 0x14	; 20
    2700:	00 80       	ld	r0, Z
    2702:	64 96       	adiw	r28, 0x14	; 20
    2704:	2e ad       	ldd	r18, Y+62	; 0x3e
    2706:	3f ad       	ldd	r19, Y+63	; 0x3f
    2708:	64 97       	sbiw	r28, 0x14	; 20
    270a:	2f 5f       	subi	r18, 0xFF	; 255
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	64 96       	adiw	r28, 0x14	; 20
    2710:	3f af       	std	Y+63, r19	; 0x3f
    2712:	2e af       	std	Y+62, r18	; 0x3e
    2714:	64 97       	sbiw	r28, 0x14	; 20
    2716:	62 96       	adiw	r28, 0x12	; 18
    2718:	ee ad       	ldd	r30, Y+62	; 0x3e
    271a:	ff ad       	ldd	r31, Y+63	; 0x3f
    271c:	62 97       	sbiw	r28, 0x12	; 18
    271e:	00 82       	st	Z, r0
    2720:	62 96       	adiw	r28, 0x12	; 18
    2722:	2e ad       	ldd	r18, Y+62	; 0x3e
    2724:	3f ad       	ldd	r19, Y+63	; 0x3f
    2726:	62 97       	sbiw	r28, 0x12	; 18
    2728:	2f 5f       	subi	r18, 0xFF	; 255
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	62 96       	adiw	r28, 0x12	; 18
    272e:	3f af       	std	Y+63, r19	; 0x3f
    2730:	2e af       	std	Y+62, r18	; 0x3e
    2732:	62 97       	sbiw	r28, 0x12	; 18
    2734:	65 96       	adiw	r28, 0x15	; 21
    2736:	3f ad       	ldd	r19, Y+63	; 0x3f
    2738:	65 97       	sbiw	r28, 0x15	; 21
    273a:	31 50       	subi	r19, 0x01	; 1
    273c:	65 96       	adiw	r28, 0x15	; 21
    273e:	3f af       	std	Y+63, r19	; 0x3f
    2740:	65 97       	sbiw	r28, 0x15	; 21
    2742:	65 96       	adiw	r28, 0x15	; 21
    2744:	8f ad       	ldd	r24, Y+63	; 0x3f
    2746:	65 97       	sbiw	r28, 0x15	; 21
    2748:	88 23       	and	r24, r24
    274a:	b1 f6       	brne	.-84     	; 0x26f8 <main+0x40>
	UART_init(&uart_ptr);
    274c:	ce 01       	movw	r24, r28
    274e:	89 5b       	subi	r24, 0xB9	; 185
    2750:	9f 4f       	sbci	r25, 0xFF	; 255
    2752:	0e 94 16 1a 	call	0x342c	; 0x342c <UART_init>
	/*Initialize timer driver */
	Timer0_setCallBack(timer_count);
    2756:	83 ea       	ldi	r24, 0xA3	; 163
    2758:	95 e0       	ldi	r25, 0x05	; 5
    275a:	0e 94 0b 18 	call	0x3016	; 0x3016 <Timer0_setCallBack>
	/*open pin of global interrupt the I-bit*/
	SREG |= (1 << 7);
    275e:	af e5       	ldi	r26, 0x5F	; 95
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ef e5       	ldi	r30, 0x5F	; 95
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	80 68       	ori	r24, 0x80	; 128
    276a:	8c 93       	st	X, r24
	/*Display on the lcd welcome for 5 seconds and then display the list */
	LCD_displayString("Welcome");
    276c:	84 e3       	ldi	r24, 0x34	; 52
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    2774:	fe 01       	movw	r30, r28
    2776:	ed 5b       	subi	r30, 0xBD	; 189
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	aa ef       	ldi	r26, 0xFA	; 250
    2780:	b3 e4       	ldi	r27, 0x43	; 67
    2782:	80 83       	st	Z, r24
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	a2 83       	std	Z+2, r26	; 0x02
    2788:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	8e 01       	movw	r16, r28
    278c:	01 5c       	subi	r16, 0xC1	; 193
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	fe 01       	movw	r30, r28
    2792:	ed 5b       	subi	r30, 0xBD	; 189
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a ef       	ldi	r20, 0xFA	; 250
    27a4:	54 e4       	ldi	r21, 0x44	; 68
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	f8 01       	movw	r30, r16
    27b0:	80 83       	st	Z, r24
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	a2 83       	std	Z+2, r26	; 0x02
    27b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b8:	fe 01       	movw	r30, r28
    27ba:	ff 96       	adiw	r30, 0x3f	; 63
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	2c f4       	brge	.+10     	; 0x27de <main+0x126>
		__ticks = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9e af       	std	Y+62, r25	; 0x3e
    27da:	8d af       	std	Y+61, r24	; 0x3d
    27dc:	46 c0       	rjmp	.+140    	; 0x286a <main+0x1b2>
	else if (__tmp > 65535)
    27de:	fe 01       	movw	r30, r28
    27e0:	ff 96       	adiw	r30, 0x3f	; 63
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	3f ef       	ldi	r19, 0xFF	; 255
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	57 e4       	ldi	r21, 0x47	; 71
    27f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	64 f5       	brge	.+88     	; 0x2852 <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fa:	fe 01       	movw	r30, r28
    27fc:	ed 5b       	subi	r30, 0xBD	; 189
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	60 81       	ld	r22, Z
    2802:	71 81       	ldd	r23, Z+1	; 0x01
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e af       	std	Y+62, r25	; 0x3e
    2826:	8d af       	std	Y+61, r24	; 0x3d
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <main+0x190>
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9c af       	std	Y+60, r25	; 0x3c
    2830:	8b af       	std	Y+59, r24	; 0x3b
    2832:	8b ad       	ldd	r24, Y+59	; 0x3b
    2834:	9c ad       	ldd	r25, Y+60	; 0x3c
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <main+0x17e>
    283a:	9c af       	std	Y+60, r25	; 0x3c
    283c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2840:	9e ad       	ldd	r25, Y+62	; 0x3e
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9e af       	std	Y+62, r25	; 0x3e
    2846:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8d ad       	ldd	r24, Y+61	; 0x3d
    284a:	9e ad       	ldd	r25, Y+62	; 0x3e
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <main+0x172>
    2850:	16 c0       	rjmp	.+44     	; 0x287e <main+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	fe 01       	movw	r30, r28
    2854:	ff 96       	adiw	r30, 0x3f	; 63
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e af       	std	Y+62, r25	; 0x3e
    2868:	8d af       	std	Y+61, r24	; 0x3d
    286a:	8d ad       	ldd	r24, Y+61	; 0x3d
    286c:	9e ad       	ldd	r25, Y+62	; 0x3e
    286e:	9a af       	std	Y+58, r25	; 0x3a
    2870:	89 af       	std	Y+57, r24	; 0x39
    2872:	89 ad       	ldd	r24, Y+57	; 0x39
    2874:	9a ad       	ldd	r25, Y+58	; 0x3a
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <main+0x1be>
    287a:	9a af       	std	Y+58, r25	; 0x3a
    287c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	LCD_clearScreen();
    287e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
	/*Go to step 0*/
	g_step = 0;
    2882:	10 92 99 01 	sts	0x0199, r1
	while (1) {
		switch (g_step) {
    2886:	80 91 99 01 	lds	r24, 0x0199
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	60 96       	adiw	r28, 0x10	; 16
    2890:	3f af       	std	Y+63, r19	; 0x3f
    2892:	2e af       	std	Y+62, r18	; 0x3e
    2894:	60 97       	sbiw	r28, 0x10	; 16
    2896:	60 96       	adiw	r28, 0x10	; 16
    2898:	8e ad       	ldd	r24, Y+62	; 0x3e
    289a:	9f ad       	ldd	r25, Y+63	; 0x3f
    289c:	60 97       	sbiw	r28, 0x10	; 16
    289e:	82 30       	cpi	r24, 0x02	; 2
    28a0:	91 05       	cpc	r25, r1
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <main+0x1ee>
    28a4:	b3 c1       	rjmp	.+870    	; 0x2c0c <main+0x554>
    28a6:	60 96       	adiw	r28, 0x10	; 16
    28a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    28aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    28ac:	60 97       	sbiw	r28, 0x10	; 16
    28ae:	e3 30       	cpi	r30, 0x03	; 3
    28b0:	f1 05       	cpc	r31, r1
    28b2:	84 f4       	brge	.+32     	; 0x28d4 <main+0x21c>
    28b4:	60 96       	adiw	r28, 0x10	; 16
    28b6:	2e ad       	ldd	r18, Y+62	; 0x3e
    28b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    28ba:	60 97       	sbiw	r28, 0x10	; 16
    28bc:	21 15       	cp	r18, r1
    28be:	31 05       	cpc	r19, r1
    28c0:	11 f1       	breq	.+68     	; 0x2906 <main+0x24e>
    28c2:	60 96       	adiw	r28, 0x10	; 16
    28c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    28c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    28c8:	60 97       	sbiw	r28, 0x10	; 16
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	91 05       	cpc	r25, r1
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <main+0x21a>
    28d0:	a1 c0       	rjmp	.+322    	; 0x2a14 <main+0x35c>
    28d2:	d9 cf       	rjmp	.-78     	; 0x2886 <main+0x1ce>
    28d4:	60 96       	adiw	r28, 0x10	; 16
    28d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    28d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    28da:	60 97       	sbiw	r28, 0x10	; 16
    28dc:	e4 30       	cpi	r30, 0x04	; 4
    28de:	f1 05       	cpc	r31, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <main+0x22c>
    28e2:	bb c1       	rjmp	.+886    	; 0x2c5a <main+0x5a2>
    28e4:	60 96       	adiw	r28, 0x10	; 16
    28e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    28e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    28ea:	60 97       	sbiw	r28, 0x10	; 16
    28ec:	24 30       	cpi	r18, 0x04	; 4
    28ee:	31 05       	cpc	r19, r1
    28f0:	0c f4       	brge	.+2      	; 0x28f4 <main+0x23c>
    28f2:	8f c1       	rjmp	.+798    	; 0x2c12 <main+0x55a>
    28f4:	60 96       	adiw	r28, 0x10	; 16
    28f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    28f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    28fa:	60 97       	sbiw	r28, 0x10	; 16
    28fc:	85 30       	cpi	r24, 0x05	; 5
    28fe:	91 05       	cpc	r25, r1
    2900:	09 f4       	brne	.+2      	; 0x2904 <main+0x24c>
    2902:	51 c2       	rjmp	.+1186   	; 0x2da6 <main+0x6ee>
    2904:	c0 cf       	rjmp	.-128    	; 0x2886 <main+0x1ce>
		 * At step 0 enter the pass twice to save the the pass in eeprom to open the system
		 *and press on = to send the pass by UART
		 */
		case 0:

			Enter_Password();
    2906:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Enter_Password>
			/*checking if the password matched then go to step 1
			 * if unmatched repeat this step again
			 */
			if (checking_value == 1) {
    290a:	80 91 9a 01 	lds	r24, 0x019A
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	21 f4       	brne	.+8      	; 0x291a <main+0x262>
				g_step = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	80 93 99 01 	sts	0x0199, r24
    2918:	7a c0       	rjmp	.+244    	; 0x2a0e <main+0x356>
			} else {
				LCD_displayString("Unmatched");
    291a:	8c e3       	ldi	r24, 0x3C	; 60
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	aa e7       	ldi	r26, 0x7A	; 122
    2928:	b4 e4       	ldi	r27, 0x44	; 68
    292a:	8d ab       	std	Y+53, r24	; 0x35
    292c:	9e ab       	std	Y+54, r25	; 0x36
    292e:	af ab       	std	Y+55, r26	; 0x37
    2930:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6d a9       	ldd	r22, Y+53	; 0x35
    2934:	7e a9       	ldd	r23, Y+54	; 0x36
    2936:	8f a9       	ldd	r24, Y+55	; 0x37
    2938:	98 ad       	ldd	r25, Y+56	; 0x38
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a ef       	ldi	r20, 0xFA	; 250
    2940:	54 e4       	ldi	r21, 0x44	; 68
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	89 ab       	std	Y+49, r24	; 0x31
    294c:	9a ab       	std	Y+50, r25	; 0x32
    294e:	ab ab       	std	Y+51, r26	; 0x33
    2950:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2952:	69 a9       	ldd	r22, Y+49	; 0x31
    2954:	7a a9       	ldd	r23, Y+50	; 0x32
    2956:	8b a9       	ldd	r24, Y+51	; 0x33
    2958:	9c a9       	ldd	r25, Y+52	; 0x34
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <main+0x2bc>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	98 ab       	std	Y+48, r25	; 0x30
    2970:	8f a7       	std	Y+47, r24	; 0x2f
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <main+0x33a>
	else if (__tmp > 65535)
    2974:	69 a9       	ldd	r22, Y+49	; 0x31
    2976:	7a a9       	ldd	r23, Y+50	; 0x32
    2978:	8b a9       	ldd	r24, Y+51	; 0x33
    297a:	9c a9       	ldd	r25, Y+52	; 0x34
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <main+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6d a9       	ldd	r22, Y+53	; 0x35
    298e:	7e a9       	ldd	r23, Y+54	; 0x36
    2990:	8f a9       	ldd	r24, Y+55	; 0x37
    2992:	98 ad       	ldd	r25, Y+56	; 0x38
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	98 ab       	std	Y+48, r25	; 0x30
    29b2:	8f a7       	std	Y+47, r24	; 0x2f
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <main+0x31c>
    29b6:	88 ec       	ldi	r24, 0xC8	; 200
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9e a7       	std	Y+46, r25	; 0x2e
    29bc:	8d a7       	std	Y+45, r24	; 0x2d
    29be:	8d a5       	ldd	r24, Y+45	; 0x2d
    29c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <main+0x30a>
    29c6:	9e a7       	std	Y+46, r25	; 0x2e
    29c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    29cc:	98 a9       	ldd	r25, Y+48	; 0x30
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	98 ab       	std	Y+48, r25	; 0x30
    29d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d6:	98 a9       	ldd	r25, Y+48	; 0x30
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <main+0x2fe>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <main+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	69 a9       	ldd	r22, Y+49	; 0x31
    29e0:	7a a9       	ldd	r23, Y+50	; 0x32
    29e2:	8b a9       	ldd	r24, Y+51	; 0x33
    29e4:	9c a9       	ldd	r25, Y+52	; 0x34
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
    29f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f4:	98 a9       	ldd	r25, Y+48	; 0x30
    29f6:	9c a7       	std	Y+44, r25	; 0x2c
    29f8:	8b a7       	std	Y+43, r24	; 0x2b
    29fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    29fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <main+0x346>
    2a02:	9c a7       	std	Y+44, r25	; 0x2c
    2a04:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				LCD_clearScreen();
    2a06:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
				g_step = 0;
    2a0a:	10 92 99 01 	sts	0x0199, r1
			}
			LCD_clearScreen();
    2a0e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
    2a12:	39 cf       	rjmp	.-398    	; 0x2886 <main+0x1ce>
			 * if matched display matched
			 * and go to case 2
			 */
		case 1:

			LCD_displayString("matched!");
    2a14:	86 e4       	ldi	r24, 0x46	; 70
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	aa ef       	ldi	r26, 0xFA	; 250
    2a22:	b3 e4       	ldi	r27, 0x43	; 67
    2a24:	8f a3       	std	Y+39, r24	; 0x27
    2a26:	98 a7       	std	Y+40, r25	; 0x28
    2a28:	a9 a7       	std	Y+41, r26	; 0x29
    2a2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a30:	89 a5       	ldd	r24, Y+41	; 0x29
    2a32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8b a3       	std	Y+35, r24	; 0x23
    2a46:	9c a3       	std	Y+36, r25	; 0x24
    2a48:	ad a3       	std	Y+37, r26	; 0x25
    2a4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a50:	8d a1       	ldd	r24, Y+37	; 0x25
    2a52:	9e a1       	ldd	r25, Y+38	; 0x26
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <main+0x3b6>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9a a3       	std	Y+34, r25	; 0x22
    2a6a:	89 a3       	std	Y+33, r24	; 0x21
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <main+0x434>
	else if (__tmp > 65535)
    2a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a70:	7c a1       	ldd	r23, Y+36	; 0x24
    2a72:	8d a1       	ldd	r24, Y+37	; 0x25
    2a74:	9e a1       	ldd	r25, Y+38	; 0x26
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <main+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	6f a1       	ldd	r22, Y+39	; 0x27
    2a88:	78 a5       	ldd	r23, Y+40	; 0x28
    2a8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9a a3       	std	Y+34, r25	; 0x22
    2aac:	89 a3       	std	Y+33, r24	; 0x21
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <main+0x416>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	98 a3       	std	Y+32, r25	; 0x20
    2ab6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aba:	98 a1       	ldd	r25, Y+32	; 0x20
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <main+0x404>
    2ac0:	98 a3       	std	Y+32, r25	; 0x20
    2ac2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9a a3       	std	Y+34, r25	; 0x22
    2acc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <main+0x3f8>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <main+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    2ada:	7c a1       	ldd	r23, Y+36	; 0x24
    2adc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ade:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9a a3       	std	Y+34, r25	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
    2aec:	89 a1       	ldd	r24, Y+33	; 0x21
    2aee:	9a a1       	ldd	r25, Y+34	; 0x22
    2af0:	9e 8f       	std	Y+30, r25	; 0x1e
    2af2:	8d 8f       	std	Y+29, r24	; 0x1d
    2af4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <main+0x440>
    2afc:	9e 8f       	std	Y+30, r25	; 0x1e
    2afe:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			LCD_moveCursor(1, 0);
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			send_Pass_ToMcu2();
    2b08:	0e 94 75 07 	call	0xeea	; 0xeea <send_Pass_ToMcu2>
			LCD_clearScreen();
    2b0c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
			LCD_moveCursor(1, 0);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			LCD_displayString("pass saved!");
    2b18:	8f e4       	ldi	r24, 0x4F	; 79
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	aa ef       	ldi	r26, 0xFA	; 250
    2b26:	b3 e4       	ldi	r27, 0x43	; 67
    2b28:	89 8f       	std	Y+25, r24	; 0x19
    2b2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	69 8d       	ldd	r22, Y+25	; 0x19
    2b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a ef       	ldi	r20, 0xFA	; 250
    2b3e:	54 e4       	ldi	r21, 0x44	; 68
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8d 8b       	std	Y+21, r24	; 0x15
    2b4a:	9e 8b       	std	Y+22, r25	; 0x16
    2b4c:	af 8b       	std	Y+23, r26	; 0x17
    2b4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <main+0x4ba>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9c 8b       	std	Y+20, r25	; 0x14
    2b6e:	8b 8b       	std	Y+19, r24	; 0x13
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <main+0x538>
	else if (__tmp > 65535)
    2b72:	6d 89       	ldd	r22, Y+21	; 0x15
    2b74:	7e 89       	ldd	r23, Y+22	; 0x16
    2b76:	8f 89       	ldd	r24, Y+23	; 0x17
    2b78:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	4c f5       	brge	.+82     	; 0x2bdc <main+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9c 8b       	std	Y+20, r25	; 0x14
    2bb0:	8b 8b       	std	Y+19, r24	; 0x13
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <main+0x51a>
    2bb4:	88 ec       	ldi	r24, 0xC8	; 200
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9a 8b       	std	Y+18, r25	; 0x12
    2bba:	89 8b       	std	Y+17, r24	; 0x11
    2bbc:	89 89       	ldd	r24, Y+17	; 0x11
    2bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <main+0x508>
    2bc4:	9a 8b       	std	Y+18, r25	; 0x12
    2bc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bca:	9c 89       	ldd	r25, Y+20	; 0x14
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9c 8b       	std	Y+20, r25	; 0x14
    2bd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <main+0x4fc>
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <main+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bde:	7e 89       	ldd	r23, Y+22	; 0x16
    2be0:	8f 89       	ldd	r24, Y+23	; 0x17
    2be2:	98 8d       	ldd	r25, Y+24	; 0x18
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9c 8b       	std	Y+20, r25	; 0x14
    2bee:	8b 8b       	std	Y+19, r24	; 0x13
    2bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf4:	98 8b       	std	Y+16, r25	; 0x10
    2bf6:	8f 87       	std	Y+15, r24	; 0x0f
    2bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfa:	98 89       	ldd	r25, Y+16	; 0x10
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <main+0x544>
    2c00:	98 8b       	std	Y+16, r25	; 0x10
    2c02:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			g_step = 2;
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	80 93 99 01 	sts	0x0199, r24
    2c0a:	3d ce       	rjmp	.-902    	; 0x2886 <main+0x1ce>
			 * This case to decide what the user need
			 * *.open the door
			 * -.change the password
			 */
		case 2:
			main_List();
    2c0c:	0e 94 01 09 	call	0x1202	; 0x1202 <main_List>
    2c10:	3a ce       	rjmp	.-908    	; 0x2886 <main+0x1ce>
			 * and wait 3 seconds and close the door and rotate the DC_motor Anti clock wise for 15 seconds }
			 * if the password unmatched their is 3 attempts to enter the correct and if the user does not
			 * enter the correct one the buzzer will turn on for 60 seconds and
			 */
		case 3:
			LCD_displayString("Enter password");
    2c12:	8b e5       	ldi	r24, 0x5B	; 91
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
			LCD_moveCursor(1, 0);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	60 e0       	ldi	r22, 0x00	; 0
    2c1e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			enter_saved_pass();
    2c22:	0e 94 48 08 	call	0x1090	; 0x1090 <enter_saved_pass>
			LCD_moveCursor(1, 0);
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	60 e0       	ldi	r22, 0x00	; 0
    2c2a:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			send_Pass_ToMcu2();
    2c2e:	0e 94 75 07 	call	0xeea	; 0xeea <send_Pass_ToMcu2>
			LCD_clearScreen();
    2c32:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
			checker = UART_recieveByte();
    2c36:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_recieveByte>
    2c3a:	80 93 9c 01 	sts	0x019C, r24
			check_Pass(checker);
    2c3e:	80 91 9c 01 	lds	r24, 0x019C
    2c42:	0e 94 24 09 	call	0x1248	; 0x1248 <check_Pass>
			if(do_case)
    2c46:	80 91 9d 01 	lds	r24, 0x019D
    2c4a:	88 23       	and	r24, r24
    2c4c:	11 f0       	breq	.+4      	; 0x2c52 <main+0x59a>
			matched_State();
    2c4e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <matched_State>
			g_step=2;
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	80 93 99 01 	sts	0x0199, r24
    2c58:	16 ce       	rjmp	.-980    	; 0x2886 <main+0x1ce>
			break;
			/*
			 * This case change the password by reset the old password and change it
			 */
		case 4:
			LCD_displayString("Enter old password");
    2c5a:	8a e6       	ldi	r24, 0x6A	; 106
    2c5c:	91 e0       	ldi	r25, 0x01	; 1
    2c5e:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
			LCD_moveCursor(1, 0);
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			/*Enter the old password */
			enter_saved_pass();
    2c6a:	0e 94 48 08 	call	0x1090	; 0x1090 <enter_saved_pass>
			LCD_moveCursor(1, 0);
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_moveCursor>
			/*Then send to MCU2 to compare with that saved in EEprom*/
			send_Pass_ToMcu2();
    2c76:	0e 94 75 07 	call	0xeea	; 0xeea <send_Pass_ToMcu2>
			LCD_clearScreen();
    2c7a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
			/*receive the state from MCU2 in checker
			 * if the checker = 1 so enter the new password twice and save in eeprom
			 * if checker = 0 so return to case 0 to try again to enter the correct old password
			 */
			checker = UART_recieveByte();
    2c7e:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_recieveByte>
    2c82:	80 93 9c 01 	sts	0x019C, r24
			check_Pass(checker);
    2c86:	80 91 9c 01 	lds	r24, 0x019C
    2c8a:	0e 94 24 09 	call	0x1248	; 0x1248 <check_Pass>
			if(do_case){
    2c8e:	80 91 9d 01 	lds	r24, 0x019D
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <main+0x5e0>
    2c96:	f7 cd       	rjmp	.-1042   	; 0x2886 <main+0x1ce>
			Enter_Password();
    2c98:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Enter_Password>
			if (checking_value == 1) {
    2c9c:	80 91 9a 01 	lds	r24, 0x019A
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	21 f4       	brne	.+8      	; 0x2cac <main+0x5f4>
				g_step = 1;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	80 93 99 01 	sts	0x0199, r24
    2caa:	7a c0       	rjmp	.+244    	; 0x2da0 <main+0x6e8>
			} else {
				LCD_displayString("Unmatched");
    2cac:	8c e3       	ldi	r24, 0x3C	; 60
    2cae:	91 e0       	ldi	r25, 0x01	; 1
    2cb0:	0e 94 ab 12 	call	0x2556	; 0x2556 <LCD_displayString>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	aa e7       	ldi	r26, 0x7A	; 122
    2cba:	b4 e4       	ldi	r27, 0x44	; 68
    2cbc:	8b 87       	std	Y+11, r24	; 0x0b
    2cbe:	9c 87       	std	Y+12, r25	; 0x0c
    2cc0:	ad 87       	std	Y+13, r26	; 0x0d
    2cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a ef       	ldi	r20, 0xFA	; 250
    2cd2:	54 e4       	ldi	r21, 0x44	; 68
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8f 83       	std	Y+7, r24	; 0x07
    2cde:	98 87       	std	Y+8, r25	; 0x08
    2ce0:	a9 87       	std	Y+9, r26	; 0x09
    2ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf8:	88 23       	and	r24, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <main+0x64e>
		__ticks = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	3f c0       	rjmp	.+126    	; 0x2d84 <main+0x6cc>
	else if (__tmp > 65535)
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	4c f5       	brge	.+82     	; 0x2d70 <main+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e2       	ldi	r20, 0x20	; 32
    2d2c:	51 e4       	ldi	r21, 0x41	; 65
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <main+0x6ae>
    2d48:	88 ec       	ldi	r24, 0xC8	; 200
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <main+0x69c>
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f7       	brne	.-38     	; 0x2d48 <main+0x690>
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <main+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <main+0x6d8>
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_clearScreen();
    2d98:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
				g_step = 0;
    2d9c:	10 92 99 01 	sts	0x0199, r1
			}
			LCD_clearScreen();
    2da0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_clearScreen>
    2da4:	70 cd       	rjmp	.-1312   	; 0x2886 <main+0x1ce>
			 * the code will go to this step in step the user entered wrong password for 3 times
			 * and turn on the buzzer for 60 seconds
			 * and display warning message
			 */
		case 5:
			wrong_Passwords();
    2da6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wrong_Passwords>
			g_step=2;
    2daa:	82 e0       	ldi	r24, 0x02	; 2
    2dac:	80 93 99 01 	sts	0x0199, r24
    2db0:	6a cd       	rjmp	.-1324   	; 0x2886 <main+0x1ce>

00002db2 <__vector_9>:

/************************************************************************************************************
 *                                     Interrupt Service Routines                                          *
 ************************************************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2db2:	1f 92       	push	r1
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	0f 92       	push	r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	2f 93       	push	r18
    2dbe:	3f 93       	push	r19
    2dc0:	4f 93       	push	r20
    2dc2:	5f 93       	push	r21
    2dc4:	6f 93       	push	r22
    2dc6:	7f 93       	push	r23
    2dc8:	8f 93       	push	r24
    2dca:	9f 93       	push	r25
    2dcc:	af 93       	push	r26
    2dce:	bf 93       	push	r27
    2dd0:	ef 93       	push	r30
    2dd2:	ff 93       	push	r31
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2ddc:	80 91 94 01 	lds	r24, 0x0194
    2de0:	90 91 95 01 	lds	r25, 0x0195
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	29 f0       	breq	.+10     	; 0x2df2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the app4lication after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2de8:	e0 91 94 01 	lds	r30, 0x0194
    2dec:	f0 91 95 01 	lds	r31, 0x0195
    2df0:	09 95       	icall
	}
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	2f 93       	push	r18
    2e24:	3f 93       	push	r19
    2e26:	4f 93       	push	r20
    2e28:	5f 93       	push	r21
    2e2a:	6f 93       	push	r22
    2e2c:	7f 93       	push	r23
    2e2e:	8f 93       	push	r24
    2e30:	9f 93       	push	r25
    2e32:	af 93       	push	r26
    2e34:	bf 93       	push	r27
    2e36:	ef 93       	push	r30
    2e38:	ff 93       	push	r31
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2e42:	80 91 94 01 	lds	r24, 0x0194
    2e46:	90 91 95 01 	lds	r25, 0x0195
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	29 f0       	breq	.+10     	; 0x2e58 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2e4e:	e0 91 94 01 	lds	r30, 0x0194
    2e52:	f0 91 95 01 	lds	r31, 0x0195
    2e56:	09 95       	icall
	}
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	bf 91       	pop	r27
    2e62:	af 91       	pop	r26
    2e64:	9f 91       	pop	r25
    2e66:	8f 91       	pop	r24
    2e68:	7f 91       	pop	r23
    2e6a:	6f 91       	pop	r22
    2e6c:	5f 91       	pop	r21
    2e6e:	4f 91       	pop	r20
    2e70:	3f 91       	pop	r19
    2e72:	2f 91       	pop	r18
    2e74:	0f 90       	pop	r0
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	0f 90       	pop	r0
    2e7a:	1f 90       	pop	r1
    2e7c:	18 95       	reti

00002e7e <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    2e7e:	1f 92       	push	r1
    2e80:	0f 92       	push	r0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	0f 92       	push	r0
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2ea8:	80 91 94 01 	lds	r24, 0x0194
    2eac:	90 91 95 01 	lds	r25, 0x0195
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	29 f0       	breq	.+10     	; 0x2ebe <__vector_8+0x40>
	{
		/* Call the Call Back function in the app4lication after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2eb4:	e0 91 94 01 	lds	r30, 0x0194
    2eb8:	f0 91 95 01 	lds	r31, 0x0195
    2ebc:	09 95       	icall
	}
}
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	bf 91       	pop	r27
    2ec8:	af 91       	pop	r26
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	7f 91       	pop	r23
    2ed0:	6f 91       	pop	r22
    2ed2:	5f 91       	pop	r21
    2ed4:	4f 91       	pop	r20
    2ed6:	3f 91       	pop	r19
    2ed8:	2f 91       	pop	r18
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2ee4:	1f 92       	push	r1
    2ee6:	0f 92       	push	r0
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	0f 92       	push	r0
    2eec:	11 24       	eor	r1, r1
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2f0e:	80 91 94 01 	lds	r24, 0x0194
    2f12:	90 91 95 01 	lds	r25, 0x0195
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	29 f0       	breq	.+10     	; 0x2f24 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2f1a:	e0 91 94 01 	lds	r30, 0x0194
    2f1e:	f0 91 95 01 	lds	r31, 0x0195
    2f22:	09 95       	icall
	}
}
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	bf 91       	pop	r27
    2f2e:	af 91       	pop	r26
    2f30:	9f 91       	pop	r25
    2f32:	8f 91       	pop	r24
    2f34:	7f 91       	pop	r23
    2f36:	6f 91       	pop	r22
    2f38:	5f 91       	pop	r21
    2f3a:	4f 91       	pop	r20
    2f3c:	3f 91       	pop	r19
    2f3e:	2f 91       	pop	r18
    2f40:	0f 90       	pop	r0
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	0f 90       	pop	r0
    2f46:	1f 90       	pop	r1
    2f48:	18 95       	reti

00002f4a <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2f4a:	1f 92       	push	r1
    2f4c:	0f 92       	push	r0
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	0f 92       	push	r0
    2f52:	11 24       	eor	r1, r1
    2f54:	2f 93       	push	r18
    2f56:	3f 93       	push	r19
    2f58:	4f 93       	push	r20
    2f5a:	5f 93       	push	r21
    2f5c:	6f 93       	push	r22
    2f5e:	7f 93       	push	r23
    2f60:	8f 93       	push	r24
    2f62:	9f 93       	push	r25
    2f64:	af 93       	push	r26
    2f66:	bf 93       	push	r27
    2f68:	ef 93       	push	r30
    2f6a:	ff 93       	push	r31
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2f74:	80 91 96 01 	lds	r24, 0x0196
    2f78:	90 91 97 01 	lds	r25, 0x0197
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	29 f0       	breq	.+10     	; 0x2f8a <__vector_4+0x40>
	{
		/* Call the Call Back function in the app4lication after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2f80:	e0 91 96 01 	lds	r30, 0x0196
    2f84:	f0 91 97 01 	lds	r31, 0x0197
    2f88:	09 95       	icall
	}
}
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	ff 91       	pop	r31
    2f90:	ef 91       	pop	r30
    2f92:	bf 91       	pop	r27
    2f94:	af 91       	pop	r26
    2f96:	9f 91       	pop	r25
    2f98:	8f 91       	pop	r24
    2f9a:	7f 91       	pop	r23
    2f9c:	6f 91       	pop	r22
    2f9e:	5f 91       	pop	r21
    2fa0:	4f 91       	pop	r20
    2fa2:	3f 91       	pop	r19
    2fa4:	2f 91       	pop	r18
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	2f 93       	push	r18
    2fbc:	3f 93       	push	r19
    2fbe:	4f 93       	push	r20
    2fc0:	5f 93       	push	r21
    2fc2:	6f 93       	push	r22
    2fc4:	7f 93       	push	r23
    2fc6:	8f 93       	push	r24
    2fc8:	9f 93       	push	r25
    2fca:	af 93       	push	r26
    2fcc:	bf 93       	push	r27
    2fce:	ef 93       	push	r30
    2fd0:	ff 93       	push	r31
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    2fda:	80 91 96 01 	lds	r24, 0x0196
    2fde:	90 91 97 01 	lds	r25, 0x0197
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	29 f0       	breq	.+10     	; 0x2ff0 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2fe6:	e0 91 96 01 	lds	r30, 0x0196
    2fea:	f0 91 97 01 	lds	r31, 0x0197
    2fee:	09 95       	icall
	}
}
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	ff 91       	pop	r31
    2ff6:	ef 91       	pop	r30
    2ff8:	bf 91       	pop	r27
    2ffa:	af 91       	pop	r26
    2ffc:	9f 91       	pop	r25
    2ffe:	8f 91       	pop	r24
    3000:	7f 91       	pop	r23
    3002:	6f 91       	pop	r22
    3004:	5f 91       	pop	r21
    3006:	4f 91       	pop	r20
    3008:	3f 91       	pop	r19
    300a:	2f 91       	pop	r18
    300c:	0f 90       	pop	r0
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	0f 90       	pop	r0
    3012:	1f 90       	pop	r1
    3014:	18 95       	reti

00003016 <Timer0_setCallBack>:
 ************************************************************************************************************/
/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <Timer0_setCallBack+0x6>
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 =a_ptr;
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	90 93 95 01 	sts	0x0195, r25
    302c:	80 93 94 01 	sts	0x0194, r24
}
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	08 95       	ret

0000303a <Timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*b_ptr)(void))
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	00 d0       	rcall	.+0      	; 0x3040 <Timer1_setCallBack+0x6>
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 =b_ptr;
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	90 93 97 01 	sts	0x0197, r25
    3050:	80 93 96 01 	sts	0x0196, r24
}
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <Timer2_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer2_setCallBack(void(*c_ptr)(void))
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	00 d0       	rcall	.+0      	; 0x3064 <Timer2_setCallBack+0x6>
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	9a 83       	std	Y+2, r25	; 0x02
    306a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 =c_ptr;
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	9a 81       	ldd	r25, Y+2	; 0x02
    3070:	90 93 97 01 	sts	0x0197, r25
    3074:	80 93 96 01 	sts	0x0196, r24
}
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <Timer_Init>:
 * Function to Enable Timer0 registers to initialize timer0 driver
 * Choose between overflow mode and compare mode
 * setup the clock select
 */
void Timer_Init(const Timer_ConfigType *config_ptr)
{
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	00 d0       	rcall	.+0      	; 0x3088 <Timer_Init+0x6>
    3088:	00 d0       	rcall	.+0      	; 0x308a <Timer_Init+0x8>
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01

switch ((config_ptr->Timer_ID))
    3092:	e9 81       	ldd	r30, Y+1	; 0x01
    3094:	fa 81       	ldd	r31, Y+2	; 0x02
    3096:	80 81       	ld	r24, Z
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	3c 83       	std	Y+4, r19	; 0x04
    309e:	2b 83       	std	Y+3, r18	; 0x03
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	9c 81       	ldd	r25, Y+4	; 0x04
    30a4:	81 30       	cpi	r24, 0x01	; 1
    30a6:	91 05       	cpc	r25, r1
    30a8:	09 f4       	brne	.+2      	; 0x30ac <Timer_Init+0x2a>
    30aa:	73 c0       	rjmp	.+230    	; 0x3192 <Timer_Init+0x110>
    30ac:	2b 81       	ldd	r18, Y+3	; 0x03
    30ae:	3c 81       	ldd	r19, Y+4	; 0x04
    30b0:	22 30       	cpi	r18, 0x02	; 2
    30b2:	31 05       	cpc	r19, r1
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <Timer_Init+0x36>
    30b6:	e8 c0       	rjmp	.+464    	; 0x3288 <Timer_Init+0x206>
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	09 f0       	breq	.+2      	; 0x30c2 <Timer_Init+0x40>
    30c0:	4a c1       	rjmp	.+660    	; 0x3356 <Timer_Init+0x2d4>
{
case Timer0:
if((config_ptr->Mode)==Normal)
    30c2:	e9 81       	ldd	r30, Y+1	; 0x01
    30c4:	fa 81       	ldd	r31, Y+2	; 0x02
    30c6:	81 81       	ldd	r24, Z+1	; 0x01
    30c8:	88 23       	and	r24, r24
    30ca:	09 f5       	brne	.+66     	; 0x310e <Timer_Init+0x8c>
	{
	 /*Initialize the Timer */
		TCNT0=config_ptr->TCNT;
    30cc:	a2 e5       	ldi	r26, 0x52	; 82
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e9 81       	ldd	r30, Y+1	; 0x01
    30d2:	fa 81       	ldd	r31, Y+2	; 0x02
    30d4:	84 81       	ldd	r24, Z+4	; 0x04
    30d6:	8c 93       	st	X, r24
	/*
	 * Non-PWM mode FOC0=15
	 * Enable Timer0 Overflow Interrupt
	 */
	SET_BIT(TCCR0,FOC0);
    30d8:	a3 e5       	ldi	r26, 0x53	; 83
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e3 e5       	ldi	r30, 0x53	; 83
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	80 68       	ori	r24, 0x80	; 128
    30e4:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    30e6:	a9 e5       	ldi	r26, 0x59	; 89
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e9 e5       	ldi	r30, 0x59	; 89
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	81 60       	ori	r24, 0x01	; 1
    30f2:	8c 93       	st	X, r24
	/*Configure clock select */
	TCCR0=(TCCR0&0XF8)|(config_ptr->Clock_select);
    30f4:	a3 e5       	ldi	r26, 0x53	; 83
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e3 e5       	ldi	r30, 0x53	; 83
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	98 2f       	mov	r25, r24
    3100:	98 7f       	andi	r25, 0xF8	; 248
    3102:	e9 81       	ldd	r30, Y+1	; 0x01
    3104:	fa 81       	ldd	r31, Y+2	; 0x02
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	89 2b       	or	r24, r25
    310a:	8c 93       	st	X, r24
    310c:	24 c1       	rjmp	.+584    	; 0x3356 <Timer_Init+0x2d4>

	}
     else if ((config_ptr->Mode)==CTC)
    310e:	e9 81       	ldd	r30, Y+1	; 0x01
    3110:	fa 81       	ldd	r31, Y+2	; 0x02
    3112:	81 81       	ldd	r24, Z+1	; 0x01
    3114:	82 30       	cpi	r24, 0x02	; 2
    3116:	71 f5       	brne	.+92     	; 0x3174 <Timer_Init+0xf2>
       {
    	 /*Initialize the Timer */
    	  TCNT0=config_ptr->TCNT;
    3118:	a2 e5       	ldi	r26, 0x52	; 82
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e9 81       	ldd	r30, Y+1	; 0x01
    311e:	fa 81       	ldd	r31, Y+2	; 0x02
    3120:	84 81       	ldd	r24, Z+4	; 0x04
    3122:	8c 93       	st	X, r24
	/*
	 * Non-PWM mode FOC0=1
	 * Enable Timer0 Compare Interrupt
	 * CTC Mode WGM01=1 & WGM00=0
	 */
	SET_BIT(TCCR0,FOC0);
    3124:	a3 e5       	ldi	r26, 0x53	; 83
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e3 e5       	ldi	r30, 0x53	; 83
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	80 68       	ori	r24, 0x80	; 128
    3130:	8c 93       	st	X, r24
	SET_BIT(TIMSK,OCIE0);
    3132:	a9 e5       	ldi	r26, 0x59	; 89
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e9 e5       	ldi	r30, 0x59	; 89
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	82 60       	ori	r24, 0x02	; 2
    313e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    3140:	a3 e5       	ldi	r26, 0x53	; 83
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e3 e5       	ldi	r30, 0x53	; 83
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	88 60       	ori	r24, 0x08	; 8
    314c:	8c 93       	st	X, r24
	/*Configure clock select */
	TCCR0=(TCCR0 & 0XF8)|(config_ptr->Clock_select);
    314e:	a3 e5       	ldi	r26, 0x53	; 83
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e3 e5       	ldi	r30, 0x53	; 83
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	98 2f       	mov	r25, r24
    315a:	98 7f       	andi	r25, 0xF8	; 248
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	89 2b       	or	r24, r25
    3164:	8c 93       	st	X, r24
    /*Setup the Output compare register OCR */
	OCR0=config_ptr->OCR;
    3166:	ac e5       	ldi	r26, 0x5C	; 92
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e9 81       	ldd	r30, Y+1	; 0x01
    316c:	fa 81       	ldd	r31, Y+2	; 0x02
    316e:	85 81       	ldd	r24, Z+5	; 0x05
    3170:	8c 93       	st	X, r24
    3172:	f1 c0       	rjmp	.+482    	; 0x3356 <Timer_Init+0x2d4>
    }
     else
    {
	/* Disable Timer0 Overflow Interrupt*/
	CLEAR_BIT(TIMSK,TOIE0);
    3174:	a9 e5       	ldi	r26, 0x59	; 89
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	e9 e5       	ldi	r30, 0x59	; 89
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	8e 7f       	andi	r24, 0xFE	; 254
    3180:	8c 93       	st	X, r24
	/*Disable Timer0 Compare Interrupt*/
	CLEAR_BIT(TIMSK,OCIE0);
    3182:	a9 e5       	ldi	r26, 0x59	; 89
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e9 e5       	ldi	r30, 0x59	; 89
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	8d 7f       	andi	r24, 0xFD	; 253
    318e:	8c 93       	st	X, r24
    3190:	e2 c0       	rjmp	.+452    	; 0x3356 <Timer_Init+0x2d4>
       }
   break;
      case Timer1:
   if ((config_ptr->Mode)==Normal)
    3192:	e9 81       	ldd	r30, Y+1	; 0x01
    3194:	fa 81       	ldd	r31, Y+2	; 0x02
    3196:	81 81       	ldd	r24, Z+1	; 0x01
    3198:	88 23       	and	r24, r24
    319a:	61 f5       	brne	.+88     	; 0x31f4 <Timer_Init+0x172>
{
 	  /*Initialize the timer1*/
 		TCNT1=config_ptr->TCNT;
    319c:	ac e4       	ldi	r26, 0x4C	; 76
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e9 81       	ldd	r30, Y+1	; 0x01
    31a2:	fa 81       	ldd	r31, Y+2	; 0x02
    31a4:	84 81       	ldd	r24, Z+4	; 0x04
    31a6:	88 2f       	mov	r24, r24
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	11 96       	adiw	r26, 0x01	; 1
    31ac:	9c 93       	st	X, r25
    31ae:	8e 93       	st	-X, r24
 		/*Non PWM mode */
 		SET_BIT(TCCR1A,FOC1A);
    31b0:	af e4       	ldi	r26, 0x4F	; 79
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	ef e4       	ldi	r30, 0x4F	; 79
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	88 60       	ori	r24, 0x08	; 8
    31bc:	8c 93       	st	X, r24
 		SET_BIT(TCCR1A,FOC1B);
    31be:	af e4       	ldi	r26, 0x4F	; 79
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	ef e4       	ldi	r30, 0x4F	; 79
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	84 60       	ori	r24, 0x04	; 4
    31ca:	8c 93       	st	X, r24
 		/*Enable overflow interrupt*/
 		SET_BIT(TIMSK,TOIE1);
    31cc:	a9 e5       	ldi	r26, 0x59	; 89
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e9 e5       	ldi	r30, 0x59	; 89
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	84 60       	ori	r24, 0x04	; 4
    31d8:	8c 93       	st	X, r24
 		/*Select the clock*/
 		TCCR1B=(TCCR1B & 0xF8)|(config_ptr->Clock_select);
    31da:	ae e4       	ldi	r26, 0x4E	; 78
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	ee e4       	ldi	r30, 0x4E	; 78
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	98 2f       	mov	r25, r24
    31e6:	98 7f       	andi	r25, 0xF8	; 248
    31e8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ea:	fa 81       	ldd	r31, Y+2	; 0x02
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	89 2b       	or	r24, r25
    31f0:	8c 93       	st	X, r24
    31f2:	b1 c0       	rjmp	.+354    	; 0x3356 <Timer_Init+0x2d4>

}
   else if ((config_ptr->Mode)==CTC)
    31f4:	e9 81       	ldd	r30, Y+1	; 0x01
    31f6:	fa 81       	ldd	r31, Y+2	; 0x02
    31f8:	81 81       	ldd	r24, Z+1	; 0x01
    31fa:	82 30       	cpi	r24, 0x02	; 2
    31fc:	b1 f5       	brne	.+108    	; 0x326a <Timer_Init+0x1e8>
{
 	  /*Initialize the timer1*/
 		TCNT1=config_ptr->TCNT;
    31fe:	ac e4       	ldi	r26, 0x4C	; 76
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e9 81       	ldd	r30, Y+1	; 0x01
    3204:	fa 81       	ldd	r31, Y+2	; 0x02
    3206:	84 81       	ldd	r24, Z+4	; 0x04
    3208:	88 2f       	mov	r24, r24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	11 96       	adiw	r26, 0x01	; 1
    320e:	9c 93       	st	X, r25
    3210:	8e 93       	st	-X, r24
	/*Set the compare value */
 		OCR1A=config_ptr->OCR;
    3212:	aa e4       	ldi	r26, 0x4A	; 74
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	e9 81       	ldd	r30, Y+1	; 0x01
    3218:	fa 81       	ldd	r31, Y+2	; 0x02
    321a:	85 81       	ldd	r24, Z+5	; 0x05
    321c:	88 2f       	mov	r24, r24
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	11 96       	adiw	r26, 0x01	; 1
    3222:	9c 93       	st	X, r25
    3224:	8e 93       	st	-X, r24
 		/* Enable Timer1 Compare A Interrupt */
 		SET_BIT(TIMSK,OCIE1A);
    3226:	a9 e5       	ldi	r26, 0x59	; 89
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e9 e5       	ldi	r30, 0x59	; 89
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	80 61       	ori	r24, 0x10	; 16
    3232:	8c 93       	st	X, r24
 		/* Configure timer control register TCCR1A
 			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
 			 * 2. FOC1A=1 FOC1B=0
 			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
 			 */
 		SET_BIT(TCCR1A,FOC1A);
    3234:	af e4       	ldi	r26, 0x4F	; 79
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	ef e4       	ldi	r30, 0x4F	; 79
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	88 60       	ori	r24, 0x08	; 8
    3240:	8c 93       	st	X, r24
 		/* Configure timer control register TCCR1B
 			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
 			 */
 		SET_BIT(TCCR1B,WGM12);
    3242:	ae e4       	ldi	r26, 0x4E	; 78
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	ee e4       	ldi	r30, 0x4E	; 78
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	88 60       	ori	r24, 0x08	; 8
    324e:	8c 93       	st	X, r24
 		/*configure the prescaler  */
 		TCCR1B=(TCCR1B & 0xF8)|(config_ptr->Clock_select);
    3250:	ae e4       	ldi	r26, 0x4E	; 78
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	ee e4       	ldi	r30, 0x4E	; 78
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	98 2f       	mov	r25, r24
    325c:	98 7f       	andi	r25, 0xF8	; 248
    325e:	e9 81       	ldd	r30, Y+1	; 0x01
    3260:	fa 81       	ldd	r31, Y+2	; 0x02
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	89 2b       	or	r24, r25
    3266:	8c 93       	st	X, r24
    3268:	76 c0       	rjmp	.+236    	; 0x3356 <Timer_Init+0x2d4>
}
   else
   {
	   /* Disable Timer1 Overflow Interrupt*/
	   	CLEAR_BIT(TIMSK,TOIE1);
    326a:	a9 e5       	ldi	r26, 0x59	; 89
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	e9 e5       	ldi	r30, 0x59	; 89
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	8b 7f       	andi	r24, 0xFB	; 251
    3276:	8c 93       	st	X, r24
	   	/*Disable Timer1 Compare Interrupt*/
	   	CLEAR_BIT(TIMSK,OCIE1A);
    3278:	a9 e5       	ldi	r26, 0x59	; 89
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e9 e5       	ldi	r30, 0x59	; 89
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	8f 7e       	andi	r24, 0xEF	; 239
    3284:	8c 93       	st	X, r24
    3286:	67 c0       	rjmp	.+206    	; 0x3356 <Timer_Init+0x2d4>
   }

	break;
      case Timer2:
      if ((config_ptr->Mode)==Normal)
    3288:	e9 81       	ldd	r30, Y+1	; 0x01
    328a:	fa 81       	ldd	r31, Y+2	; 0x02
    328c:	81 81       	ldd	r24, Z+1	; 0x01
    328e:	88 23       	and	r24, r24
    3290:	09 f5       	brne	.+66     	; 0x32d4 <Timer_Init+0x252>
     {
    	  /*Initialize the timer2*/
    		TCNT2=config_ptr->TCNT;
    3292:	a4 e4       	ldi	r26, 0x44	; 68
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e9 81       	ldd	r30, Y+1	; 0x01
    3298:	fa 81       	ldd	r31, Y+2	; 0x02
    329a:	84 81       	ldd	r24, Z+4	; 0x04
    329c:	8c 93       	st	X, r24
      	/*
      	 * Non-PWM mode FOC2=1
      	 * Enable Timer0 Overflow Interrupt
      	 */
      	SET_BIT(TCCR2,FOC2);
    329e:	a5 e4       	ldi	r26, 0x45	; 69
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e5 e4       	ldi	r30, 0x45	; 69
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	80 68       	ori	r24, 0x80	; 128
    32aa:	8c 93       	st	X, r24
      	SET_BIT(TIMSK,TOIE2);
    32ac:	a9 e5       	ldi	r26, 0x59	; 89
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e9 e5       	ldi	r30, 0x59	; 89
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	80 64       	ori	r24, 0x40	; 64
    32b8:	8c 93       	st	X, r24
      	/*Configure clock select */
      	TCCR2=(TCCR2 & 0XF8)|(config_ptr->Clock2_select);
    32ba:	a5 e4       	ldi	r26, 0x45	; 69
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	e5 e4       	ldi	r30, 0x45	; 69
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	98 2f       	mov	r25, r24
    32c6:	98 7f       	andi	r25, 0xF8	; 248
    32c8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ca:	fa 81       	ldd	r31, Y+2	; 0x02
    32cc:	83 81       	ldd	r24, Z+3	; 0x03
    32ce:	89 2b       	or	r24, r25
    32d0:	8c 93       	st	X, r24
    32d2:	41 c0       	rjmp	.+130    	; 0x3356 <Timer_Init+0x2d4>
     }
      else if ((config_ptr->Mode)==CTC)
    32d4:	e9 81       	ldd	r30, Y+1	; 0x01
    32d6:	fa 81       	ldd	r31, Y+2	; 0x02
    32d8:	81 81       	ldd	r24, Z+1	; 0x01
    32da:	82 30       	cpi	r24, 0x02	; 2
    32dc:	71 f5       	brne	.+92     	; 0x333a <Timer_Init+0x2b8>
      {
    	  /*Initialize the timer2*/
    	     TCNT2=config_ptr->TCNT;
    32de:	a4 e4       	ldi	r26, 0x44	; 68
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	e9 81       	ldd	r30, Y+1	; 0x01
    32e4:	fa 81       	ldd	r31, Y+2	; 0x02
    32e6:	84 81       	ldd	r24, Z+4	; 0x04
    32e8:	8c 93       	st	X, r24
      	/*
      	 * Non-PWM mode FOC2=1
      	 * Enable Timer2 Compare Interrupt
      	 * CTC Mode WGM21=1 & WGM20=0
      	 */
      	SET_BIT(TCCR2,FOC2);
    32ea:	a5 e4       	ldi	r26, 0x45	; 69
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	e5 e4       	ldi	r30, 0x45	; 69
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	80 68       	ori	r24, 0x80	; 128
    32f6:	8c 93       	st	X, r24
      	SET_BIT(TIMSK,OCIE2);
    32f8:	a9 e5       	ldi	r26, 0x59	; 89
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e9 e5       	ldi	r30, 0x59	; 89
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	80 68       	ori	r24, 0x80	; 128
    3304:	8c 93       	st	X, r24
      	SET_BIT(TCCR2,WGM21);
    3306:	a5 e4       	ldi	r26, 0x45	; 69
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	e5 e4       	ldi	r30, 0x45	; 69
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	80 81       	ld	r24, Z
    3310:	88 60       	ori	r24, 0x08	; 8
    3312:	8c 93       	st	X, r24
      	/*Configure clock select */
      	TCCR2=(TCCR2&0XF8)|(config_ptr->Clock2_select);
    3314:	a5 e4       	ldi	r26, 0x45	; 69
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	e5 e4       	ldi	r30, 0x45	; 69
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	98 2f       	mov	r25, r24
    3320:	98 7f       	andi	r25, 0xF8	; 248
    3322:	e9 81       	ldd	r30, Y+1	; 0x01
    3324:	fa 81       	ldd	r31, Y+2	; 0x02
    3326:	83 81       	ldd	r24, Z+3	; 0x03
    3328:	89 2b       	or	r24, r25
    332a:	8c 93       	st	X, r24
          /*Setup the Output compare register OCR */
      	OCR2=config_ptr->OCR;
    332c:	a3 e4       	ldi	r26, 0x43	; 67
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	e9 81       	ldd	r30, Y+1	; 0x01
    3332:	fa 81       	ldd	r31, Y+2	; 0x02
    3334:	85 81       	ldd	r24, Z+5	; 0x05
    3336:	8c 93       	st	X, r24
    3338:	0e c0       	rjmp	.+28     	; 0x3356 <Timer_Init+0x2d4>
      }
      else
      {
      	/* Disable Timer2 Overflow Interrupt*/
      	 CLEAR_BIT(TIMSK,TOIE2);
    333a:	a9 e5       	ldi	r26, 0x59	; 89
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 e5       	ldi	r30, 0x59	; 89
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	8f 7b       	andi	r24, 0xBF	; 191
    3346:	8c 93       	st	X, r24
      	/*Disable Timer2 Compare Interrupt*/
      	 CLEAR_BIT(TIMSK,OCIE2);
    3348:	a9 e5       	ldi	r26, 0x59	; 89
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e9 e5       	ldi	r30, 0x59	; 89
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	8f 77       	andi	r24, 0x7F	; 127
    3354:	8c 93       	st	X, r24
      }
	}
}
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <Timer_DeInit>:
/*
 * Description:
 * Function to Disable Timer0
 */
void Timer_DeInit(const Timer_ConfigType *config_ptr)
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	00 d0       	rcall	.+0      	; 0x336a <Timer_DeInit+0x6>
    336a:	00 d0       	rcall	.+0      	; 0x336c <Timer_DeInit+0x8>
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
	/*configure the number of timers*/
		switch((config_ptr->Timer_ID))
    3374:	e9 81       	ldd	r30, Y+1	; 0x01
    3376:	fa 81       	ldd	r31, Y+2	; 0x02
    3378:	80 81       	ld	r24, Z
    337a:	28 2f       	mov	r18, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	3c 83       	std	Y+4, r19	; 0x04
    3380:	2b 83       	std	Y+3, r18	; 0x03
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	9c 81       	ldd	r25, Y+4	; 0x04
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	91 05       	cpc	r25, r1
    338a:	f9 f0       	breq	.+62     	; 0x33ca <Timer_DeInit+0x66>
    338c:	2b 81       	ldd	r18, Y+3	; 0x03
    338e:	3c 81       	ldd	r19, Y+4	; 0x04
    3390:	22 30       	cpi	r18, 0x02	; 2
    3392:	31 05       	cpc	r19, r1
    3394:	81 f1       	breq	.+96     	; 0x33f6 <Timer_DeInit+0x92>
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	09 f0       	breq	.+2      	; 0x33a0 <Timer_DeInit+0x3c>
    339e:	3f c0       	rjmp	.+126    	; 0x341e <Timer_DeInit+0xba>
		{
		case Timer0:

	/*Clear all timer register*/
	TCCR0=0;
    33a0:	e3 e5       	ldi	r30, 0x53	; 83
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	10 82       	st	Z, r1
	TCNT0=0;
    33a6:	e2 e5       	ldi	r30, 0x52	; 82
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	10 82       	st	Z, r1
	/*Disable the interrupt MISK register*/
	CLEAR_BIT(TIMSK,TOIE0);
    33ac:	a9 e5       	ldi	r26, 0x59	; 89
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e9 e5       	ldi	r30, 0x59	; 89
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8e 7f       	andi	r24, 0xFE	; 254
    33b8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE0);
    33ba:	a9 e5       	ldi	r26, 0x59	; 89
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e9 e5       	ldi	r30, 0x59	; 89
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	8d 7f       	andi	r24, 0xFD	; 253
    33c6:	8c 93       	st	X, r24
    33c8:	2a c0       	rjmp	.+84     	; 0x341e <Timer_DeInit+0xba>
		break;
       case Timer1 :
	/*Clear all timer register*/
			TCCR1A=0;
    33ca:	ef e4       	ldi	r30, 0x4F	; 79
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	10 82       	st	Z, r1
			TCNT1=0;
    33d0:	ec e4       	ldi	r30, 0x4C	; 76
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	11 82       	std	Z+1, r1	; 0x01
    33d6:	10 82       	st	Z, r1
			/*Disable the interrupt MISK register*/
			CLEAR_BIT(TIMSK,TOIE1);
    33d8:	a9 e5       	ldi	r26, 0x59	; 89
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e9 e5       	ldi	r30, 0x59	; 89
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	8b 7f       	andi	r24, 0xFB	; 251
    33e4:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK,OCIE1A);
    33e6:	a9 e5       	ldi	r26, 0x59	; 89
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	e9 e5       	ldi	r30, 0x59	; 89
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	8f 7e       	andi	r24, 0xEF	; 239
    33f2:	8c 93       	st	X, r24
    33f4:	14 c0       	rjmp	.+40     	; 0x341e <Timer_DeInit+0xba>
			break;
        case Timer2 :
		/*Clear all timer register*/
		TCCR2=0;
    33f6:	e5 e4       	ldi	r30, 0x45	; 69
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	10 82       	st	Z, r1
		TCNT2=0;
    33fc:	e4 e4       	ldi	r30, 0x44	; 68
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	10 82       	st	Z, r1
		/*Disable the interrupt MISK register*/
		CLEAR_BIT(TIMSK,TOIE2);
    3402:	a9 e5       	ldi	r26, 0x59	; 89
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	e9 e5       	ldi	r30, 0x59	; 89
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 81       	ld	r24, Z
    340c:	8f 7b       	andi	r24, 0xBF	; 191
    340e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    3410:	a9 e5       	ldi	r26, 0x59	; 89
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	e9 e5       	ldi	r30, 0x59	; 89
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	8f 77       	andi	r24, 0x7F	; 127
    341c:	8c 93       	st	X, r24
		break;

}
}
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <UART_init>:
 * set up the frame format like the parity bit type , number of data bits and number of stop bits
 * Enable the UART
 * set up the UART baud rate
 */
void UART_init(const UART_Config *uart_ptr)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	00 d0       	rcall	.+0      	; 0x3432 <UART_init+0x6>
    3432:	00 d0       	rcall	.+0      	; 0x3434 <UART_init+0x8>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	9c 83       	std	Y+4, r25	; 0x04
    343a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    343c:	1a 82       	std	Y+2, r1	; 0x02
    343e:	19 82       	std	Y+1, r1	; 0x01
	/*U2X=1 for double transmission speed */
	UCSRA=(1<<U2X);
    3440:	eb e2       	ldi	r30, 0x2B	; 43
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
    UCSRB=(1<<RXEN)|(1<<TXEN);
    3448:	ea e2       	ldi	r30, 0x2A	; 42
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	88 e1       	ldi	r24, 0x18	; 24
    344e:	80 83       	st	Z, r24
    	 * UPM1:0  = 00 Disable parity bit
    	 * USBS    = 0 One stop bit
    	 * UCSZ1:0 = 11 For 8-bit data mode
    	 * UCPOL   = 0 Used with the Synchronous operation only
    	 ***********************************************************************/
    UCSRC=(UCSRC&0xF9)|(uart_ptr->bit_data);
    3450:	a0 e4       	ldi	r26, 0x40	; 64
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	e0 e4       	ldi	r30, 0x40	; 64
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	98 2f       	mov	r25, r24
    345c:	99 7f       	andi	r25, 0xF9	; 249
    345e:	eb 81       	ldd	r30, Y+3	; 0x03
    3460:	fc 81       	ldd	r31, Y+4	; 0x04
    3462:	84 81       	ldd	r24, Z+4	; 0x04
    3464:	89 2b       	or	r24, r25
    3466:	8c 93       	st	X, r24
    UCSRC=(UCSRC&0XCF)|(uart_ptr->parity);
    3468:	a0 e4       	ldi	r26, 0x40	; 64
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	e0 e4       	ldi	r30, 0x40	; 64
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	98 2f       	mov	r25, r24
    3474:	9f 7c       	andi	r25, 0xCF	; 207
    3476:	eb 81       	ldd	r30, Y+3	; 0x03
    3478:	fc 81       	ldd	r31, Y+4	; 0x04
    347a:	85 81       	ldd	r24, Z+5	; 0x05
    347c:	89 2b       	or	r24, r25
    347e:	8c 93       	st	X, r24
    UCSRC=(UCSRC&0XF7)|(uart_ptr->stop_bit);
    3480:	a0 e4       	ldi	r26, 0x40	; 64
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e0 e4       	ldi	r30, 0x40	; 64
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	98 2f       	mov	r25, r24
    348c:	97 7f       	andi	r25, 0xF7	; 247
    348e:	eb 81       	ldd	r30, Y+3	; 0x03
    3490:	fc 81       	ldd	r31, Y+4	; 0x04
    3492:	86 81       	ldd	r24, Z+6	; 0x06
    3494:	89 2b       	or	r24, r25
    3496:	8c 93       	st	X, r24
    /*Calculate UBRR register value */
    ubrr_value = (uint16)(((F_CPU / (uart_ptr->baud_rate * 8UL))) - 1);
    3498:	eb 81       	ldd	r30, Y+3	; 0x03
    349a:	fc 81       	ldd	r31, Y+4	; 0x04
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	a2 81       	ldd	r26, Z+2	; 0x02
    34a2:	b3 81       	ldd	r27, Z+3	; 0x03
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	aa 1f       	adc	r26, r26
    34aa:	bb 1f       	adc	r27, r27
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	aa 1f       	adc	r26, r26
    34b2:	bb 1f       	adc	r27, r27
    34b4:	88 0f       	add	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	aa 1f       	adc	r26, r26
    34ba:	bb 1f       	adc	r27, r27
    34bc:	9c 01       	movw	r18, r24
    34be:	ad 01       	movw	r20, r26
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	92 e1       	ldi	r25, 0x12	; 18
    34c4:	aa e7       	ldi	r26, 0x7A	; 122
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
    34d0:	da 01       	movw	r26, r20
    34d2:	c9 01       	movw	r24, r18
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	9a 83       	std	Y+2, r25	; 0x02
    34d8:	89 83       	std	Y+1, r24	; 0x01
    /*First 8-bits from Baud Prescale inside UBRRL and last 4-bits in UBRRH*/
    UBRRH=(ubrr_value>>8);
    34da:	e0 e4       	ldi	r30, 0x40	; 64
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	9a 81       	ldd	r25, Y+2	; 0x02
    34e2:	89 2f       	mov	r24, r25
    34e4:	99 27       	eor	r25, r25
    34e6:	80 83       	st	Z, r24
    UBRRL=ubrr_value;
    34e8:	e9 e2       	ldi	r30, 0x29	; 41
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	80 83       	st	Z, r24
}
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <UART_sendByte>:
/*
 * Description:
 * Function responsible for send byte to another UART device
 */
void UART_sendByte(const uint8 data )
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	0f 92       	push	r0
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one
		 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
    350a:	eb e2       	ldi	r30, 0x2B	; 43
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	80 72       	andi	r24, 0x20	; 32
    3516:	90 70       	andi	r25, 0x00	; 0
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	b9 f3       	breq	.-18     	; 0x350a <UART_sendByte+0xc>
	/*
		 * Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now
		 */
	UDR=data;
    351c:	ec e2       	ldi	r30, 0x2C	; 44
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	80 83       	st	Z, r24
}
    3524:	0f 90       	pop	r0
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <UART_recieveByte>:
/*
 * Description:
 * Function responsible for receive byte from the another UART device
 */
uint8 UART_recieveByte(void)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3534:	eb e2       	ldi	r30, 0x2B	; 43
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	88 23       	and	r24, r24
    353c:	dc f7       	brge	.-10     	; 0x3534 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    353e:	ec e2       	ldi	r30, 0x2C	; 44
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
}
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	00 d0       	rcall	.+0      	; 0x3550 <UART_sendString+0x6>
    3550:	0f 92       	push	r0
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	9b 83       	std	Y+3, r25	; 0x03
    3558:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    355a:	19 82       	std	Y+1, r1	; 0x01
    355c:	0e c0       	rjmp	.+28     	; 0x357a <UART_sendString+0x30>
	/*Send the whole string */
	while (Str[i] !='\0')
	{
		UART_sendByte(Str[i]);
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	8a 81       	ldd	r24, Y+2	; 0x02
    3566:	9b 81       	ldd	r25, Y+3	; 0x03
    3568:	fc 01       	movw	r30, r24
    356a:	e2 0f       	add	r30, r18
    356c:	f3 1f       	adc	r31, r19
    356e:	80 81       	ld	r24, Z
    3570:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <UART_sendByte>
		i++;
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	8f 5f       	subi	r24, 0xFF	; 255
    3578:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;
	/*Send the whole string */
	while (Str[i] !='\0')
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	9b 81       	ldd	r25, Y+3	; 0x03
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	80 81       	ld	r24, Z
    358c:	88 23       	and	r24, r24
    358e:	39 f7       	brne	.-50     	; 0x355e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <UART_receiveString+0xa>
    35a6:	0f 92       	push	r0
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	9b 83       	std	Y+3, r25	; 0x03
    35ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35b0:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_recieveByte();
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	9b 81       	ldd	r25, Y+3	; 0x03
    35bc:	8c 01       	movw	r16, r24
    35be:	02 0f       	add	r16, r18
    35c0:	13 1f       	adc	r17, r19
    35c2:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_recieveByte>
    35c6:	f8 01       	movw	r30, r16
    35c8:	80 83       	st	Z, r24
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	28 2f       	mov	r18, r24
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	9b 81       	ldd	r25, Y+3	; 0x03
    35dc:	8c 01       	movw	r16, r24
    35de:	02 0f       	add	r16, r18
    35e0:	13 1f       	adc	r17, r19
    35e2:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_recieveByte>
    35e6:	f8 01       	movw	r30, r16
    35e8:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	fc 01       	movw	r30, r24
    35f6:	e2 0f       	add	r30, r18
    35f8:	f3 1f       	adc	r31, r19
    35fa:	80 81       	ld	r24, Z
    35fc:	83 32       	cpi	r24, 0x23	; 35
    35fe:	31 f7       	brne	.-52     	; 0x35cc <UART_receiveString+0x30>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	fc 01       	movw	r30, r24
    360c:	e2 0f       	add	r30, r18
    360e:	f3 1f       	adc	r31, r19
    3610:	10 82       	st	Z, r1
}
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	08 95       	ret

00003622 <__udivmodsi4>:
    3622:	a1 e2       	ldi	r26, 0x21	; 33
    3624:	1a 2e       	mov	r1, r26
    3626:	aa 1b       	sub	r26, r26
    3628:	bb 1b       	sub	r27, r27
    362a:	fd 01       	movw	r30, r26
    362c:	0d c0       	rjmp	.+26     	; 0x3648 <__udivmodsi4_ep>

0000362e <__udivmodsi4_loop>:
    362e:	aa 1f       	adc	r26, r26
    3630:	bb 1f       	adc	r27, r27
    3632:	ee 1f       	adc	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	a2 17       	cp	r26, r18
    3638:	b3 07       	cpc	r27, r19
    363a:	e4 07       	cpc	r30, r20
    363c:	f5 07       	cpc	r31, r21
    363e:	20 f0       	brcs	.+8      	; 0x3648 <__udivmodsi4_ep>
    3640:	a2 1b       	sub	r26, r18
    3642:	b3 0b       	sbc	r27, r19
    3644:	e4 0b       	sbc	r30, r20
    3646:	f5 0b       	sbc	r31, r21

00003648 <__udivmodsi4_ep>:
    3648:	66 1f       	adc	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	88 1f       	adc	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	1a 94       	dec	r1
    3652:	69 f7       	brne	.-38     	; 0x362e <__udivmodsi4_loop>
    3654:	60 95       	com	r22
    3656:	70 95       	com	r23
    3658:	80 95       	com	r24
    365a:	90 95       	com	r25
    365c:	9b 01       	movw	r18, r22
    365e:	ac 01       	movw	r20, r24
    3660:	bd 01       	movw	r22, r26
    3662:	cf 01       	movw	r24, r30
    3664:	08 95       	ret

00003666 <__prologue_saves__>:
    3666:	2f 92       	push	r2
    3668:	3f 92       	push	r3
    366a:	4f 92       	push	r4
    366c:	5f 92       	push	r5
    366e:	6f 92       	push	r6
    3670:	7f 92       	push	r7
    3672:	8f 92       	push	r8
    3674:	9f 92       	push	r9
    3676:	af 92       	push	r10
    3678:	bf 92       	push	r11
    367a:	cf 92       	push	r12
    367c:	df 92       	push	r13
    367e:	ef 92       	push	r14
    3680:	ff 92       	push	r15
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	ca 1b       	sub	r28, r26
    3690:	db 0b       	sbc	r29, r27
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	09 94       	ijmp

0000369e <__epilogue_restores__>:
    369e:	2a 88       	ldd	r2, Y+18	; 0x12
    36a0:	39 88       	ldd	r3, Y+17	; 0x11
    36a2:	48 88       	ldd	r4, Y+16	; 0x10
    36a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    36b0:	b9 84       	ldd	r11, Y+9	; 0x09
    36b2:	c8 84       	ldd	r12, Y+8	; 0x08
    36b4:	df 80       	ldd	r13, Y+7	; 0x07
    36b6:	ee 80       	ldd	r14, Y+6	; 0x06
    36b8:	fd 80       	ldd	r15, Y+5	; 0x05
    36ba:	0c 81       	ldd	r16, Y+4	; 0x04
    36bc:	1b 81       	ldd	r17, Y+3	; 0x03
    36be:	aa 81       	ldd	r26, Y+2	; 0x02
    36c0:	b9 81       	ldd	r27, Y+1	; 0x01
    36c2:	ce 0f       	add	r28, r30
    36c4:	d1 1d       	adc	r29, r1
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	ed 01       	movw	r28, r26
    36d2:	08 95       	ret

000036d4 <itoa>:
    36d4:	fb 01       	movw	r30, r22
    36d6:	9f 01       	movw	r18, r30
    36d8:	e8 94       	clt
    36da:	42 30       	cpi	r20, 0x02	; 2
    36dc:	c4 f0       	brlt	.+48     	; 0x370e <itoa+0x3a>
    36de:	45 32       	cpi	r20, 0x25	; 37
    36e0:	b4 f4       	brge	.+44     	; 0x370e <itoa+0x3a>
    36e2:	4a 30       	cpi	r20, 0x0A	; 10
    36e4:	29 f4       	brne	.+10     	; 0x36f0 <itoa+0x1c>
    36e6:	97 fb       	bst	r25, 7
    36e8:	1e f4       	brtc	.+6      	; 0x36f0 <itoa+0x1c>
    36ea:	90 95       	com	r25
    36ec:	81 95       	neg	r24
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	64 2f       	mov	r22, r20
    36f2:	77 27       	eor	r23, r23
    36f4:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__udivmodhi4>
    36f8:	80 5d       	subi	r24, 0xD0	; 208
    36fa:	8a 33       	cpi	r24, 0x3A	; 58
    36fc:	0c f0       	brlt	.+2      	; 0x3700 <itoa+0x2c>
    36fe:	89 5d       	subi	r24, 0xD9	; 217
    3700:	81 93       	st	Z+, r24
    3702:	cb 01       	movw	r24, r22
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	a1 f7       	brne	.-24     	; 0x36f0 <itoa+0x1c>
    3708:	16 f4       	brtc	.+4      	; 0x370e <itoa+0x3a>
    370a:	5d e2       	ldi	r21, 0x2D	; 45
    370c:	51 93       	st	Z+, r21
    370e:	10 82       	st	Z, r1
    3710:	c9 01       	movw	r24, r18
    3712:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <strrev>

00003716 <strrev>:
    3716:	dc 01       	movw	r26, r24
    3718:	fc 01       	movw	r30, r24
    371a:	67 2f       	mov	r22, r23
    371c:	71 91       	ld	r23, Z+
    371e:	77 23       	and	r23, r23
    3720:	e1 f7       	brne	.-8      	; 0x371a <strrev+0x4>
    3722:	32 97       	sbiw	r30, 0x02	; 2
    3724:	04 c0       	rjmp	.+8      	; 0x372e <strrev+0x18>
    3726:	7c 91       	ld	r23, X
    3728:	6d 93       	st	X+, r22
    372a:	70 83       	st	Z, r23
    372c:	62 91       	ld	r22, -Z
    372e:	ae 17       	cp	r26, r30
    3730:	bf 07       	cpc	r27, r31
    3732:	c8 f3       	brcs	.-14     	; 0x3726 <strrev+0x10>
    3734:	08 95       	ret

00003736 <__udivmodhi4>:
    3736:	aa 1b       	sub	r26, r26
    3738:	bb 1b       	sub	r27, r27
    373a:	51 e1       	ldi	r21, 0x11	; 17
    373c:	07 c0       	rjmp	.+14     	; 0x374c <__udivmodhi4_ep>

0000373e <__udivmodhi4_loop>:
    373e:	aa 1f       	adc	r26, r26
    3740:	bb 1f       	adc	r27, r27
    3742:	a6 17       	cp	r26, r22
    3744:	b7 07       	cpc	r27, r23
    3746:	10 f0       	brcs	.+4      	; 0x374c <__udivmodhi4_ep>
    3748:	a6 1b       	sub	r26, r22
    374a:	b7 0b       	sbc	r27, r23

0000374c <__udivmodhi4_ep>:
    374c:	88 1f       	adc	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	5a 95       	dec	r21
    3752:	a9 f7       	brne	.-22     	; 0x373e <__udivmodhi4_loop>
    3754:	80 95       	com	r24
    3756:	90 95       	com	r25
    3758:	bc 01       	movw	r22, r24
    375a:	cd 01       	movw	r24, r26
    375c:	08 95       	ret

0000375e <_exit>:
    375e:	f8 94       	cli

00003760 <__stop_program>:
    3760:	ff cf       	rjmp	.-2      	; 0x3760 <__stop_program>
