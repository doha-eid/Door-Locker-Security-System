/*********************************************************************************************************
 * Module :UART
 *
 * File Name: uart.c
 *
 *  Description : source file for UART driver
 *      Author: Doha Eid
 *********************************************************************************************************/
#include<avr/io.h>
#include"uart.h"
#include"common_macros.h"
/**********************************************************************************************************
 *                                     Function Definitions                                              *
 *********************************************************************************************************/

/*
 * Description:
 * Function responsible for initialize the UART device by :
 * set up the frame format like the parity bit type , number of data bits and number of stop bits
 * Enable the UART
 * set up the UART baud rate
 */
void UART_init(const UART_Config *uart_ptr)
{
	uint16 ubrr_value=0;
	/*U2X=1 for double transmission speed */
	UCSRA=(1<<U2X);

	/************************** UCSRB Description **************************
	 * RXCIE = 0 Disable USART RX Complete Interrupt Enable
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
    UCSRB=(1<<RXEN)|(1<<TXEN);
    /************************** UCSRC Description **************************
    	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
    	 * UMSEL   = 0 Asynchronous Operation
    	 * UPM1:0  = 00 Disable parity bit
    	 * USBS    = 0 One stop bit
    	 * UCSZ1:0 = 11 For 8-bit data mode
    	 * UCPOL   = 0 Used with the Synchronous operation only
    	 ***********************************************************************/
    UCSRC=(UCSRC&0xF9)|(uart_ptr->bit_data);
    UCSRC=(UCSRC&0XCF)|(uart_ptr->parity);
    UCSRC=(UCSRC&0XF7)|(uart_ptr->stop_bit);
    /*Calculate UBRR register value */
    ubrr_value = (uint16)(((F_CPU / (uart_ptr->Baudrate * 8UL))) - 1);
    /*First 8-bits from Baud Prescale inside UBRRL and last 4-bits in UBRRH*/
    UBRRH=(ubrr_value>>8);
    UBRRL=ubrr_value;
}

/*
 * Description:
 * Function responsible for send byte to another UART device
 */
void UART_sendByte(const uint8 data )
{
	/*
		 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one
		 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
	/*
		 * Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now
		 */
	UDR=data;
}
/*
 * Description:
 * Function responsible for receive byte from the another UART device
 */
uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
}
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;
	/*Send the whole string */
	while (Str[i] !='\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

		/* Receive the first byte */
		Str[i] = UART_recieveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
}
